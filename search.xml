<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>闭包和装饰器</title>
      <link href="/2021/11/09/zhuang-shi-qi/"/>
      <url>/2021/11/09/zhuang-shi-qi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="1-闭包"><a href="#1-闭包" class="headerlink" title="1. 闭包"></a>1. 闭包</h1><h2 id="1-1Python中闭包的定义"><a href="#1-1Python中闭包的定义" class="headerlink" title="1.1Python中闭包的定义"></a>1.1<code>Python</code>中闭包的定义</h2><p>请大家跟我理解一下，如果在一个函数的内部定义了另一个函数，外部的我们叫他外函数，内部的我们叫他内函数。</p><p>闭包： </p><p>　　在一个外函数中定义了一个内函数，内函数里运用了外函数的临时变量，并且外函数的返回值是内函数的引用。这样就构成了一个闭包。</p><p>一般情况下，在我们认知当中，如果一个函数结束，函数的内部所有东西都会释放掉，还给内存，局部变量都会消失。但是闭包是一种特殊情况，如果外函数在结束的时候发现有自己的临时变量将来会在内部函数中用到，就把这个临时变量绑定给了内部函数，然后自己再结束。</p><p>　　很晦涩很难理解啊！！我们来看一段代码^.^</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#闭包函数的实例</span><span class="token comment" spellcheck="true"># outer是外部函数 a和b都是外函数的临时变量</span><span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">:</span>    b <span class="token operator">=</span> <span class="token number">10</span>    <span class="token comment" spellcheck="true"># inner是内函数</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#在内函数中 用到了外函数的临时变量</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 外函数的返回值是内函数的引用</span>    <span class="token keyword">return</span> inner<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 在这里我们调用外函数传入参数5</span>    <span class="token comment" spellcheck="true">#此时外函数两个临时变量 a是5 b是10 ，并创建了内函数，然后把内函数的引用返回存给了demo</span>    <span class="token comment" spellcheck="true"># 外函数结束的时候发现内部函数将会用到自己的临时变量，这两个临时变量就不会释放，会绑定给这个内部函数</span>    demo <span class="token operator">=</span> outer<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 我们调用内部函数，看一看内部函数是不是能使用外部函数的临时变量</span>    <span class="token comment" spellcheck="true"># demo存了外函数的返回值，也就是inner函数的引用，这里相当于执行inner函数</span>    demo<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 15</span>    demo2 <span class="token operator">=</span> outer<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>    demo2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#17</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2-名词解释"><a href="#1-2-名词解释" class="headerlink" title="1.2 名词解释"></a>1.2 名词解释</h2><p>从上面例子是我写的一个最简单的很典型的闭包。我估计如果是初学的小伙伴，可能很多名词都不明白是什么意思，没关系，我把这些名词按照自己的理解去解释一下~</p><p>1 外函数返回了内函数的引用：</p><p>　　引用是什么？在python中一切都是对象，包括整型数据1，函数，其实是对象。</p><p>　　当我们进行a=1的时候，实际上在内存当中有一个地方存了值1，然后用a这个变量名存了1所在内存位置的引用。引用就好像c语言里的指针，大家可以把引用理解成地址。a只不过是一个变量名字，a里面存的是1这个数值所在的地址，就是a里面存了数值1的引用。</p><p>　　相同的道理，当我们在python中定义一个函数def demo():  的时候，内存当中会开辟一些空间，存下这个函数的代码、内部的局部变量等等。这个demo只不过是一个变量名字，它里面存了这个函数所在位置的引用而已。我们还可以进行x = demo， y = demo， 这样的操作就相当于，把demo里存的东西赋值给x和y，这样x 和y 都指向了demo函数所在的引用，在这之后我们可以用x() 或者 y() 来调用我们自己创建的demo() ，调用的实际上根本就是一个函数，x、y和demo三个变量名存了同一个函数的引用。</p><p>　　不知道大家有没有理解，很晦涩，希望我说明白了我想表达的。</p><p>　　有了上面的解释，我们可以继续说，返回内函数的引用是怎么回事了。对于闭包，在外函数outer中 最后return inner，我们在调用外函数 demo = outer() 的时候，outer返回了inner，inner是一个函数的引用，这个引用被存入了demo中。所以接下来我们再进行demo() 的时候，相当于运行了inner函数。</p><p>　　同时我们发现，一个函数，如果函数名后紧跟一对括号，相当于现在我就要调用这个函数，如果不跟括号，相当于只是一个函数的名字，里面存了函数所在位置的引用。</p><p>2 外函数把临时变量绑定给内函数：</p><p>　　按照我们正常的认知，一个函数结束的时候，会把自己的临时变量都释放还给内存，之后变量都不存在了。一般情况下，确实是这样的。但是闭包是一个特别的情况。外部函数发现，自己的临时变量会在将来的内部函数中用到，自己在结束的时候，返回内函数的同时，会把外函数的临时变量送给内函数绑定在一起。所以外函数已经结束了，调用内函数的时候仍然能够使用外函数的临时变量。</p><p>　　在我编写的实例中，我两次调用外部函数outer,分别传入的值是5和7。内部函数只定义了一次，我们发现调用的时候，内部函数是能识别外函数的临时变量是不一样的。python中一切都是对象，虽然函数我们只定义了一次，但是外函数在运行的时候，实际上是按照里面代码执行的，外函数里创建了一个函数，我们每次调用外函数，它都创建一个内函数，虽然代码一样，但是却创建了不同的对象，并且把每次传入的临时变量数值绑定给内函数，再把内函数引用返回。虽然内函数代码是一样的，但其实，我们每次调用外函数，都返回不同的实例对象的引用，他们的功能是一样的，但是它们实际上不是同一个函数对象。</p><h2 id="1-3-闭包中内函数修改外函数局部变量"><a href="#1-3-闭包中内函数修改外函数局部变量" class="headerlink" title="1.3 闭包中内函数修改外函数局部变量"></a>1.3 闭包中内函数修改外函数局部变量</h2><p>　　在闭包内函数中，我们可以随意使用外函数绑定来的临时变量，但是如果我们想修改外函数临时变量数值的时候发现出问题了！咋回事捏？？！！（哇哇大哭）</p><p>　　在基本的python语法当中，一个函数可以随意读取全局数据，但是要修改全局数据的时候有两种方法:1 global 声明全局变量 2 全局变量是可变类型数据的时候可以修改</p><p>　　在闭包内函数也是类似的情况。在内函数中想修改闭包变量（外函数绑定给内函数的局部变量）的时候：</p><p>　　　　1 在<code>python3</code>中，可以用nonlocal 关键字声明 一个变量， 表示这个变量不是局部变量空间的变量，需要向上一层变量空间找这个变量。</p><p>　　　　2 在<code>python2</code>中，没有nonlocal这个关键字，我们可以把闭包变量改成可变类型数据进行修改，比如列表。</p><p>上代码！！！</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#修改闭包变量的实例</span><span class="token comment" spellcheck="true"># outer是外部函数 a和b都是外函数的临时变量</span><span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">:</span>    b <span class="token operator">=</span> <span class="token number">10</span>  <span class="token comment" spellcheck="true"># a和b都是闭包变量</span>    c <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#这里对应修改闭包变量的方法2</span>    <span class="token comment" spellcheck="true"># inner是内函数</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#内函数中想修改闭包变量</span>        <span class="token comment" spellcheck="true"># 方法1 nonlocal关键字声明</span>        nonlocal  b        b<span class="token operator">+=</span><span class="token number">1</span>        <span class="token comment" spellcheck="true"># 方法二，把闭包变量修改成可变数据类型 比如列表</span>        c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 外函数的返回值是内函数的引用</span>    <span class="token keyword">return</span> inner<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    demo <span class="token operator">=</span> outer<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    demo<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 6  11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><p>由于闭包引用了外部函数的局部变量，则外部函数的局部变量没有及时释放，消耗内存</p></blockquote><h2 id="1-4闭包的应用"><a href="#1-4闭包的应用" class="headerlink" title="1.4闭包的应用"></a>1.4闭包的应用</h2><p>闭包有啥用？？！！</p><p>　　很多伙伴很糊涂，闭包有啥用啊？？还这么难懂！</p><p>　　 1. 装饰器！！！装饰器是做什么的？？其中一个应用就是，我们工作中写了一个登录功能，我们想统计这个功能执行花了多长时间，我们可以用装饰器装饰这个登录模块，装饰器帮我们完成登录函数执行之前和之后取时间。</p><p>　　 2. 面向对象！！！经历了上面的分析，我们发现外函数的临时变量送给了内函数。大家回想一下类对象的情况，对象有好多类似的属性和方法，所以我们创建类，用类创建出来的对象都具有相同的属性方法。闭包也是实现面向对象的方法之一。在<code>python</code>当中虽然我们不这样用，在其他编程语言入比如<code>javaScript</code>中，经常用闭包来实现面向对象编程</p><h1 id="2-初识装饰器"><a href="#2-初识装饰器" class="headerlink" title="2.初识装饰器"></a>2.初识装饰器</h1><p>装饰器是程序开发中经常会用到的一个功能，用好了装饰器，开发效率如虎添翼，所以这也是Python面试中必问的问题，但对于好多初次接触这个知识的人来讲，这个功能有点绕，自学时直接绕过去了，然后面试问到了就挂了，因为装饰器是程序开发的基础知识，这个都不会，别跟人家说你会Python, 看了下面的文章，保证你学会装饰器。</p><h2 id="2-1-举个栗子让大家感性的认识装饰器"><a href="#2-1-举个栗子让大家感性的认识装饰器" class="headerlink" title="2.1 举个栗子让大家感性的认识装饰器"></a>2.1 举个栗子让大家感性的认识装饰器</h2><p>初创公司有N个业务部门，基础平台部门负责提供底层的功能，如：数据库操作、redis调用、监控API等功能。业务部门使用基础功能时，只需调用基础平台提供的功能即可。如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">############### 基础平台提供的功能如下 ###############</span><span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'f1'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'f2'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'f3'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">f4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'f4'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">############### 业务部门A 调用基础平台提供的功能 ###############</span>f1<span class="token punctuation">(</span><span class="token punctuation">)</span>f2<span class="token punctuation">(</span><span class="token punctuation">)</span>f3<span class="token punctuation">(</span><span class="token punctuation">)</span>f4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">############### 业务部门B 调用基础平台提供的功能 ###############</span>f1<span class="token punctuation">(</span><span class="token punctuation">)</span>f2<span class="token punctuation">(</span><span class="token punctuation">)</span>f3<span class="token punctuation">(</span><span class="token punctuation">)</span>f4<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>目前公司有条不紊的进行着，但是，以前基础平台的开发人员在写代码时候没有关注验证相关的问题，即：基础平台的提供的功能（f1,f2,f3,f4）可以被任何人使用。现在需要对基础平台的所有功能进行重构，为平台提供的所有功能添加验证机制，即：执行功能前，先进行验证。</p><p>老大把工作交给 Low B，他是这么做的：</p><blockquote><p>跟每个业务部门交涉，每个业务部门自己写代码，调用基础平台的功能之前先验证。诶，这样一来基础平台就不需要做任何修改了。太棒了，有充足的时间泡妹子</p></blockquote><p>当天Low B 被开除了…</p><h4 id="老大把工作交给-Low-BB，他是这么做的："><a href="#老大把工作交给-Low-BB，他是这么做的：" class="headerlink" title="老大把工作交给 Low BB，他是这么做的："></a>老大把工作交给 Low BB，他是这么做的：</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">############### 基础平台提供的功能如下 ############### </span><span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 验证1</span>    <span class="token comment" spellcheck="true"># 验证2</span>    <span class="token comment" spellcheck="true"># 验证3</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'f1'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 验证1</span>    <span class="token comment" spellcheck="true"># 验证2</span>    <span class="token comment" spellcheck="true"># 验证3</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'f2'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 验证1</span>    <span class="token comment" spellcheck="true"># 验证2</span>    <span class="token comment" spellcheck="true"># 验证3</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'f3'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">f4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 验证1</span>    <span class="token comment" spellcheck="true"># 验证2</span>    <span class="token comment" spellcheck="true"># 验证3</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'f4'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">############### 业务部门不变 ############### </span><span class="token comment" spellcheck="true">### 业务部门A 调用基础平台提供的功能### </span>f1<span class="token punctuation">(</span><span class="token punctuation">)</span>f2<span class="token punctuation">(</span><span class="token punctuation">)</span>f3<span class="token punctuation">(</span><span class="token punctuation">)</span>f4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">### 业务部门B 调用基础平台提供的功能 ### </span>f1<span class="token punctuation">(</span><span class="token punctuation">)</span>f2<span class="token punctuation">(</span><span class="token punctuation">)</span>f3<span class="token punctuation">(</span><span class="token punctuation">)</span>f4<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过了一周 Low BB 被开除了…</p><h4 id="老大把工作交给-Low-BBB，他是这么做的："><a href="#老大把工作交给-Low-BBB，他是这么做的：" class="headerlink" title="老大把工作交给 Low BBB，他是这么做的："></a>老大把工作交给 Low BBB，他是这么做的：</h4><blockquote><p>只对基础平台的代码进行重构，其他业务部门无需做任何修改</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">############### 基础平台提供的功能如下 ############### </span><span class="token keyword">def</span> <span class="token function">check_login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 验证1</span>    <span class="token comment" spellcheck="true"># 验证2</span>    <span class="token comment" spellcheck="true"># 验证3</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    check_login<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'f1'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    check_login<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'f2'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    check_login<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'f3'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">f4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    check_login<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'f4'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>老大看了下Low BBB 的实现，嘴角漏出了一丝的欣慰的笑，语重心长的跟Low BBB聊了个天：</p><h5 id="老大说："><a href="#老大说：" class="headerlink" title="老大说："></a>老大说：</h5><p>写代码要遵循<code>开放封闭</code>原则，虽然在这个原则是用的面向对象开发，但是也适用于函数式编程，简单来说，它规定已经实现的功能代码不允许被修改，但可以被扩展，即：</p><ul><li>封闭：已实现的功能代码块</li><li>开放：对扩展开发</li></ul><p>如果将开放封闭原则应用在上述需求中，那么就不允许在函数 f1 、f2、f3、f4的内部进行修改代码，老板就给了Low BBB一个实现方案：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">w1</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 验证1</span>        <span class="token comment" spellcheck="true"># 验证2</span>        <span class="token comment" spellcheck="true"># 验证3</span>        func<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> inner@w1<span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'f1'</span><span class="token punctuation">)</span>@w1<span class="token keyword">def</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'f2'</span><span class="token punctuation">)</span>@w1<span class="token keyword">def</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'f3'</span><span class="token punctuation">)</span>@w1<span class="token keyword">def</span> <span class="token function">f4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'f4'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于上述代码，也是仅仅对基础平台的代码进行修改，就可以实现在其他人调用函数 f1 f2 f3 f4 之前都进行【验证】操作，并且其他业务部门无需做任何操作。</p><p>Low BBB心惊胆战的问了下，这段代码的内部执行原理是什么呢？</p><p>老大正要生气，突然Low BBB的手机掉到地上，恰巧屏保就是Low BBB的女友照片，老大一看一紧一抖，喜笑颜开，决定和Low BBB交个好朋友。</p><p>详细的开始讲解了：</p><p>单独以f1为例：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">w1</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 验证1</span>        <span class="token comment" spellcheck="true"># 验证2</span>        <span class="token comment" spellcheck="true"># 验证3</span>        func<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> inner@w1<span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'f1'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>python解释器就会从上到下解释代码，步骤如下：</p><ol><li>def w1(func): ==&gt;将w1函数加载到内存</li><li>@w1</li></ol><p>没错， 从表面上看解释器仅仅会解释这两句代码，因为函数在 没有被调用之前其内部代码不会被执行。</p><p>从表面上看解释器着实会执行这两句，但是 @w1 这一句代码里却有大文章， @函数名 是python的一种语法糖。</p><p>####上例@w1内部会执行一下操作：</p><h4 id="执行w1函数"><a href="#执行w1函数" class="headerlink" title="执行w1函数"></a>执行w1函数</h4><blockquote><p>执行w1函数 ，并将 @w1 下面的函数作为w1函数的参数，即：**@w1 等价于 w1(f1)** 所以，内部就会去执行：</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true">#验证 1</span>    <span class="token comment" spellcheck="true">#验证 2</span>    <span class="token comment" spellcheck="true">#验证 3</span>    f1<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># func是参数，此时 func 等于 f1 </span><span class="token keyword">return</span> inner  <span class="token comment" spellcheck="true"># 返回的 inner，inner代表的是函数，非执行函数 ,其实就是将原来的 f1 函数塞进另外一个函数中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="w1的返回值"><a href="#w1的返回值" class="headerlink" title="w1的返回值"></a>w1的返回值</h4><blockquote><p>将执行完的w1函数返回值 赋值 给@w1下面的函数的函数名f1 即将w1的返回值再重新赋值给 f1，即：</p><pre class="line-numbers language-python"><code class="language-python">新f1 <span class="token operator">=</span> <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token comment" spellcheck="true">#验证 1</span>            <span class="token comment" spellcheck="true">#验证 2</span>            <span class="token comment" spellcheck="true">#验证 3</span>            原来f1<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> inner<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以，以后业务部门想要执行 f1 函数时，就会执行新f1 函数，在新f1 函数内部先执行验证，再执行原来的f1函数，然后将原来f1 函数的返回值返回给了业务调用者。</p></blockquote><p>如此一来， 即执行了验证的功能，又执行了原来f1函数的内容，并将原f1函数返回值 返回给业务调用着</p><p>Low BBB 你明白了吗？要是没明白的话，我晚上去你家帮你解决吧！！</p><h1 id="3-装饰器的示例"><a href="#3-装饰器的示例" class="headerlink" title="3.装饰器的示例"></a>3.装饰器的示例</h1><h2 id="3-1-无参数的函数"><a href="#3-1-无参数的函数" class="headerlink" title="3.1 无参数的函数"></a>3.1 无参数的函数</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> time <span class="token keyword">import</span> ctime<span class="token punctuation">,</span> sleep<span class="token keyword">def</span> <span class="token function">timefun</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapped_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{func.__name__} called at {ctime()}"</span><span class="token punctuation">)</span>        func<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapped_func@timefun<span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am foo"</span><span class="token punctuation">)</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码理解装饰器执行行为可理解成</p><pre class="line-numbers language-python"><code class="language-python">foo <span class="token operator">=</span> timefun<span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># foo先作为参数赋值给func后,foo接收指向timefun返回的wrapped_func</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调用foo(),即等价调用wrapped_func()</span><span class="token comment" spellcheck="true"># 内部函数wrapped_func被引用，所以外部函数的func变量(自由变量)并没有释放</span><span class="token comment" spellcheck="true"># func里保存的是原foo函数对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2-被装饰的函数有参数"><a href="#3-2-被装饰的函数有参数" class="headerlink" title="3.2 被装饰的函数有参数"></a>3.2 被装饰的函数有参数</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> time <span class="token keyword">import</span> ctime<span class="token punctuation">,</span> sleep<span class="token keyword">def</span> <span class="token function">timefun</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapped_func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{func.__name__} called at {ctime()}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>        func<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapped_func@timefun<span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span>foo<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>foo<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-被装饰的函数有不定长参数"><a href="#3-3-被装饰的函数有不定长参数" class="headerlink" title="3.3 被装饰的函数有不定长参数"></a>3.3 被装饰的函数有不定长参数</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> time <span class="token keyword">import</span> ctime<span class="token punctuation">,</span> sleep<span class="token keyword">def</span> <span class="token function">timefun</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapped_func</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{func.__name__} called at {ctime()}"</span><span class="token punctuation">)</span>        func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapped_func@timefun<span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token operator">+</span>c<span class="token punctuation">)</span>foo<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>foo<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> time <span class="token keyword">import</span> ctime<span class="token punctuation">,</span> sleep<span class="token keyword">def</span> <span class="token function">timefun</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapped_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{func.__name__} called at {ctime()}"</span><span class="token punctuation">)</span>        func<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapped_func@timefun<span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am foo"</span><span class="token punctuation">)</span>@timefun<span class="token keyword">def</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'----hahah---'</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>getInfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-装饰器-decorator-功能"><a href="#4-装饰器-decorator-功能" class="headerlink" title="4.装饰器(decorator)功能"></a>4.装饰器(decorator)功能</h1><ol><li>引入日志</li><li>函数执行时间统计</li><li>执行函数前预备处理</li><li>执行函数后清理功能</li><li>权限校验等场景</li><li>缓存</li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 装饰器，闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数</title>
      <link href="/2021/11/07/han-shu/"/>
      <url>/2021/11/07/han-shu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="函数定义："><a href="#函数定义：" class="headerlink" title="函数定义："></a>函数定义：</h2><p>Python中使用<code>def</code>关键字来定义函数，通过<code>return</code>关键字来返回函数的执行结果。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义函数：def是定义函数的关键字、fac是函数名，num是参数（自变量）</span><span class="token keyword">def</span> <span class="token function">fac</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""求阶乘"""</span>    result <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> n <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">*=</span> n    <span class="token comment" spellcheck="true"># 返回num的阶乘（因变量）</span>    <span class="token keyword">return</span> resultm <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'m = '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>n <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'n = '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 当需要计算阶乘的时候不用再写重复的代码而是直接调用函数fac</span><span class="token comment" spellcheck="true"># 调用函数的语法是在函数名后面跟上圆括号并传入参数</span><span class="token keyword">print</span><span class="token punctuation">(</span>fac<span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">//</span> fac<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">//</span> fac<span class="token punctuation">(</span>m <span class="token operator">-</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数的作用："><a href="#函数的作用：" class="headerlink" title="函数的作用："></a>函数的作用：</h2><p>世界级的编程大师<em>Martin Fowler</em>先生曾经说过：“<strong>代码有很多种坏味道，重复是最坏的一种！</strong>”因此函数的作用就是解决代码重复的方案之一。</p><h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><h3 id="参数的默认值"><a href="#参数的默认值" class="headerlink" title="参数的默认值"></a>参数的默认值</h3><p>如果函数中没有<code>return</code>语句，那么函数默认返回代表空值的<code>None</code>。另外，在定义函数时，函数也可以没有自变量，但是函数名后面的圆括号是必须有的。Python中还允许函数的参数拥有默认值。</p><p>带默认值的参数必须放在不带默认值的参数之后，否则将产生<code>SyntaxError</code>错误，错误消息是：<code>non-default argument follows default argument</code>，翻译成中文的意思是“没有默认值的参数放在了带默认值的参数后面”</p><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>Python语言中的函数可以通过星号表达式语法来支持可变参数。</p><p>可变参数指的是在调用函数时，可以向函数传入0个或任意多个参数。</p><p>有的时候我们并不知道函数的调用者会向该函数传入多少个参数，这个时候可变参数就可以派上用场。</p><h3 id="位置参数和关键字参数"><a href="#位置参数和关键字参数" class="headerlink" title="位置参数和关键字参数"></a>位置参数和关键字参数</h3><p>在设计函数的时候，函数的参数个数是暂时无法确定的</p><p>arguments —&gt; args —&gt; 参数</p><p>位置参数 —&gt; positional argument</p><ul><li>*args —&gt; 可变参数 —&gt; 可以接收零个或任意多个位置参数 —&gt; 将所有的位置参数打包成一个元组</li></ul><p>关键字参数 —&gt; keyword argument —&gt; 参数名=参数值</p><ul><li>**kwargs —&gt; 可以接收零个或任意多个关键字参数 —&gt; 将所有的关键字参数打包成一个字典</li></ul><p>关键字参数一定是在位置参数的后面！！！</p><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>Lambda函数 —&gt; 没有名字而且一句话就能写完的函数，唯一的表达式就是函数的返回值</p><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>函数如果直接或间接的调用了自身，这种调用称为递归调用。</p><p>不管函数是调用别的函数，还是调用自身，一定要做到快速收敛。<br>在比较有限的调用次数内能够结束，而不是无限制的调用函数。</p><p>如果一个函数（通常指递归调用的函数）不能够快速收敛，那么就很有可能产生下面的错误<br>RecursionError: maximum recursion depth exceeded<br>最终导致程序的崩溃。</p><p>阶乘的定义：<br>~ n! = n * (n - 1) * (n - 2) * … * 2 * 1<br>~ n! = n * (n - 1)!</p><p>递归函数的两个要点：</p><ol><li>递归公式（第n次跟第n-1次的关系）</li><li>收敛条件（什么时候停止递归调用）</li></ol><h2 id="函数的调用过程"><a href="#函数的调用过程" class="headerlink" title="函数的调用过程"></a>函数的调用过程</h2><p><img src="https://cdn.jsdelivr.net/gh/DongxiLi/free_imgaes/images/%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B%E7%9A%84%E5%89%AF%E6%9C%AC.jpg" alt="函数的调用过程"></p><h2 id="Python中函数的地位"><a href="#Python中函数的地位" class="headerlink" title="Python中函数的地位"></a>Python中函数的地位</h2><p>Python中的函数是一等函数（一等公民）：</p><ol><li>函数可以作为函数的参数</li><li>函数可以作为函数的返回值</li><li>函数可以赋值给变量</li></ol><p>如果把函数作为函数的参数或者返回值，这种玩法通常称之为高阶函数。<br>通常使用高阶函数可以实现对原有函数的解耦合操作。</p><p>运算 - operate，运算符 - operator</p><h2 id="全局变量和局部变量"><a href="#全局变量和局部变量" class="headerlink" title="全局变量和局部变量"></a>全局变量和局部变量</h2><p>全局变量（没有写在任何函数里面的变量）<br>局部变量（定义在函数内部的变量）</p><p>Python程序中搜索一个变量是按照 LEGB 顺序进行搜索的</p><p>Local（局部作用域） —&gt; Embeded（嵌套作用域） —&gt; Global（全局作用域）<br>—&gt; Built-in（内置作用域） —&gt; NameError: name … not defined</p><p>global —&gt; 声明使用全局变量或者定义一个局部变量将其放到全局作用域<br>nonlocal —&gt; 声明使用嵌套作用域的变量（不使用局部变量）</p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="如何使用其他文件（模块）中定义的函数"><a href="#如何使用其他文件（模块）中定义的函数" class="headerlink" title="如何使用其他文件（模块）中定义的函数"></a>如何使用其他文件（模块）中定义的函数</h3><p>方法一：可以通过import导入模块，然后通过”模块名.函数名”的方式调用函数；<br>方法二：直接从模块中导入函数 —&gt; “from 模块 import 函数” —&gt; 直接通过函数名调用函数</p><h3 id="如何给导入的函数，模块取别名"><a href="#如何给导入的函数，模块取别名" class="headerlink" title="如何给导入的函数，模块取别名"></a>如何给导入的函数，模块取别名</h3><p>import导入函数、模块时，可以使用as关键字（alias）进行别名</p><p>做工程化项目开发时，如果项目中的代码文件非常多，我们可以使用”包”（package）来管理”模块”（module），<br>再通过模块来管理函数，包其实就是一个文件夹，而模块就是一个Python文件，通过这种方式就可以很好的解决</p><h3 id="如何解决命名冲突问题"><a href="#如何解决命名冲突问题" class="headerlink" title="如何解决命名冲突问题"></a>如何解决命名冲突问题</h3><p>大型项目团队开发中经常遇到的命名冲突的问题。</p><p>方法一：导入函数的时候对函数进行别名<br>方法二：使用完全限定名（qualified name） —&gt; [包名.]模块名.函数名</p><h2 id="Python内存管理图解"><a href="#Python内存管理图解" class="headerlink" title="Python内存管理图解"></a>Python内存管理图解</h2><img src="https://cdn.jsdelivr.net/gh/DongxiLi/free_imgaes/images/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%9B%BE.jpg" alt="内存管理" style="zoom:50%;"><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>写程序的终极原则：高内聚，低耦合 —&gt; high cohesion low coupling</p><p>设计函数最为重要的原则：单一职责原则（一个函数只做好一件事情）—&gt; 高度内聚</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python os模块的常用函数</title>
      <link href="/2021/10/04/os-mo-kuai-de-chang-yong-han-shu/"/>
      <url>/2021/10/04/os-mo-kuai-de-chang-yong-han-shu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><code>os</code> 模块的常用方法</p><ol><li><code>os.chdir()</code> 方法用于改变当前工作目录到指定的路径</li></ol><ol start="2"><li><code>os.getcwd()</code> 方法用于返回当前工作目录</li></ol><ol start="3"><li><p><code>os.listdir() </code>方法用于返回指定的文件夹包含的文件或文件夹的名字的列表。</p><p> 它不包括 <strong>.</strong> 和 <strong>..</strong> 即使它在文件夹中。</p></li></ol><ol start="4"><li><p><code>os.makedirs()</code> 方法用于递归创建目录。</p><p> 如果子目录创建失败或者已经存在，会抛出一个 OSError 的异常，Windows上Error 183 即为目录已经存在的异常错误。</p><p> 如果第一个参数 path 只有一级，则与<code>mkdir()</code>函数相同。</p></li></ol><ol start="5"><li><p><code>os.mkdir()</code> 方法用于以数字权限模式创建目录。默认的模式为 0777 (八进制)。</p><p> 如果目录有多级，则创建最后一级，如果最后一级目录的上级目录有不存在的，则会抛出一个 OSError。</p></li></ol><ol start="6"><li><p><code>os.open()</code> 方法用于打开一个文件，并且设置需要的打开选项，模式参数mode参数是可选的，默认为 0777。</p></li><li><p><code>os.remove()</code> 方法用于删除指定路径的文件。如果指定的路径是一个目录，将抛出OSError。</p></li></ol><ol start="8"><li><code>os.removedirs()</code> 方法用于递归删除目录。像<code>rmdir()</code>, 如果子文件夹成功删除, <code>removedirs()</code>才尝试它们的父文件夹,直到抛出一个error(它基本上被忽略,因为它一般意味着你文件夹不为空)。</li></ol><ol start="9"><li><code>os.rename()</code> 方法用于命名文件或目录，从 src 到 dst,如果dst是一个存在的目录, 将抛出OSError。</li></ol><ol start="10"><li><code>os.renames()</code> 方法用于递归重命名目录或文件。类似rename()。</li></ol><ol start="11"><li><code>os.rmdir()</code> 方法用于删除指定路径的目录。仅当这文件夹是空的才可以, 否则, 抛出OSError。</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取当前工作路径</span><span class="token comment" spellcheck="true"># os.getcwdb()  # b'/Users/lidongxi/Desktop'</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 更改工作路径</span>os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'Desktop/'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 查看当前/指令路径下的文件或文件夹的名字，返回列表</span>os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 非递归创建文件夹</span><span class="token comment" spellcheck="true"># 如果目录有多级，则创建最后一级，如果最后一级目录的上级目录有不存在的，则会抛出一个</span>os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'demo'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 错误示例</span><span class="token comment" spellcheck="true"># os.mkdir('demofile/file')  #[Errno 2] No such file or directory: 'demofile/file'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># os.makedirs()方法用于递归创建目录</span>os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span><span class="token string">'demo02/new'</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>flags – 该参数可以是以下选项，多个使用 “|” 隔开：</p><ul><li>os.O_RDONLY: 以只读的方式打开</li><li>os.O_WRONLY: 以只写的方式打开</li><li>os.O_RDWR : 以读写的方式打开</li><li>os.O_NONBLOCK: 打开时不阻塞</li><li>os.O_APPEND: 以追加的方式打开</li><li>os.O_CREAT: 创建并打开一个新文件</li><li>os.O_TRUNC: 打开一个文件并截断它的长度为零（必须有写权限）</li><li>os.O_EXCL: 如果指定的文件存在，返回错误</li><li>os.O_SHLOCK: 自动获取共享锁</li><li>os.O_EXLOCK: 自动获取独立锁</li><li>os.O_DIRECT: 消除或减少缓存效果</li><li>os.O_FSYNC : 同步写入</li><li>os.O_NOFOLLOW: 不追踪软链接</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 打开文件</span>file <span class="token operator">=</span> os<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> flags<span class="token operator">=</span>os<span class="token punctuation">.</span>O_RDWR<span class="token operator">|</span>os<span class="token punctuation">.</span>O_CREAT<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 写入字符串, a bytes-like object is required</span>os<span class="token punctuation">.</span>write<span class="token punctuation">(</span>file<span class="token punctuation">,</span> str<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"This is test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭文件</span>os<span class="token punctuation">.</span>close<span class="token punctuation">(</span>file<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># os.remove() 方法用于删除指定路径的文件</span>os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># os.rmdir() 删除指定文件夹</span>os<span class="token punctuation">.</span>rmdir<span class="token punctuation">(</span><span class="token string">'demo'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 递归删除一个目录</span>os<span class="token punctuation">.</span>removedirs<span class="token punctuation">(</span><span class="token string">'demo02/new/'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">! touch test<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 重命名文件/文件夹名字</span><span class="token comment" spellcheck="true"># os.rename(src, dst)</span><span class="token comment" spellcheck="true"># 重命名文件</span>os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'demo.txt'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 重命名文件夹</span>os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'demo'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># os.renames() 方法用于递归重命名目录或文件。类似rename()</span><span class="token comment" spellcheck="true"># 在重命名的同时，如果目标文件夹不存在会先递归的创建文件夹，在把文件重命名到目标文件夹下</span>os<span class="token punctuation">.</span>renames<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'aa/b/demo.txt'</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'./aa/b/'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>os.path下的常用方法</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>os.path.basename（path）</td><td>返回文件名</td></tr><tr><td>os.path.dirname（path）</td><td>返回目录路径</td></tr><tr><td>os.path.abspath(path)</td><td>返回绝对路径</td></tr><tr><td>os.path.exists（path）</td><td>路径存在则返回True,路径损坏返回False</td></tr><tr><td>os.path.getatime（path）</td><td>返回最近访问时间（浮点型秒数）</td></tr><tr><td>os.path.getmtime（path）</td><td>返回最近文件修改时间</td></tr><tr><td>os.path.getctime（path）</td><td>返回文件 path 创建时间</td></tr><tr><td>os.path.getsize（path）</td><td>返回文件大小，如果文件不存在就返回错误</td></tr><tr><td>os.path.isfile</td><td>判断路径是否为文件</td></tr><tr><td>os.path.isdir（path） （path）</td><td>判断路径是否为目录</td></tr><tr><td>os.path.split（path）</td><td>把路径分割成 dirname 和 basename，返回一个元组</td></tr><tr><td>os.path.join（path1, [, path2[, …]）</td><td>将目录和文件名合成一个路径</td></tr><tr><td>os.path.splitext（path）</td><td>分割路径中的文件名与拓展名</td></tr></tbody></table><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取文件名</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span><span class="token string">'/Users/lidongxi/Desktop/douyin.xls'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取文件路径</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span><span class="token string">'/Users/lidongxi/Desktop/douyin.xls'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取绝对路径</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 判断路径是否存在</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'/Users/lidongxi/Desktop/douyin.xls'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取最近访问时间，返回浮点型的描述</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getatime<span class="token punctuation">(</span><span class="token string">'/Users/lidongxi/Desktop/douyin.xls'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取文件修改时间</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getmtime<span class="token punctuation">(</span><span class="token string">'/Users/lidongxi/Desktop/douyin.xls'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取文件创建的时间</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getctime<span class="token punctuation">(</span><span class="token string">'/Users/lidongxi/Desktop/douyin.xls'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 查看文件大小</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span><span class="token string">'/Users/lidongxi/Desktop/douyin.xls'</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">**</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 判断路径是否为文件</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span><span class="token string">'/Users/lidongxi/Desktop/douyin.xls'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 判断路径是否为目录</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span><span class="token string">'/Users/lidongxi/Desktop/douyin.xls'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 把路径分隔成路径和文件名，返回元组</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/Users/lidongxi/Desktop/douyin.xls'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 分隔路径中的文件名与拓展名，返回元组</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span><span class="token string">'/Users/lidongxi/Desktop/douyin.xls'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 将目录和文件名合成一个路径</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'/Users/lidongxi/Desktop'</span><span class="token punctuation">,</span> <span class="token string">'douyin.xls'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> os的system原理</p><ul><li>os.system() 函数可以将字符串转化成命令在服务器上运行；其原理是每一条system函数执行时，其会创建一个子进程在系统上执行命令行，子进程的执行结果无法影响主进程</li><li>上述原理会导致当需要执行多条命令行的时候可能得不到预期的结果；</li></ul><pre class="line-numbers language-python"><code class="language-python">os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'cd /usr/local'</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'aaa.txt'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上述程序运行后会发现txt文件并没有创建在/usr/local文件夹下，而是在当前的目录下</p><p>使用system执行多条命令</p><ul><li>为了保证system执行多条命令可以成功，多条命令需要在同一个子进程中运行;</li></ul><pre class="line-numbers language-python"><code class="language-python">os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'cd /usr/local &amp;&amp; mkdir aaa.txt'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 或者</span>os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'cd /usr/local ; mkdir aaa.txt'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 标准库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python sys模块的常用函数</title>
      <link href="/2021/10/04/biao-zhun-ku-sys/"/>
      <url>/2021/10/04/biao-zhun-ku-sys/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token comment" spellcheck="true"># argv在外部向程序传递参数</span><span class="token comment" spellcheck="true"># sys.argv 返回一个列表</span><span class="token comment" spellcheck="true"># sys.argv[0]第一个参数默认为文件当前脚本名</span><span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 查看python解释器版本</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'当前python解释器版本：{sys.version}'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># sys.platform: 获取当前系统平台</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'系统平台为：{sys.platform}'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># sys.getdefaultencoding(): 获取系统当前编码</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'系统当前编码：{sys.getdefaultencoding()}'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 返回当前解释器递归的最大深度</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'当前解释器递归的最大深度：{sys.getrecursionlimit()}'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 修改最大递归深度</span>sys<span class="token punctuation">.</span>setrecursionlimit<span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'修改后的递归最大深度：{sys.getrecursionlimit()}'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 程序中间的退出，arg=0为正常退出</span>sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token string">'程序出错，提前退出'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># sys.path: 获取指定模块搜索路径的字符串集合，可以将写好的模块放在得到的某个路径下，就可以在程序中import时正确找到</span><span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 标准库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>参数估计</title>
      <link href="/2021/09/29/can-shu-gu-ji/"/>
      <url>/2021/09/29/can-shu-gu-ji/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="参数估计"><a href="#参数估计" class="headerlink" title="参数估计"></a>参数估计</h2><p>推断型统计的核心就是用样本推测总体。在实际生产环境中，可能无法获得所有的数据，或者即便获取了所有的数据，但是没有足够的资源来分析所有的数据，在这种情况下，我们都需要用非常小量的样本特征去评估总体数据的特征，这其中的一项工作就是参数估计。</p><p>参数估计应用的场景非常的多，例如：</p><ol><li>在产品侧，我们可以用参数估计的方式评估A/B测试的效果。</li><li>在运营侧，我们可以用参数估计的方式优化活动配置和推荐策略。</li><li>在市场侧，我们可以用参数估计的方式制定广告投放策略。</li></ol><h3 id="实施步骤"><a href="#实施步骤" class="headerlink" title="实施步骤"></a>实施步骤</h3><ol><li><p>确定分析的置信水平</p></li><li><p>确定估计的参数类型</p></li><li><p>计算参数估计的区间</p><ul><li>数值型指标：$ A = z \times 样本标准差 / \sqrt{样本数量} $，其中 $ z $ 的值可以通过查表得到，如果置信水平选择95%，那么 $ z $ 的值就是1.96。大部分运营指标都是数值型指标，例如DAU、ARPU、转化率等。</li><li>占比型指标：$ A = z \times \sqrt{占比 \times (1 - 占比) / 样本数量} $，$ z $ 值同上。占比型指标如性别占比、渠道占比、品类占比等。</li></ul><p> 最终得到的估计区间就是：$ [样本均值 - A, 样本均值 + A] $。 </p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 统计学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 统计学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>相关和回归</title>
      <link href="/2021/09/29/xiang-guan-he-hui-gui/"/>
      <url>/2021/09/29/xiang-guan-he-hui-gui/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="相关和回归"><a href="#相关和回归" class="headerlink" title="相关和回归"></a>相关和回归</h2><p>我们知道，可以通过对指标的维度拆来解寻找指标变化的原因。当我们找到问题的原因时，自然会进一步思考一个问题：指标变化的原因这么多，其中的关键因素又是哪个呢？例如，我们在工作场景中时不时会讨论这些问题：</p><ol><li>电商类产品想知道哪个品类销售对整体销售贡献更大；</li><li>渠道运营想知道哪个渠道的用户对整体活跃作用更大；</li><li>负责留存的想知道哪个客群对整体的留存关系更大；</li><li>产品想知道到底哪些维度（城市、年龄、接入设备等）会影响整体活跃。</li></ol><p>还有很多类似的场景，在这种情况下我们不仅要要找到数据变化的原因，还需要明确出不同原因的重要性。因为实际工作中可用资源有限，只能集中优势资源解决核心问题。</p><h3 id="相关分析基本概念"><a href="#相关分析基本概念" class="headerlink" title="相关分析基本概念"></a>相关分析基本概念</h3><p>相关性分析，指对两个或多个指标进行分析，评估它们两两之间联系或相互影响的程度。相关性分析不仅可以分析出多个指标间是否存在相关关系，还能给出相关程度的量化值。在进行相关性分析时，我们会使用“相关系数”定量给出几个指标间联系和影响的程度，通常用 $ \rho $ 来表示，计算公式为：</p><p>$$<br>\rho = \frac {cov(X, Y)} {\sqrt{var(X) \cdot var(Y)}}<br>$$<br>需要注意的是，$ \rho $  只能用来度量线性关系，它的取值在 $ [-1, 1] $ 之间。数据中的离群值会对 $ \rho $ 产生影响，在计算时必须先剔除，实际使用相关关系时，还需要<strong>关注相关关系的稳定性</strong>。</p><p>我们用 $ \rho $ 值判断指标的相关性时遵循以下两个步骤。</p><ol><li>判断指标间是正相关、负相关，还是不相关。<ul><li>当 $ \rho \gt 0 $，认为指标间是正相关，也就是两者的趋势一致。如果指标 A 与指标 B 的 $ \rho \gt 0 $，那么指标 A 上涨，指标 B 也会上涨；反之亦然。</li><li>当 $ \rho \lt 0 $，认为指标间是负相关，也就是两者的趋势相反。如果指标 A 与指标 B 的 $ \rho \lt 0 $，那么指标 A 上涨，指标 B 会下降；反之亦然。</li><li>当 $ \rho = 0 $，认为指标间是不相关的，但并不代表两个指标是统计独立的。</li></ul></li><li>判断指标间的相关程度。<ul><li>当 $ \rho $ 的值在 $ [0.5,1] $ 之间，认为指标间是强相关，指标间的业务联系非常紧密。</li><li>当 $ \rho $ 的值在 $ [0.1,0.5) $ 之间，认为指标间是弱相关，指标间的业务联系不太紧密。</li><li>当 $ \rho $ 的值在 $ [0,0.1) $ 之间，认为指标间是无相关，指标间的业务联系无任何联系，也就是说当我们去运营指标 A 时，指标 B 不会产生相应的变化。</li></ul></li></ol><h3 id="相关分析应用场景"><a href="#相关分析应用场景" class="headerlink" title="相关分析应用场景"></a>相关分析应用场景</h3><p>事实上，相关性分析的应用场景非常多，基本上当问到“这两个东西有什么关系”、“哪个指标的作用（贡献或价值）更大”、“我们应该重点解决哪个问题”这类问题时，都可以用相关性分析给出比较准确的回答，非常便于产品运营找到解决问题的核心抓手。</p><img src="https://gitee.com/jackfrued/mypic/raw/master/20210713095938.png" width="80%"><p>在使用相关分析时，应注意以下几个方面：</p><ol><li>业务意义：当我们想知道A指标的情况时，可以监控B指标。</li><li>注意事项：千万不要将相关关系判断为因果关系，相关关系是伴随关系而不是因果关系。</li><li>强相关关系才是有业务价值的，建议寻找相关系数在 0.6 以上甚至 0.8 以上的指标。</li><li>相关关系的本质是 Y 的变化有多少能被 X 解释，跟 X 和 Y 之间的斜率大小无关。</li></ol><h3 id="Excel计算相关系数"><a href="#Excel计算相关系数" class="headerlink" title="Excel计算相关系数"></a>Excel计算相关系数</h3><ol><li>方法一：使用 CORREL 函数。</li><li>方法二：使用“数据分析”模块的“相关系数”功能。</li></ol><img src="https://gitee.com/jackfrued/mypic/raw/master/20210713164021.png" width="75%"><h3 id="相关分析案例"><a href="#相关分析案例" class="headerlink" title="相关分析案例"></a>相关分析案例</h3><h4 id="分析哪个客群的留存对整体留存贡献更大"><a href="#分析哪个客群的留存对整体留存贡献更大" class="headerlink" title="分析哪个客群的留存对整体留存贡献更大"></a>分析哪个客群的留存对整体留存贡献更大</h4><p>留存的运营中我们最常看的就是新客的留存和活跃客群的留存，用来评估哪个客群的留存与整体的留存联系更紧密，以便制定后续运营的策略。</p><img src="https://gitee.com/jackfrued/mypic/raw/master/20210928214403.png" style="zoom:65%;"><p>利用Excel进行相关分析的结果如下所示。</p><img src="https://gitee.com/jackfrued/mypic/raw/master/20210928214522.png" style="zoom:65%;"><p>可以看出，活跃访客的留存率与整体留存率的相关是强相关；而新增访客的留存率与整体留存率的相关是弱相关，所以如果要提升整体留存率，我们的产品运营资源应当更多地投放给活跃用户，以提升整体的留存率；而新增访客，虽然不会拿到很多运营资源，但是我们也要去深入分析为什么新增访客的留存的贡献比较小，适时做一些提升这部分客群与整体留存的策略。</p><h4 id="案例2：找出对购买转化率贡献最高的渠道"><a href="#案例2：找出对购买转化率贡献最高的渠道" class="headerlink" title="案例2：找出对购买转化率贡献最高的渠道"></a>案例2：找出对购买转化率贡献最高的渠道</h4><p>基本上电商运营会同时部署多个渠道，包括线上电商平台以及线下的门店。由于现有某产品从各个渠道获客的用户在产品上的购买转化率，需要评估哪些渠道的用户对整体购买转化率贡献最大，后续将重点营销此渠道。</p><img src="https://gitee.com/jackfrued/mypic/raw/master/20210928214725.png" style="zoom:65%;"><h4 id="案例3：分析哪些因素对-DAU-的影响更大"><a href="#案例3：分析哪些因素对-DAU-的影响更大" class="headerlink" title="案例3：分析哪些因素对 DAU 的影响更大"></a>案例3：分析哪些因素对 DAU 的影响更大</h4><p>我们分析 DAU 时常会将它拆解为各种维度来分析，这里我们分析与 DAU 联系最紧密的维度到底是哪些，以帮助我们制定针对性的运营策略，如下图所示。</p><img src="https://gitee.com/jackfrued/mypic/raw/master/20210928215043.png" style="zoom:65%;"><p>对于这样的报表，我们需要找出到底是哪几个城市、哪个操作系统，以及哪个年龄段的用户对于 DAU 的影响最大。如果能找出来这个关系，那么后续要提升 DAU，就有非常清晰的方向。</p><h3 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h3><p>如果只有一个自变量 X，而且因变量 Y 和自变量 X 之间的数量变化关系呈现近似的线性关系，就可以建立一元线性回归方程，通过自变量 X 的值来预测因变量 Y 的值，这就是所谓的<strong>一元线性回归预测</strong>，回归方程如下所示：<br>$$<br>Y = aX + b<br>$$<br>我们可以通过历史数据（已知的 $ X $ 和 $ Y $ ），确定参数 $ a $ 和 $ b $ 的值，还原出回归方程，从而实现预测。很显然，$ a $和 $ b $ 的取值可以有很多种选择，那么什么才是最好的 $ a $ 和 $ b$ 呢？如果把真实值记为 $ y $，把预测值记为 $ \hat{y} $，那么让 $ SSR $ 值最小的 $ a $ 和 $ b $ 就是最好的 $ a $ 和 $ b $ ，称之为<strong>最小二乘解</strong>，其中$ SSR $ 值计算公式如下所示：<br>$$<br>SSR = \sum_{i=1}^{n}(y_i - \hat{y_i})^2<br>$$<br>损失函数是凹函数，找到使函数最小的<code>a</code>和<code>b</code>的值，可以通过向凹函数的拐点进行逼近的方式来找到更好的<code>a</code>和<code>b</code>的值，具体的公式如下所示：</p><p>$$<br>a^\prime = a + (-1) \times \frac {\partial loss(a, b)} {\partial a} \times \Delta \<br>b^\prime = b + (-1) \times \frac {\partial loss(a, b)} {\partial b} \times \Delta<br>$$<br>对于上面的求 $ SSR $ 的函数来说，可以用下面的公式计算偏导数：<br>$$<br>f(a, b) = \frac {1} {N} \sum_{i=1}^{N}(y_i - (ax_i + b))^2  \<br>\frac {\partial {f(a, b)}} {\partial {a}} = \frac {2} {N} \sum_{i=1}^{N}(-x_iy_i + x_i^2a + x_ib) \<br>\frac {\partial {f(a, b)}} {\partial {b}} = \frac {2} {N} \sum_{i=1}^{N}(-y_i + x_ia + b)<br>$$<br>上面的方法称为<strong>梯度下降法</strong>。</p><p>在Excel中，可以使用“数据分析”模块的“”来实现线性回归。</p><img src="https://gitee.com/jackfrued/mypic/raw/master/20210714073655.png" width="75%"><p>对于回归分析，最为重要的是评价回归的结果是否理想，这关系到能否通过回归方程去预测将来，我们先看看决定系数（Multiple R-Squared，通常称之为$ R^2 $）。在统计学习中，决定系数用于度量因变量的变化中可由自变量解释部分所占的比例，也就是你的回归模型的解释力是否良好，$ R^2 $ 的值越接近<code>1</code>越好。<br>$$<br>SS_{tot} = \sum_{i}(y_{i} - \bar {y})^2 \<br>SS_{res} = \sum_{i}(y_{i} - \hat {y_i})^2 \<br>R^2 = 1 - \frac {SS_{res}} {SS_{tot}}<br>$$</p><img src="https://gitee.com/jackfrued/mypic/raw/master/20210714074159.png" width="60%"><p>接下来我们还要对回归方程的显著性进行检验，主要包括 t 检验（回归系数的检验）和F检验（回归方程的检验）。对于F检验（F-statistic）的结果，主要关注其 p-value ，如果 p-value 小于0.05，那么说明拟合效果是不错的。</p>]]></content>
      
      
      <categories>
          
          <category> 统计学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 统计学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>方差分析</title>
      <link href="/2021/09/29/fang-chai-fen-xi/"/>
      <url>/2021/09/29/fang-chai-fen-xi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="方差分析"><a href="#方差分析" class="headerlink" title="方差分析"></a>方差分析</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>在产品运营中，我们会遇到各种需要评估运营效果的场景，包括促活的活动是否起到作用、A/B 测试的策略有无成效等等。具体例如，产品升级前的平均 DAU 是 155 万，产品升级后的平均 DAU 是 157 万，那么如何判断 DAU 提升的 2 万是正常的波动，还是升级带来的效果呢？对比同一组数据在实施某些策略前后的数据变化，判断数据波动是不是某一因素导致的，这种方法我们称之为方差分析。方差分析通常缩写为 ANOVA（Analysis of Variance），也叫“F 检验”，用于两个及两个以上分组样本的差异性检验。简单的说，<strong>分析差异的显著性是否明显的方法就是方差分析</strong>。</p><p>举一个例子，如果我们需要分析优惠券的金额对用户的购买转化率是否能起到有效作用，我们可以将数据分成以下三个组：</p><img src="https://gitee.com/jackfrued/mypic/raw/master/20210713085210.png" width="60%"><p>用户购买行为是随机的，购买率很高的不会很多，购买率极低的也不会很多，绝大部分用户的购买率都集中在某个值附近，这个值我们叫作整体购买率的平均值。如果每个客群分组自身的购买率均值与这个整体购买率平均值不一致，就会出现以下两种情况。</p><ol><li><p>第一种情况</p><p> 蓝色分组的购买率平均值（蓝色线）比整体平均值（黑色线）要高，有可能是最右边那个很高的购买率把分组的均值抬升的，同时蓝色分组的数据分布很散（方差大），此时不能有十足把握说明该组用户的购买转化率很高。</p> <img src="https://gitee.com/jackfrued/mypic/raw/master/20210713085506.png" width="50%"></li><li><p>第二种情况</p><p> 绿色分组的购买率平均值（绿色线）比整体平均值（黑色线）要高，但是绿色分组的数据非常集中，都集中在分组的平均值（绿色线）附近，此时我们可以认为该组的转化率平均值与整体有明显区别。</p> <img src="https://gitee.com/jackfrued/mypic/raw/master/20210713085608.png" width="50%"></li></ol><p>为了更好表述上面的问题，我们可以引入“组内方差”的概念，即描述每个分组内部数据分布的离散情况。如下图所示，对于上面蓝色和绿色分组的“组内方差”，显然蓝色的组内方差更大，绿色的组内方差更小。</p><img src="https://gitee.com/jackfrued/mypic/raw/master/20210713085808.png" width="75%"><p>综上所述，如果上面三个分组的用户购买率平均值不在中线（整体购买率）左右，而是有明显的偏高或偏低，并且该组内的每个转化率都紧紧围绕在该组购买率平均值的附近（即组内方差很小）。那么我们就可以断定：该组的购买率与整体不一致，是该组对应优惠金额的影响造成的。</p><h3 id="定量分析"><a href="#定量分析" class="headerlink" title="定量分析"></a>定量分析</h3><p>如果要进行定量分析，可以使用 F 检验值和 F crit 临界值这两个指标。F 检验值用来精确表达这几组差异大小的，F crit临界值是一个判断基线：</p><ul><li>当 F &gt; F crit，这几组之间的差异超过判断基准了，认为不同优惠金额的分组间的购买率是不一样的，优惠金额这个因素会对购买率产生影响，也就是说通过运营优惠金额这个抓手，是可以提升用户购买转化率的；</li><li>当 F &lt; F crit，则认为不同优惠金额的分组间的购买率是一样的，优惠金额这个因素不会对购买率产生影响，也就是说需要继续寻找其他与购买转化率有关的抓手。</li></ul><img src="https://gitee.com/jackfrued/mypic/raw/master/20210713090505.png"><blockquote><p><strong>说明</strong>：图中 SS 代表方差、df 代表指标自由度、MS 是均方差、P-value 是差异的显著性水平。</p></blockquote><p>上图是用 Excel 得出的 A、B、C 三组的方差分析结果，如图所示 F  &lt; F crit，所以从定量分析角度，可以判定优惠金额不会对购买率产生影响。</p><h3 id="实施方法"><a href="#实施方法" class="headerlink" title="实施方法"></a>实施方法</h3><p>实施方差分析可以分为以下三步走：</p><ol><li><p>判断样本是否满足“方差分析”的前提条件</p><ul><li>每个分组中的每个值都必须来自同一个总体样本；</li><li>方差分析只能分析满足正态分布的指标，事实上，在产品运营中大部分指标都是正态分布，例如：<ul><li>几乎所有的转化率都满足正态分布：购买率、点击率、转化率、活跃率、留存率、复购率等。</li><li>几乎所有的业务量都满足正态分布：客单价、每日新增用户数、渠道引流的流量等。</li><li>几乎所有的用户画像指标都满足正态分布：年龄、城市、登录次数、使用时长等。</li></ul></li><li>分析的样本必须是随机抽样</li></ul></li><li><p>计算 F 检验值和 F crit 临界值</p></li><li><p>如果有差异，需要评估差异大小</p><p> 我们用一个新的指标来表示：$ R^2=SSA / SST $，其中 $ R^2 $ 表示差异大小，$ SSA $ 是组间误差平方和，$ SST $ 是总误差平方和。</p><ul><li>当 $ R^2 \gt 0.5 $，认为各个分组间的差异非常显著；</li><li>当 $ R^2 $ 在 $ [0.1, 0.5] $ 之间时，认为各个分组间的差异一般显著；</li><li>当 $ R^2 \lt 0.1 $ 时，认为各个分组间的差异微弱显著。</li></ul></li></ol><blockquote><p><strong>练习</strong>：打开“方差分析练习.xlsx”文件，完成练习1。</p></blockquote><h3 id="多因素方差分析"><a href="#多因素方差分析" class="headerlink" title="多因素方差分析"></a>多因素方差分析</h3><p>上面的案例是针对一种策略来分析效果。我们把这种形式的方差分析叫作单因素方差分析，实际工作中，我们可能需要研究多种策略（例如运营中的渠道、活动、客群等）对结果的影响，我们称之为多因素方差分析。例如我们会在多个运营渠道上安排多种运营活动，评价各个渠道的转化率。此时，影响转化率的因素有渠道和活动两个因素，我们可以使用“无重复双因素方差分析”来检查数据。</p><img src="https://gitee.com/jackfrued/mypic/raw/master/20210714125251.png" width="75%"><img src="https://gitee.com/jackfrued/mypic/raw/master/20210714130853.png" width="75%"><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>工作中遇到以下两类场景就可以使用方差分析：</p><ol><li>同一个客群在实施某个策略前后的指标对比。</li><li>两个或多个客群对比同一指标，评估同一指标在不同客群上的差异。</li></ol><img src="https://gitee.com/jackfrued/mypic/raw/master/20210714131318.png" width="85%">]]></content>
      
      
      <categories>
          
          <category> 统计学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 统计学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>概率基础</title>
      <link href="/2021/09/29/gai-lu-ji-chu/"/>
      <url>/2021/09/29/gai-lu-ji-chu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="概率基础"><a href="#概率基础" class="headerlink" title="概率基础"></a>概率基础</h2><h3 id="数据的集中趋势"><a href="#数据的集中趋势" class="headerlink" title="数据的集中趋势"></a>数据的集中趋势</h3><p>我们经常会使用以下几个指标来描述一组数据的集中趋势：</p><ol><li>均值 - 均值代表某个数据集的整体水平，我们经常提到的客单价、平均访问时长、平均配送时长等指标都是均值。均值的缺点是容易受极值的影响，虽然可以使用加权平均值来消除极值的影响，但是可能事先并不清楚数据的权重；对于正数可以用几何平均值来替代算术平均值。<ul><li>算术平均值：$$\bar{x}=\frac{\sum_{i=1}^{n}x_{i}}{n}=\frac{x_{1}+x_{2}+\cdots +x_{n}}{n}$$，例如计算最近30天日均DAU、日均新增访客等，都可以使用算术平均值。</li><li>几何平均值：$$\left(\prod_{i=1}^{n}x_{i}\right)^{\frac{1}{n}}={\sqrt[{n}]{x_{1}x_{2} \cdots x_{n}}}$$，例如计算不同渠道的平均转化率、不同客群的平均留存率、不同品类的平均付费率等，就可以使用几何平均值。</li></ul></li><li>中位数 - 将数据按照升序或降序排列后位于中间的数，它描述了数据的中等水平。</li><li>众数 - 数据集合中出现频次最多的数据，它代表了数据的一般水平。数据的趋势越集中，众数的代表性就越好。众数不受极值的影响，但是无法保证唯一性和存在性。</li></ol><p>例子：有A和B两组数据。</p><pre><code>A组：5, 6, 6, 6, 6, 8, 10B组：3, 5, 5, 6, 6, 9, 12</code></pre><p>A组的均值：6.74，中位数：6，众数：6。</p><p>B组的均值：6.57，中位数：6，众数：5, 6。</p><blockquote><p><strong>说明</strong>：在Excel中，可以使用AVERAGE、MEDIAN、MODE函数分别计算均值、中位数和众数。求中位数也可以使用QUARTILE.EXC或QUARTILE.INC函数，将第二个参数设置为2即可。</p></blockquote><p>对A组的数据进行一些调整。</p><pre><code>A组：5, 6, 6, 6, 6, 8, 10, 200B组：3, 5, 5, 6, 6, 9, 12</code></pre><p>A组的均值会大幅度提升，但中位数和众数却没有变化。</p><blockquote><p><strong>思考</strong>：怎样判断上面的200到底是不是一个异常值？</p></blockquote><table><thead><tr><th></th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>均值</td><td>充分利用了所有数据，适应性强</td><td>容易收到极端值（异常值）的影响</td></tr><tr><td>中位数</td><td>能够避免被极端值（异常值）的影响</td><td>不敏感</td></tr><tr><td>众数</td><td>能够很好的反映数据的集中趋势</td><td>有可能不存在（数据没有明显集中趋势）</td></tr></tbody></table><blockquote><p><strong>练习1</strong>：在“概率基础练习.xlsx”文件的表单“练习1”中，有一组用户订单支付金额的数据，计算订单的均值、中位数、众数。</p><p><strong>练习2：</strong>在“概率基础练习.xlsx”文件的表单“练习2”中，有一组商品销售量的数据，现计划设定一个阈值，对阈值以下的商品对应的分销商进行优化，应该选择什么作为阈值比较合适？</p></blockquote><h3 id="数据的离散趋势"><a href="#数据的离散趋势" class="headerlink" title="数据的离散趋势"></a>数据的离散趋势</h3><p>如果说数据的集中趋势，说明了数据最主要的特征是什么；那么数据的离散趋势，则体现了这个特征的稳定性。例如 A 地区冬季平均气温<code>0</code>摄氏度，最低气温<code>-10</code>摄氏度；B 地区冬季平均气温<code>-2</code>摄氏度，最低气温<code>-4</code>摄氏度；如果你是一个特别怕冷的人，在选择 A 和 B 两个区域作为工作和生活的城市时，你会做出怎样的选择？</p><ol><li><p>极值：就是最大值（maximum）、最小值（minimum），代表着数据集的上限和下限。</p><blockquote><p><strong>说明</strong>：在Excel中，计算极值的函数是MAX和MIN。</p></blockquote></li><li><p>极差：又称“全距”，是一组数据中的最大观测值和最小观测值之差，记作$R$。一般情况下，极差越大，离散程度越大，数据受极值的影响越严重。</p></li><li><p>四分位距离：$ IQR = Q_3 - Q_1 $。</p></li><li><p>方差：将每个值与均值的偏差进行平方，然后除以总数据量得到的值。简单来说就是表示数据与期望值的偏离程度。方差越大，就意味着数据越不稳定、波动越剧烈，因此代表着数据整体比较分散，呈现出离散的趋势；而方差越小，意味着数据越稳定、波动越平滑，因此代表着数据整体比较集中。</p><ul><li>总体方差：$$ \sigma^2 = \frac {\sum_{i=1}^{N}(X_i - \mu)^2} {N} $$。</li><li>样本方差：$$ S^2 = \frac {\sum_{i=1}^{N}(X_i - \bar{X})^2} {N-1} $$。</li></ul><blockquote><p><strong>说明</strong>：在Excel中，计算总体方差和样本方差的函数分别是VAR.P和VAR.S。</p></blockquote></li><li><p>标准差：将方差进行平方根运算后的结果，与方差一样都是表示数据与期望值的偏离程度。</p><ul><li>总体标准差：$$ \sigma = \sqrt{\frac{\sum_{i=1}^{N}(X_i - \mu)^2}{N}} $$。</li><li>样本标准差：$$ S = \sqrt{\frac{\sum_{i=1}^{N}(X_i - \bar{X})^2}{N-1}} $$。</li></ul><blockquote><p><strong>说明</strong>：在Excel中，计算标准差的函数分别是STDEV.P和STDEV.S。</p></blockquote></li></ol><blockquote><p><strong>练习3</strong>：复制“概率基础练习.xlsx”文件的表单“练习1”，将复制的表单命名为“练习3”，计算订单支付金额的最大值、最小值、极差、方差和标准差。</p></blockquote><h3 id="数据的频数分析"><a href="#数据的频数分析" class="headerlink" title="数据的频数分析"></a>数据的频数分析</h3><p>频数分析是指用一定的方式将数据分组，然后统计每个分组中样本的数量，再辅以图表（如直方图）就可以更直观的展示数据分布趋势的一种方法。</p><p>频数分析的意义：</p><ol><li>大问题变小问题，迅速聚焦到需要关注的群体。</li><li>找到合理的分类机制，有利于长期的数据分析（维度拆解）。</li></ol><p>例如：一个班有40个学生，考试成绩如下所示：</p><pre><code>73, 87, 88, 65, 73, 76, 80, 95, 83, 69, 55, 67, 70, 94, 86, 81, 87, 95, 84, 92, 92, 76, 69, 97, 72, 90, 72, 85, 80, 83, 97, 95, 62, 92, 67, 73, 91, 95, 86, 77</code></pre><p>用上面学过的知识，先解读学生考试成绩的数据。</p><p>均值：81.275，中位数：83，众数：95。</p><p>最高分：97，最低分：55，极差：42，方差：118.15，标准差：10.87。</p><p>但是，仅仅依靠上面的数据是很难对一个数据集做出全面的解读，我们可以把学生按照考试成绩进行分组，如下所示，大家可以自行尝试在Excel或用Python来完成这个操作。</p><table><thead><tr><th>分数段</th><th>学生人数</th></tr></thead><tbody><tr><td>&lt;60</td><td>1</td></tr><tr><td>[60, 65)</td><td>1</td></tr><tr><td>[65, 69)</td><td>5</td></tr><tr><td>[70, 75)</td><td>6</td></tr><tr><td>[75, 80)</td><td>3</td></tr><tr><td>[80, 85)</td><td>6</td></tr><tr><td>[85, 90)</td><td>6</td></tr><tr><td>[90, 95)</td><td>6</td></tr><tr><td>&gt;=95</td><td>6</td></tr></tbody></table><blockquote><p><strong>练习4</strong>：在“概率基础练习.xlsx”文件的表单“练习4”中，有某App首页版本迭代上线后的A/B测试数据，数据代表了参与测试的用户7日的活跃天数，请分析A组和B组的数据并判定哪组表现更优。</p><p><strong>练习5</strong>：在“概率基础练习.xlsx”文件的表单“练习5”中，有某App某个功能迭代上线后的A/B测试数据，数据代表了参与测试的用户30日的产品使用时长，请分析A组和B组的数据并判定哪组表现更优。</p></blockquote><h3 id="数据的概率分布"><a href="#数据的概率分布" class="headerlink" title="数据的概率分布"></a>数据的概率分布</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ol><li><p>随机试验：在相同条件下对某种随机现象进行观测的试验。随机试验满足三个特点：</p><ul><li>可以在相同条件下重复的进行。</li><li>每次试验的结果不止一个，事先可以明确指出全部可能的结果。</li><li>重复试验的结果以随机的方式出现（事先不确定会出现哪个结果）。</li></ul></li><li><p>随机变量：如果$X$指定给概率空间$S$中每一个事件$e$有一个实数$X(e)$，同时针对每一个实数$r$都有一个事件集合$A_r$与其相对应，其中$A_r={e: X(e) \le r}$，那么$X$被称作随机变量。从这个定义看出，$X$的本质是一个实值函数，以给定事件为自变量的实值函数，因为函数在给定自变量时会产生因变量，所以将$X$称为随机变量。</p><ul><li>离散型随机变量：数据可以一一列出。</li><li>连续型随机变量：数据不可以一一列出。</li></ul><p> 如果离散型随机变量的取值非常庞大时，可以近似看做连续型随机变量。</p></li><li><p>概率质量函数/概率密度函数：概率质量函数是描述离散型随机变量为特定取值的概率的函数，通常缩写为<strong>PMF</strong>。概率密度函数是描述连续型随机变量在某个确定的取值点可能性的函数，通常缩写为<strong>PDF</strong>。二者的区别在于，概率密度函数本身不是概率，只有对概率密度函数在某区间内进行积分后才是概率。</p></li></ol><h4 id="离散型分布"><a href="#离散型分布" class="headerlink" title="离散型分布"></a>离散型分布</h4><ol><li><p>伯努利分布（<em>Bernoulli distribution</em>）：又名<strong>两点分布</strong>或者<strong>0-1分布</strong>，是一个离散型概率分布。若伯努利试验成功，则随机变量取值为1。若伯努利试验失败，则随机变量取值为0。记其成功概率为$p (0 \le p \le 1)$，失败概率为$q=1-p$，则概率质量函数为：</p><p> $$ {\displaystyle f_{X}(x)=p^{x}(1-p)^{1-x}=\left&lt;!–swig￼0–&gt;x=1,\q\ &amp;{\mbox{if }}x=0.\\end{matrix}}\right.} $$</p></li><li><p>二项分布（<em>Binomial distribution</em>）：$n$个独立的是/非试验中成功的次数的离散概率分布，其中每次试验的成功概率为$p$。一般地，如果随机变量$X$服从参数为$n$和$p$的二项分布，记为$X\sim B(n,p)$。$n$次试验中正好得到$k$次成功的概率由概率质量函数给出，$\displaystyle f(k,n,p)=\Pr(X=k)={n \choose k}p^{k}(1-p)^{n-k}$，对于$k= 0, 1, 2, …, n$，其中${n \choose k}={\frac {n!}{k!(n-k)!}}$。</p></li><li><p>泊松分布（<em>Poisson distribution</em>）：适合于描述单位时间内随机事件发生的次数的概率分布。如某一服务设施在一定时间内受到的服务请求的次数、汽车站台的候客人数、机器出现的故障数、自然灾害发生的次数、DNA序列的变异数、放射性原子核的衰变数等等。泊松分布的概率质量函数为：$P(X=k)=\frac{e^{-\lambda}\lambda^k}{k!}$，泊松分布的参数$\lambda$是单位时间（或单位面积）内随机事件的平均发生率。</p><blockquote><p><strong>说明</strong>：泊松分布是在没有计算机的年代，由于二项分布的运算量太大运算比较困难，为了减少运算量，数学家为二项分布提供的一种近似。</p></blockquote></li></ol><h4 id="分布函数和密度函数"><a href="#分布函数和密度函数" class="headerlink" title="分布函数和密度函数"></a>分布函数和密度函数</h4><p>对于连续型随机变量，我们不可能去罗列每一个值出现的概率，因此要引入分布函数的概念。<br>$$<br>F(x) = P{X \le x}<br>$$<br>如果将$ X $看成是数轴上的随机坐标，上面的分布函数表示了$ x $落在区间$ (-\infty, x) $中的概率。分布函数有以下性质：</p><ol><li>$ F(x) $是一个单调不减的函数；</li><li>$ 0 \le F(x) \le 1$，且$ F(-\infty) = \lim_{x \to -\infty} F(x) = 0 $， $F(\infty) = \lim_{x \to \infty} F(x) = 1$；</li><li>$ F(x) $是右连续的。</li></ol><p>概率密度函数就是给分布函数求导的结果，简单的说就是：<br>$$<br>F(x) = \int_{- \infty}^{x} f(t)dt<br>$$</p><h4 id="连续型分布"><a href="#连续型分布" class="headerlink" title="连续型分布"></a>连续型分布</h4><ol><li><p>均匀分布（<em>Uniform distribution</em>）：如果连续型随机变量$X$具有概率密度函数$f(x)=\begin{cases}{\frac{1}{b-a}} \quad &amp;{a \leq x \leq b} \ {0} \quad &amp;{\mbox{other}}\end{cases}$，则称$X$服从$[a,b]$上的均匀分布，记作$X\sim U[a,b]$。</p></li><li><p>指数分布（<em>Exponential distribution</em>）：如果连续型随机变量$X$具有概率密度函数$f(x)=\begin{cases} \lambda e^{- \lambda x} \quad &amp;{x \ge 0} \ {0} \quad &amp;{x \lt 0} \end{cases}$，则称$X$服从参数为$\lambda$的指数分布，记为$X \sim Exp(\lambda)$。指数分布可以用来表示独立随机事件发生的时间间隔，比如旅客进入机场的时间间隔、客服中心接入电话的时间间隔、知乎上出现新问题的时间间隔等等。指数分布的一个重要特征是无记忆性（无后效性），这表示如果一个随机变量呈指数分布，它的条件概率遵循：$P(T \gt s+t\ |\ T \gt t)=P(T \gt s), \forall s,t \ge 0$。</p></li><li><p>正态分布（<em>Normal distribution</em>）：又名<strong>高斯分布</strong>（<em>Gaussian distribution</em>），是一个非常常见的连续概率分布，经常用自然科学和社会科学中来代表一个不明的随机变量。若随机变量$X$服从一个位置参数为$\mu$、尺度参数为$\sigma$的正态分布，记为$X \sim N(\mu,\sigma^2)$，其概率密度函数为：$\displaystyle f(x)={\frac {1}{\sigma {\sqrt {2\pi }}}}e^{-{\frac {\left(x-\mu \right)^{2}}{2\sigma ^{2}}}}$。</p> <img src="https://gitee.com/jackfrued/mypic/raw/master/20210716155507.png" width="80%"><p> “3$\sigma$法则”：</p> <img src="https://gitee.com/jackfrued/mypic/raw/master/20210716155542.png" width="75%"><p> 正态分布有一个非常重要的性质，<strong>大量统计独立的随机变量的平均值的分布趋于正态分布</strong>，这就是<strong>中心极限定理</strong>。中心极限定理的重要意义在于，我们可以用正态分布作为其他概率分布的近似。</p><p> 一个例子：假设某校入学新生的智力测验平均分数与标准差分别为 100 与 12。那么随机抽取 50 个学生，他们智力测验平均分数大于 105 的概率是多少？小于 90 的概率是多少？</p><p> 本例没有正态分布的假设，还好中心极限定理提供一个可行解，那就是当随机样本数量超过30，样本平均数 近似于一个正态变量，标准正态变量$ Z = \frac {\bar{X} - \mu} {\sigma / \sqrt{n}} $。</p><p> 平均分数大于 105 的概率为：$ P(Z \gt \frac{105 - 100}{12 / \sqrt{50}}) = P(Z \gt 5/1.7) = P(Z \gt 2.94) = 0.0016$。</p><p> 平均分数小于 90 的概率为：$ P(Z \lt \frac{90-100}{12/\sqrt{50}}) = P(Z &lt; -5.88) = 0.0000 $。</p><blockquote><p><strong>说明</strong>：上面标准正态分布的概率值可以查表得到。</p></blockquote></li><li><p>伽马分布（<em>Gamma distribution</em>）：假设$X_1, X_2, … X_n$为连续发生事件的等候时间，且这$n$次等候时间为独立的，那么这$n$次等候时间之和$Y$（$Y=X_1+X_2+…+X_n$）服从伽玛分布，即$Y \sim \Gamma(\alpha,\beta)$，其中$\alpha=n, \beta=\lambda$，这里的$\lambda$是连续发生事件的平均发生频率。</p></li><li><p>卡方分布（<em>Chi-square distribution</em>）：若$k$个随机变量$Z_1,Z_2,…,Z_k$是相互独立且符合标准正态分布（数学期望为0，方差为1）的随机变量，则随机变量$Z$的平方和$X=\sum_{i=1}^{k}Z_i^2$被称为服从自由度为$k$的卡方分布，记为$X \sim \chi^2(k)$。</p></li></ol><h3 id="其他内容"><a href="#其他内容" class="headerlink" title="其他内容"></a>其他内容</h3><h4 id="条件概率和贝叶斯定理"><a href="#条件概率和贝叶斯定理" class="headerlink" title="条件概率和贝叶斯定理"></a>条件概率和贝叶斯定理</h4><p><strong>条件概率</strong>是指事件A在事件B发生的条件下发生的概率，通常记为$P(A|B)$。设A与B为样本空间$\Omega$中的两个事件，其中$P(B) \gt 0$。那么在事件B发生的条件下，事件A发生的条件概率为：$P(A|B)=\frac{P(A \cap B)}{P(B)}$，其中$P(A \cap B)$是联合概率，即A和B两个事件共同发生的概率。</p><p>事件A在事件B已发生的条件下发生的概率，与事件B在事件A已发生的条件下发生的概率是不一样的。然而，这两者是有确定的关系的，<strong>贝叶斯定理</strong>就是对这种关系的陈述，即：$P(A|B)=\frac{P(A)P(B|A)}{P(B)}$，其中：</p><ul><li>$P(A|B)$是已知B发生后，A的条件概率，也称为A的后验概率。</li><li>$P(A)$是A的先验概率（也称为边缘概率），是不考虑B时A发生的概率。</li><li>$P(B|A)$是已知A发生后，B的条件概率，称为B的似然性。</li><li>$P(B)$是B的先验概率。</li></ul><p>按照上面的描述，贝叶斯定理可以表述为：<code>后验概率 = (似然性 * 先验概率) / 标准化常量</code>​，简单的说就是后验概率与先验概率和相似度的乘积成正比。</p><h4 id="大数定理"><a href="#大数定理" class="headerlink" title="大数定理"></a>大数定理</h4><p>样本数量越多，则其算术平均值就有越高的概率接近期望值。</p><ol><li>弱大数定律（辛钦定理）：样本均值依概率收敛于期望值，即对于任意正数$\epsilon$，有：$\lim_{n \to \infty}P(|\bar{X_n}-\mu|&gt;\epsilon)=0$。</li><li>强大数定律：样本均值以概率1收敛于期望值，即：$P(\lim_{n \to \infty}\bar{X_n}=\mu)=1$。</li></ol><h4 id="假设检验"><a href="#假设检验" class="headerlink" title="假设检验"></a>假设检验</h4><p>假设检验就是通过抽取样本数据，并且通过<strong>小概率反证法</strong>去验证整体情况的方法。假设检验的核心思想是小概率反证法（首先假设想推翻的命题是成立的，然后试图找出矛盾，找出不合理的地方来证明命题为假命题），即在<strong>零假设</strong>（null hypothesis）的前提下，估算某事件发生的可能性，如果该事件是小概率事件，在一次研究中本来是不可能发生的，但现在却发生了，这时候就可以推翻零假设，接受<strong>备择假设</strong>（alternative hypothesis）。如果该事件不是小概率事件，我们就找不到理由来拒绝之前的假设，实际中可引申为接受所做的无效假设。</p><p>假设检验会存在两种错误情况，一种称为“拒真”，一种称为“取伪”。如果原假设是对的，但你拒绝了原假设，这种错误就叫作“拒真”，这个错误的概率也叫作显著性水平$\alpha$，或称为容忍度；如果原假设是错的，但你承认了原假设，这种错误就叫作“取伪”，这个错误的概率我们记为$\beta$。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>描述性统计通常用于研究表象，将现象用数据的方式描述出来（用整体的数据来描述整体的特征）；推理性统计通常用于推测本质（通过样本数据特征去推理总体数据特征），也就是你看到的表象的东西有多大概率符合你对隐藏在表象后的本质的猜测。</p>]]></content>
      
      
      <categories>
          
          <category> 统计学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 统计学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析方法论</title>
      <link href="/2021/09/24/shu-ju-fen-xi-fang-fa-lun/"/>
      <url>/2021/09/24/shu-ju-fen-xi-fang-fa-lun/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="数据分析方法论"><a href="#数据分析方法论" class="headerlink" title="数据分析方法论"></a>数据分析方法论</h1><h2 id="一、公式法"><a href="#一、公式法" class="headerlink" title="一、公式法"></a>一、公式法</h2><p>所谓公式法就是针对某个指标，用公式层层分解该指标的影响因素。</p><p>举例:分析某产品的销售额较低的原因，用公式法分解： </p><ul><li>某产品销售额=销售量 X 产品单价</li><li>销售量=渠道A销售量 + 渠道B销售量 + 渠道C销售量 + …</li><li>渠道销售量=点击用户数UV X 下单率 购买转化</li><li>点击用户数=曝光量 X 点击率</li></ul><p><strong>第一层:找到产品销售额的影响因素。</strong>某产品销售额=销售量 X 产品单价。是销量过低还是价格设置不合理?</p><p><strong>第二层:找到销售量的影响因素。</strong>分析各渠道销售量，对比以往，是哪些过低了。</p><p><strong>第三层:分析影响渠道销售量的因素。</strong>渠道销售量=点击用户数 X 下单率。是点击用户数低了， 还是下单量过低。如果是下单量过低，需要看一下该渠道的广告内容针对的人群和产品实际受 众符合度高不高。</p><p><strong>第四层:分析影响点击的因素。</strong>点击用户数=曝光量 X 点击率。是曝光量不够还是点击率太低， 点击率低需要优化广告创意，曝光量则和投放的渠道有关。通过对销售额的逐层拆解，细化评估以及分析的粒度。 公式拆解法是针对问题的层级式解析，在拆解时，对因素层层分解，层层剥尽。</p><h2 id="二、象限法"><a href="#二、象限法" class="headerlink" title="二、象限法"></a>二、象限法</h2><p>网易云、QQ、酷狗、虾米</p><p>用户日活 、年龄层、购买会员数、</p><p>通过对两种及以上维度的划分，运用坐标的方式表达出想要的价值。由价值直接转变为策略， 从而进行一些落地的推动。象限法是一种策略驱动的思维，常于产品分析、市场分析、客户管 理、商品管理等。</p><img src="http://image.woshipm.com/wp-files/2020/05/f13WuZ3bnfjELhDLBra2.jpeg" alt="img" style="zoom:60%;"><img src="http://image.woshipm.com/wp-files/2020/05/WQSgegXa4UXdyYTGrrkm.jpeg" alt="img" style="zoom:50%;"><p>还有经典的 RFM 模型，把客户按最近一次消费(Recency)、消费频率(Frequency)、消费金额 (Monetary)三个维度分成八个象限。</p><p><img src="https://pic4.zhimg.com/80/v2-04470b0165b7dfa8b994c33d6e8f7353_1440w.jpg" alt="img"></p><p>象限法的优势:<br><strong>1. 找到问题的共性原因</strong><br>通过象限分析法，将有相同特征的事件进行归因分析，总结其中的共性原因。例如上面广告的 案例中，第一象限的事件可以提炼出有效的推广渠道与推广策略，第三和第四象限可以排除一 些无效的推广渠道;<br><strong>2. 建立分组优化策略</strong><br>针对投放的象限分析法可以针对不同象限建立优化策略，例如 RFM 客户管理模型中按照象限 将客户分为重点发展客户、重点保持客户、一般发展客户、一般保持客户等不同类型。给重点 发展客户倾斜更多的资源，比如 VIP 服务、个性化服务、附加销售等。给潜力客户销售价值更 高的产品，或一些优惠措施来吸引他们回归。</p><h2 id="三、二八法-帕累托分析"><a href="#三、二八法-帕累托分析" class="headerlink" title="三、二八法/帕累托分析"></a>三、二八法/帕累托分析</h2><p>二八法也可以叫帕累托法则，源于经典的二八法则。比如在个人财富上可以说世界上 20%的 人掌握着 80%的财富。而在数据分析中，则可以理解为 20%的数据产生了 80%的效果需要围 绕这 20%的数据进行挖掘。往往在使用二八法则的时候和排名有关系，排在前 20%的才算是 有效数据。二八法是抓重点分析，适用于任何行业。找到重点，发现其特征，然后可以思考如 何让其余的 80%向这 20%转化，提高效果。一般地，会用在产品分类上，去测量并构建 ABC 模型。比如某零售企业有 500 个 SKU 以及这 些 SKU 对应的销售额，那么哪些 SKU 是重要的呢，这就是在业务运营中分清主次的问题。常见的做法是将产品 SKU 作为维度，并将对应的销售额作为基础度量指标，将这些销售额指 标从大到小排列，并计算截止当前产品 SKU 的销售额累计合计占总销售额的百分比。百分比在 70%(含)以内，划分为 A 类。 百分比在 70<del>90%(含)以内，划分为 B 类。 百分比在 90</del>100%(含)以内，划分为 C 类。 以上百分比也可以根据自己的实际情况调整。ABC分析模型，不光可以用来划分产品和销售额，还可以划分客户及客户交易额等。比如给企 业贡献 80%利润的客户是哪些，占比多少。假设有 20%，那么在资源有限的情况下，就知道 要重点维护这 20%类客户。</p><h2 id="四、漏斗法"><a href="#四、漏斗法" class="headerlink" title="四、漏斗法"></a>四、漏斗法</h2><p>漏斗法即是漏斗图，有点像倒金字塔，是一个流程化的思考方式，常用于像新用户的开发、购物转化率这些有变化和一定流程的分析中。上图是经典的营销漏斗，形象展示了从获取用户到最终转化成购买这整个流程中的一个个子环 节。相邻环节的转化率则就是指用数据指标来量化每一个步骤的表现。所以整个漏斗模型就是 先将整个购买流程拆分成一个个步骤，然后用转化率来衡量每一个步骤的表现，最后通过异常 的数据指标找出有问题的环节，从而解决问题，优化该步骤，最终达到提升整体购买转化率的目的。整体漏斗模型的核心思想其实可以归为分解和量化。比如分析电商的转化，我们要做的就是监 控每个层级上的用户转化，寻找每个层级的可优化点。对于没有按照流程操作的用户，专门绘 制他们的转化模型，缩短路径提升用户体验。还有经典的黑客增长模型，AARRR 模型，指 Acquisition、Activation、Retention、Revenue、 Referral，即用户获取、用户激活、用户留存、用户收益以及用户传播。这是产品运营中比较 常见的一个模型，结合产品本身的特点以及产品的生命周期位置，来关注不同的数据指标，最 终制定不同的运营策略。从下面这幅 AARRR 模型图中，能够比较明显的看出来整个用户的生命周期是呈现逐渐递减趋 势的。通过拆解和量化整个用户生命周期各环节，可以进行数据的横向和纵向对比，从而发现 对应的问题，最终进行不断的优化迭代。</p><h2 id="五、逻辑树分析方法"><a href="#五、逻辑树分析方法" class="headerlink" title="五、逻辑树分析方法"></a>五、逻辑树分析方法</h2><h3 id="1-1、逻辑拆解"><a href="#1-1、逻辑拆解" class="headerlink" title="1.1、逻辑拆解"></a>1.1、逻辑拆解</h3><p>将复杂问题拆解成多子个问题进行分析(费米问题)不断地分解问题。逻辑树又称问题树、分解树等。逻辑树是将问题的所有子问题分层罗列，从最高层开始并逐步向下扩展。将复杂问题经过合理的假设拆解成一个一个子问题。</p><p><img src="https://pic4.zhimg.com/80/v2-a3a149bf3bb059d21856888d865dc97b_1440w.jpg" alt="img"></p><p>例如一个经典的费米问题分析方法：请问一座城市有多少调音师？ 拆解为两个子问题： 总共多少个调音师=所有调音师1年总共工作多长时间➗一个调音师一年工作多长时间</p><p><strong>所有调音师1年总共工作多长时间：10万小时</strong></p><ul><li>(第三层拆解)-如果一座城市居民500万，按拥有钢琴的人最小比例值1%的计算，则全市有5万架钢琴</li><li>(第二层拆解)-假设一架钢琴每年需要调音1次，每次调音要2个小时，一年工作365天，</li><li>(第一层拆解)-得出所有调音师1年总共工作10万小时=(5万架)X(1年1次)X(2小时)</li></ul><p><strong>一个调音师1年工作多长时间：2000小时</strong></p><ul><li>(第二层拆解)-假设1个调音师一周工作5天，每天工作8小时，一年工作50个星期</li><li>(第一层拆解)-得出一个调音师一年工作时长2000小时=(8小时)X(5天)X(5星期)</li></ul><p><img src="https://pic4.zhimg.com/80/v2-eaeb1a5c1b7092ced2d1d8548d1fb30f_1440w.jpg" alt="img"></p><h3 id="1-2、有什么用？"><a href="#1-2、有什么用？" class="headerlink" title="1.2、有什么用？"></a>1.2、有什么用？</h3><p>最大的用处就是去解决“费米问题”</p><p>什么是费米问题呢？</p><p>在<strong>产品经理或者数据分析师</strong>的面试过程中，面试官经常会遇到如下的问题，比如</p><ul><li><p>上海有多少个红绿灯？</p></li><li><p>北京有多少特斯拉？</p></li><li><p>芝加哥有多少钢琴？</p></li><li><p>北京有多少出租车？</p></li><li><p>某煎饼摊，一天卖出的煎饼数量是多少？</p></li><li><p>多少兵乓球可以装满这个屋子？</p></li><li><p>深圳有多少产品经理？</p></li><li><p>北京有多少个加油站？</p></li></ul><p>费米问题常用来被考察面试者以下三方面的能力</p><ul><li><strong>逻辑分析能力：</strong>遇到问题是否有清晰有条理，考察产品感和基础逻辑能力</li><li><strong>数据能力：</strong>对数据的关注度，是否重视日常的数据</li><li><strong>细节把握的能力：</strong>是否注意分析分析中的细节，结合实际情况去细化</li></ul><h3 id="1-3、如何去用？"><a href="#1-3、如何去用？" class="headerlink" title="1.3、如何去用？"></a>1.3、如何去用？</h3><p>经典分析问题举例说明：</p><p><strong>芝加哥有多少钢琴调音师？</strong></p><p>用逻辑数分析方法后可以得出</p><p><strong>钢琴调音师的数量=【芝加哥所有的钢琴师1年的总工作时间】÷【钢琴师每年的工作时间】</strong></p><p><strong>【前者】:<strong>芝加哥所有的钢琴师1年的总工作时间由下面几个因素决定</strong>——需求侧</strong></p><ul><li>芝加哥有多少架钢琴：250万人口乘以2%=5万</li><li>钢琴每年要调几次音：1年1次</li><li>调一次音要多久：2小时</li><li>所以一年的总工作时间是 5万×1×2=10万小时</li></ul><p><strong>【后者】：</strong>钢琴师每年的工作时间由下面几个因素决定<strong>——供给侧</strong></p><ul><li>5天8小时，50个星期=2000个小时</li><li>耗费在奔波的路上要减去-20%=1600小时</li></ul><p>结果就出来了</p><p>芝加哥大概有10万 ÷ 1600=60个</p><p>典型的供需关系问题</p><h3 id="1-4、费米问题：解题思路与技巧"><a href="#1-4、费米问题：解题思路与技巧" class="headerlink" title="1.4、费米问题：解题思路与技巧"></a>1.4、费米问题：解题思路与技巧</h3><p>如何面对产品经理或者数据分析师面试中开放的问题</p><p><strong>常用的思路：</strong></p><ul><li>已知数据进行切入</li><li>通用的三种解答方法进行切入：<strong>供需关系，空间分析、收入分析</strong></li></ul><p><strong>常用的数据（需要对数据有个基本的了解）：</strong></p><ul><li>北京1600平方千米，2100万人口</li><li>上海6300平方千米，2400万人口</li><li>广州7400平方千米，1400万人口</li><li>深圳2000平方千米，1200万人口</li></ul><p><strong>基于以上思路再次举个例子：</strong>请你估算北京有多少个加油站？</p><h4 id="解题方法1：从供需关系出发【解决80-的费米问题】"><a href="#解题方法1：从供需关系出发【解决80-的费米问题】" class="headerlink" title="解题方法1：从供需关系出发【解决80%的费米问题】"></a>解题方法1：从供需关系出发【解决80%的费米问题】</h4><ul><li><strong>假设：</strong>加油站的供求关系是平衡的，市场供应量与需求侧匹配</li><li><strong>参数：</strong>北京有500万机动车、一辆车10天＋一次油，一辆车加油5分钟，大部分车主实际加油时间为早上8点到晚上10点，14个小时，一个加油站默认2个加油桩，加油桩利用率50%</li><li><strong>模型分析</strong>：<ul><li>北京一天加油能力=北京的车辆一天加油需求次数</li><li>供给侧：北京城市一天加油能力=14个小时×50%利用率×2个桩÷5分钟，也就是一个加油桩一天能加168辆车</li><li>需求侧：500万车除以10，每天平均有50万辆车，要加油</li><li>50万除以168 ，也就是3000个加油站</li></ul></li><li><strong>点评：模型客观，参数值较为确定，参数个数较多</strong></li></ul><h4 id="解题方法2：从空间关系出发"><a href="#解题方法2：从空间关系出发" class="headerlink" title="解题方法2：从空间关系出发"></a><strong>解题方法2：从空间关系出发</strong></h4><ul><li><strong>假设：</strong>一个司机开到北京任何一个地方，快没油了，这个司机都能在很短的地方加到油</li><li><strong>参数：</strong>5分钟能加到油，车速50km/h, 北京的面积1600平方千米</li><li><strong>模型分析：</strong><ul><li>司机加到油的活动范围为：（50km/h乘以5分钟)^2</li><li>北京的面积1600平方千米÷司机加油的活动范围=922个</li></ul></li><li><strong>点评：</strong>模型比较好理解；但是参数值非常不确定，参数个数较少</li></ul><h4 id="解题方法3：从收入分析出发"><a href="#解题方法3：从收入分析出发" class="headerlink" title="解题方法3：从收入分析出发"></a>解题方法3：从收入分析出发</h4><ul><li><strong>假设</strong>：加油站的收入能够撑得起他的运营成本</li><li><strong>参数：</strong>北京500辆车、一辆车10天加一次油、加一次油200元，毛利润占收入的10%，工资支出占利润的50%，需要5个人支撑起一个加油站的营运，人均工资5000元</li><li><strong>模型分析：</strong><ul><li>北京某个加油站总支出：工资支出5000×5；</li><li>北京的加油站总收入：500万辆车、10一天加一次油。一次油200,，再乘以10%的毛利润，再乘以50%</li><li><strong>最终：</strong>北京的加油站总收入(支出)÷北京某个加油站总支出=6000个</li></ul></li></ul><p>三种方法估计出来的值大约为1000到6000，可以得出北京市加油站的数量级应该为“千”，取个平均值，大概为3000。</p><h3 id="1-5、费米问题案例集"><a href="#1-5、费米问题案例集" class="headerlink" title="1.5、费米问题案例集"></a>1.5、费米问题案例集</h3><p>【1】上海有多少个红绿灯？</p><ul><li><strong>解题方法：</strong>空间关系，</li><li><strong>假设：</strong>为了保证路口的安全，需要控制城市内的车保持中等速度行驶，</li><li><strong>参数：</strong>一个路口有4个红绿灯，10分钟以60km/h的速度前进的汽车一定会遇到红绿灯，上海市面积6300平方千米</li></ul><p>【2】北京有多少特斯拉？</p><ul><li><strong>模型分析：</strong>北京汽车保有量500万×特斯拉占据市场的份额，另外汽车的占据市场份额可以在路口蹲守，一个小时内经过了100辆车，有5辆是特斯拉，那就默认市场份额5%</li></ul><p>【3】北京有多少出租车？</p><ul><li>解题方法：供需角度</li><li>假设：假设北京市做出租车的需求量和出租车的数量是相匹配的</li><li>参数：<ul><li>一天中市场的打车时间需求：北京市人口2100万人口，一天中的打车比例为2%，每次打车的时间在30分钟；</li><li>一辆出租车可以提供的时间：24小时中，在途8小时，14小时休息，2小时空载；另外市面上，也就是每天8小时，一个司机可以解决6除以30分钟，也就是12个人的打车需求</li></ul></li><li>2100×2%÷12，就是北京出租车得数量</li></ul><p>【4】某煎饼摊，一年卖出的煎饼数量是多少？</p><ul><li>解题方法：从供需角度来解决</li><li>假设：能卖出的煎饼与能做出的煎饼供需关系一致</li><li>参数：<ul><li>煎饼大妈一天的工作时间：早上2小时、中午1小时、晚上2小时，总共5小时。</li><li>煎饼大妈做一个煎饼的时间：5分钟</li></ul></li><li>360天×（5小时÷5分钟）=？</li></ul><p>【5】多少兵乓球可以装满这个屋子？</p><ul><li>解题方法：从空间关系出发</li><li>假设：乒乓球立体的、塞满整个屋子</li><li>参数：利用乒乓球的直径计算他的正方体面积0.025平方米，整个屋子的面积100平方米</li><li>模型分析：相除即可</li></ul><p>【6】深圳有多少产品经理</p><ul><li>解题方法：从供需关系</li><li>假设：深圳市所有互联网公司都有产品经理</li><li>参数：深圳市互联网公司总数5000家，每一家公司的人员数量各不相同，但是加起来从业人数50万人，每一家公司的人员配比为（1：1：1：1：4：1）—销售：产品：交互：视觉：研发：人力等；</li><li>模型分析：50万*（1/9）=11万</li></ul><h2 id="六、多维度拆解分析方法"><a href="#六、多维度拆解分析方法" class="headerlink" title="六、多维度拆解分析方法"></a>六、多维度拆解分析方法</h2><p>顾名思义从多个维度拆解分析数据(维度、拆解)。在数据分析中，通过不同的维度去观察同一组数据，从而观察数据变化后的原因。大部分数据变化可以从**”数据指标”<strong>和</strong>“业务流程”<strong>两个方向进行拆解分析。</strong>“数据指标”维度：<strong>指的是数据指标构成因素的分析，比如用户指标(包含新增用户，留存用户等)</strong>“业务流程”维度：**指的是在实际业务流程中的因素分析，比如渠道分析(不同渠道的推广效果，不同渠道的付费率等)。其他：”时间维度“，“地区维度”等。</p><h2 id="七、5W2H-方法论"><a href="#七、5W2H-方法论" class="headerlink" title="七、5W2H 方法论"></a>七、5W2H 方法论</h2><p><strong>5W2H分析法。</strong>在碰到一个问题的时候，都可以从7个方面思考：why、what、who、when、where、how、how much。<strong>对于题主的问题来说顺序其实没有特别严格的规定哦~！</strong></p><p><strong>具体的内容包括：</strong></p><p>· WHY——为什么？为什么要这么做？理由何在？原因是什么？</p><p>· WHAT——是什么？目的是什么？做什么工作？</p><p>· WHO——谁？由谁来承担？谁来完成？谁负责？相关方是谁？</p><p>· WHEN——何时？什么时间完成？什么时机最适宜？</p><p>· WHERE——何处？在哪里做？从哪里入手？</p><p>· HOW——怎么做？如何提高效率？如何实施？方法怎样？</p><p>· HOW MUCH——多少？做到什么程度？数量如何？质量水平如何？费用产出如何？</p><p>你在脑子空白，不知道如何回答的时候，可以套用5W2H框架，把问题进行细化，快速明确问题，让自己的思路条理化。</p><p><strong>以面试的角度来谈论如何在实战中用好5W2H分析法</strong></p><blockquote><p>「你们现在准备一个电动汽车上市的推广策划，预算是20w，一个月的时间准备，你会怎样规划？（奔驰面试题）」</p></blockquote><p><strong>首先，我们发现题目给出的信息非常少，我们可以和面试官沟通。</strong>（如果是群面，就可以和同组的小伙伴们沟通）</p><p>“这个电动汽车的定价是多少？”</p><p>“电动汽车的产品定位是什么？有什么产品特色？技术上？外观上？”</p><p>“电动汽车的目标用户画像是怎样的？”</p><p>“有多少台电动汽车可以在推广期使用？”</p><p>……</p><p>通过和面试官的沟通，假定获取以下信息：</p><p>这款电动汽车定价20w左右，在技术上突破了传统电动汽车续航里程短、充电慢的缺点，性能上对齐传统汽车，但是比传统汽车更节能经济。适合工作了3-5年的1、2线白领人群，男性居多，大概有3台车可以在推广时使用。</p><p><strong>然后，我们先按照5W2H的框架来分析一遍。</strong>我们的回答可以是：</p><ul><li><strong>Why - 策划目的</strong> </li></ul><p>这个策划是要拓展年轻群体对电动汽车的认知，培养一批种子用户。预期传播覆盖人群200w+。</p><ul><li><strong>What - 主题内容</strong></li></ul><p>策划的主题是“电动，从此环保奔驰”，强化大家对电动、环保和性能的感知。</p><ul><li><strong>When - 活动时间</strong></li></ul><p>配合上市时间，推广时间在上市前2周，为上市做好预热。</p><ul><li><strong>Where - 渠道</strong></li></ul><p>预期目标分解，线上线下联动：</p><ol><li><p>提前制作宣传视频，选择汽车KOL的新媒体、虎扑等直男社区投放。（传播目标100w+）</p></li><li><p>与商场合作，开设试驾点。事先在网上开放报名，邀请网友在现场体验驾驶，记录并制作VLOG视频。（现场活动，参与人员有限）</p></li><li><p>后期Vlog传播，保持话题热度。（传播目标100w+）</p></li></ol><ul><li><strong>Who - 相关人员</strong></li></ul><p>内部：根据内部人员情况，做好工作分配安排</p><p>合作方：提前联系并确认好供应商、合作媒体、宣传资源</p><ul><li><strong>How - 怎么做</strong></li></ul><p>前期准备一个月的时间，整个推广策划大概需要7天时间，宣传视频策划制作、前期活动准备同步进行，大致需要20天时间，留下3天做推广上线前的调整时间。</p><p>全程实施检测效果，包括线上的播放量、转赞评等数据，线下的活动口碑等，活动结束后完成活动总结报告，对推广的效果做出总结。 </p><p>可做好项目安排表，合理规划项目进度。</p><ul><li><strong>How much - 成本</strong></li></ul><p>总预算20w。</p><p>宣传视频拍摄预算5w、kol新媒体投放预算7w、商场试驾预算7w，多出1w作为备用资金，应对一些突发情况。</p><h2 id="八、PEST分析方法论：行业分析"><a href="#八、PEST分析方法论：行业分析" class="headerlink" title="八、PEST分析方法论：行业分析"></a>八、PEST分析方法论：行业分析</h2><p>政策（Policy）、经济（Economy）、社会（Society）、技术（Technology）</p><p><img src="https://pic2.zhimg.com/80/v2-0cc0c02499b50f681d0be70e7ce03d1d_1440w.jpg" alt="img"></p><h2 id="九、AARRR-用户行为分析方法论"><a href="#九、AARRR-用户行为分析方法论" class="headerlink" title="九、AARRR 用户行为分析方法论"></a>九、AARRR 用户行为分析方法论</h2><p>AARRR模型对应产品运营的 5 个重要环节，分别是：</p><p><strong>第一环节是获取用户（Acquisition ）：用户如何找到我们？</strong></p><p><strong>1.语言——市场匹配</strong>，怎么说才能打动用户的心</p><p>实际上考验的是抓住用户注意力的能力。现在人们关注一条网络信息的时间通常是8秒，如果不能在8秒内告诉用户你的产品对他有什么用，你就失去了一次获客的机会。</p><p><strong>2.渠道——产品匹配，</strong>产品投放在什么渠道才能直达用户的视线范围</p><p>渠道可以分为三类，一种是口碑渠道，适合病毒营销；一种是有机渠道，适合搜索引擎优化（SEO）、内容营销，比如搜索引擎优化可以提高自己网站在搜索引擎搜索结果页面的排名；还有一种是付费渠道，有哪些付费渠道呢？</p><p>1）展示位广告</p><ul><li>在网站或手机 App 的顶部、App 的开屏广告位等。</li><li>按展示次数付费（CPM，Cost Per Mille），也就是有多少人看到了该广告。</li></ul><p>2）搜索广告</p><ul><li>广告主为某一个搜索关键词出价，用户看到的搜索结果是按广告主出价的高低来排名的。</li><li>按点击次数付费（CPC，Cost Per Click），也就是有多少人点击了该广告。</li></ul><p>3）信息流广告</p><ul><li><p>根据用户的兴趣爱好来推荐广告。</p></li><li><p>按点击次数付费（CPC）或者按投放的实际效果付费（CPA，Cost Per Action）。</p></li><li><p>按投放的实际效果付费（CPA，Cost Per Action）包括：</p></li><li><ul><li>CPD（Cost Per Download）：按 App 的下载数计费</li><li>CPI（Cost Per Install）：按激活 App 的数量计费</li><li>CPS（Cost Per Sales）：按完成购买的用户数或者销售额来计费</li></ul></li></ul><p>在将产品投放去哪个渠道的时候，要清楚你的目标用户是谁，目标用户在哪。目前主流广告平台都支持这三种方式的付费：按展示次数付费（CPM）、按点击次数付费（CPC）和按投放的实际效果付费（CPA）。广告主可以按自己的产品需求来灵活选择。</p><p><strong>【需要关注的指标】</strong></p><ul><li>渠道曝光量：有多少人看到产品推广的线索</li><li>渠道转换率：有多少用户因为曝光转换成用户</li><li>日新增用户数：每天新增用户是多少</li><li>日应用下载量：每天有多少用户下载了产品</li><li>获客成本（CAC）：获取一个客户所花费的成本</li></ul><p><strong>第二环节是激活用户（Activation）：用户的首次体验如何？</strong></p><p>想唤醒休眠用户，就得先摸清楚产品的“啊哈时刻”（Aha moment，让用户感受到产品亮点情不自禁地发出赞叹的时刻，它对应的就是打动用户的产品亮点）。</p><p>要想激活用户，得绘制一幅通往“啊哈时刻”的路线图。比如你负责的产品是个购物软件，在新用户体验到啊哈时刻之前，必须要完成下面这些步骤：下载app，找到所需商品，放入购物车，创建账户，输入姓名，加入信用卡和配送信息，然后点击购买。</p><p>在这一系列动作中，到底用户停留在了哪一步？是搜不到要的东西，还是创建账户太麻烦，或者是页面设置不合理？你要计算每个节点用户的流失率，来相应地提高产品性能，改善用户体验。</p><p><strong>【需要关注的指标】</strong></p><ul><li><p>日活跃用户数（日活）：一天之内，登录或使用了某个产品的用户数。比如一天内打开我微信公众号的人数。类似的还有周活跃用户数，月活跃用户数。</p></li><li><p>活跃率（活跃用户占比）：某一时间段内活跃用户在总用户量的占比。根据时间可分为日活跃率（DAU）、周活跃率（WAU）、月活跃率（MAU）等。</p></li><li><p>产品使用每个节点用户的流失率。用户流失率和留存率恰好相反。如果某产品新用户的次日留存为20%，那么反过来说明有80%的用户流失了。</p></li><li><p>如果是网页端的产品，还有两个指标来衡量网页端活跃：</p></li><li><ul><li>PV（Page View，页面浏览量）：用户每打开一个网页可以看作一个PV，用户看了十个网页，则PV为10。</li><li>UV（Unique Visitor，独立访客数）：一定时间内访问网页的人数。</li></ul></li></ul><p><strong>第三个环节是提高留存（Retention）：用户会回来吗？</strong></p><p>在第二个环节用户终于被激活唤醒了，这时候你的任务就变成了如何让用户变成回头客。留存的核心目标是让用户养成使用习惯。在这个阶段，你要明白习惯是如何形成的。</p><p><strong>【需要关注的指标】</strong></p><ul><li>次日留存率：（当天新增的用户中，在第2天使用过产品的用户数）/第一天新增总用户数</li><li>第3日留存率：（第一天新增用户中，在第3天使用过产品的用户数）/第一天新增总用户数</li><li>第7日留存率：（第一天新增的用户中，在第7天使用过产品的用户数）/第一天新增总用户数</li><li>第30日留存率：（第一天新增的用户中，在第30天使用过产品的用户数）/第一天新增总用户数</li></ul><p>Facebook有一个著名的40-20-10法则，即新用户次日留存率为40%，7日留存率为20%，30日留存率为10%，有这个表现的产品属于数据比较好的。</p><p><strong>第四个环节是增加收入（Revenue ）：如何赚到更多钱？</strong></p><p>完成了上面所有的步骤，终于来到最有挑战性的一关，那就是如何从用户身上获得真正的收益。比如让用户续订、创造更多的广告位等等。</p><p>虽然商业模式不同，变现的方式不同，但是有一个概念需要重视，那就是夹点（pinch point），它指的是损失潜在收益的地方。</p><p>对于电商企业来说，用户从挑选商品到完成购买之间是一个危险区，很多人中途会放弃购买。要评估这些常见夹点，分析用户在这些点放弃的原因。</p><p><strong>【需要关注的指标】</strong></p><p>这里我们要注意“<strong>用户</strong>”和“<strong>付费用户</strong>”的区分，这也将影响收入的计算。（下面提到的“用户”，如果没有特别说明是“付费用户”，那么就是值全部用户（包括付费用户和非付费用户））</p><ul><li>客单价：每位用户平均购买商品的金额。客单价=销售总额/顾客总数</li><li>PUR(Pay User Rate)：付费用户占比</li><li>ARPPU(Average Revenue Per Paying User)：某段时间内，付费用户的平均收入（不包括未付费的用户）。ARPPU=总收入/付费用户数</li><li>生命周期价值(LTV，Lift Time Value)：，即平均一个用户在首次登录游戏到最后一次登录游戏内，为该游戏创造的收入总计。常用于游戏行业。</li><li>复购率：一定时间内，消费两次以上的用户数 / 总购买用户数。比如有10个用户购买了产品，5个用户产生了重复购买，则重复购买率=5个重复购买用户数 / 10（总购买用户数=50%</li><li>销售额=用户数<em>转化率</em>客单价*购买频率（指消费者或用户在一定时期内购买某种或某类商品的次数。）</li></ul><p><strong>第五个环节推荐（Refer病毒式营销）： 用户会告诉其他人吗？</strong></p><p>引爆一种流行病不只有一种途径，流行病爆发需要三个条件：</p><p><strong>1）传染物本身</strong></p><p>传染物本身是说要对自己的产品有足够的了解。试着问自己一个问题：我的产品是否真正解决了用户的痛点？</p><p>如果你是写文章的，就要考虑你的文章能为用户带来哪些真正的价值。如果你是做餐饮的，你的菜品是否真的为用户所喜欢。</p><p><strong>2）传染物发挥作用所需的环境</strong></p><p>也就是你的用户在哪里？对应我们前面讲的AARRR模型第一关环节（获取用户）。要去思考使用你产品的刚需用户经常在哪些环境（社区，大学等等渠道）中出现。</p><p><strong>3）人们传播传染物的行为</strong></p><p>在对自己的产品有了深刻洞察，同时找到你的目标人群后，还要考虑到人们会因为什么目的去分享你的产品，让更多的人看到你的产品。这个条件对应的就是AARRR模型第五个环节（推荐，病毒式营销）。</p><p><strong>【需要关注的指标】</strong></p><ul><li><strong>转发率</strong>：某功能中，转发用户数 / 看到该功能的用户数。比如我的微信公众号（猴子聊人物）推送一篇文章给3万用户，转发这篇文章的用户数是3000，那么转发率=3000（转发这篇文章的用户数） / 3万（看到这篇文章的用户数）=10 %</li><li><strong>转化率</strong>：计算方法与具体业务场景有关。<ul><li>比如淘宝转化率=某段时间内产生购买行为的客户人数 / 所有到达店铺的访客人数，假如双11当天，有100个用户看到了你店铺的推广信息，被吸引进入店铺，最后有10个人购买了店铺里的东西，那么转化率=10（产生购买行为的客户人数） /100（ 所有到达店铺的访客人数）=10%</li><li>广告转化率=点击广告进入推广网站的人数 / 看到广告的人数，比如我们经常使用百度，搜索结果里会有广告，如果有100个人看到了广告，其中有10个人点击广告进入推广网站，那么转化率=10（点击广告进入推广网站的人数） / 100（看到广告的人数）=10%</li></ul></li><li><strong>K因子</strong>(K-factor)：用来衡量推荐的效果，即一个发起推荐的用户可以带来多少新用户。</li><li><ul><li>K 因子= (每个用户向他的朋友们发出的邀请的数量) * (接收到邀请的人转化为新用户的转化率)。</li><li>假设平均每个用户会向20个朋友发出邀请，而平均的转化率为10%的话，K =20*10%=2。这个结果还算是不错的效果。</li><li>当K›1时，用户群就会象滚雪球一样增大。如果K‹1的话，那么用户群到某个规模时就会停止通过自传播增长。</li></ul></li></ul><h2 id="十、杜邦分析法-财务管理方法论"><a href="#十、杜邦分析法-财务管理方法论" class="headerlink" title="十、杜邦分析法 - 财务管理方法论"></a>十、杜邦分析法 - 财务管理方法论</h2><p>将各种财务指标综合在一起来评价公司财务管理效果。即计算“用公司自己的钱赚取的利润率”/净资产收益率，拆解成三个指标相乘：</p><p>净资产收益率=销售净利率 X 总资产周转率 X 权益乘数</p><p>1）公司业务是否赚钱？</p><p>销售净利润=净利润/销售额，衡量公司业务是否赚钱。</p><p>2）公司资产运营效率如何？</p><p>总资产周转率=销售额/总资产，衡量公司资产运营效率如何。</p><p>3）公司债务负担有没有风险？</p><p>权益乘数=总资产/净资产，也叫做杠杆率，衡量公司负债经营的情况。</p><p><img src="https://pic4.zhimg.com/80/v2-d2a618a11092235b01744bf730153743_1440w.jpg" alt="img"></p><p><img src="https://pic4.zhimg.com/80/v2-fc6d7cf653395240667969627e77f0d7_1440w.jpg" alt="img"></p><h2 id="十一、基于用户生命周期的分析体系（用户画像）"><a href="#十一、基于用户生命周期的分析体系（用户画像）" class="headerlink" title="十一、基于用户生命周期的分析体系（用户画像）"></a>十一<strong>、基于用户生命周期的分析体系</strong>（用户画像）</h2><p>用户生命周期衍生于“客户生命周期”的概念。</p><p>用户从不同角度有不同的分类法：</p><p>比如从用户活跃度来看，可以分为僵尸用户、低频用户、活跃用户和深度用户</p><p>从用户对平台的价值来看，可能分法就变成了种子用户、普通用户、核心用户。</p><p>从用户价值来看，分为无效用户、潜在用户、跟进用户、成单用户。</p><p>不同的行业有不同的分类，不同的分类也有不同的运营策略。而从用户生命周期的角度来解析和管理用户，是常见的数据分析方式之一。</p><p>举例从用户活跃度来看，可能就要构建一个用户活跃度模型：</p><ul><li>流失用户：有一段时间没有再打开产品(曾经打开过产品），那么我们就视为流失用户，根据产品的属性，可以按30天，60天，90天等划分。</li><li>不活跃用户：有一段时间没有打开产品，为了和流失区分开来，需要选择无交集的时间范围。比如流失用户是60天以上没打开产品，那么不活跃则是0～60天没打开。</li><li>回流用户：有一段时间没用产品，之后突然回来再次使用，则称为回流用户。回流用户是活跃用户，且是由流失用户或不活跃用户唤回而来。</li><li>活跃用户：一段时间内打开过产品。</li><li>忠诚用户：也可以叫超级活跃用户，长期持续使用产品，比如连续四周，或者一个月内15天等</li></ul><p>用户活跃可以简化为一个最简单的公式：新增用户的数量要大于流失用户的增加量。不同业务情况需要各自衡量，怎么去构建这个模型。</p><p><img src="https://pic4.zhimg.com/80/v2-b827ff123130d09e3af9d5c6dac4e49b_1440w.jpg" alt="img"></p><h2 id="十二、SWOT"><a href="#十二、SWOT" class="headerlink" title="十二、SWOT"></a>十二、SWOT</h2><p><strong>如果外部的机会正好是你的优势，赶紧利用起来。</strong></p><p>而这个利用方法，就被称为“机会优势战略”（OS）</p><p><strong>外部的机会但是是你的劣势，你就需要改进。</strong></p><p>那么这个改进方法，就被称为“机会劣势战略”（OW）</p><p><strong>你具有优势但是外部存在威胁，那就需要时刻盯梢、保持警惕。</strong></p><p>而如何监视、监视哪些？就被称为“优势威胁战略”（ST）</p><p><strong>既是威胁又是你的劣势，请及时逃离并消除。</strong></p><p>这个消除方法，就是“威胁劣势战略”（TW）</p><hr><p>举两个简单的分析例子。</p><p><strong>个人求职案例</strong></p><p>近几年大数据/数据分析很火（O），毕业于统计学专业（S）的你可以<strong>利用自己的特长，走向风口行业，做一名数据分析师</strong>（OS）。但你发现，成为一名数据分析时并不容易，还需要懂得R语言、SQL等数据库知识，而你没有学过（W），于是你<strong>报了学习班，努力掌握数据分析技能（OW）</strong>。到了投递简历、面试的时候，你发现竞争非常激烈（T），你仔细反思了一下自己的现状：对统计学的深刻认识、精通是特长，但数据分析应用经验有些薄弱。于是，<strong>在几轮面试中，不断观察面试官反馈及时调整（ST）、扬长避短（TW）</strong>，成功收到自己满意的offer。</p><p>转化成SWOT分析模型，这个人的求职竞争力分析：</p><p><img src="https://pic4.zhimg.com/80/v2-4236165f3b5f21c4c28e566ab9add6d6_1440w.jpg?source=1940ef5c" alt="img"></p><p><strong>企业转型案例</strong></p><p>一家传统的制造业企业，面对<strong>近些年来互联网的不断冲击，眼见着竞争对手一个个都进行了信息化数字化转型，收效良好（T）</strong>，而自己虽然拥有行业领先的技术（S），和因为过硬的技术而紧密结合的一批客户、供应商，但由于过于传统的管理运作方式，效率渐渐跟不上上下游的需求（W），在进出货上有些力不从心。于是，企业决定<strong>继续开发技术优势，加深上下游的合作（OS）</strong>，同时要改进现阶段的管理模式，<strong>打探同行的信息化策略（ST）</strong>、<strong>学习他们的转型经验（WT）</strong>，自己尝试<strong>摸索适合自己的信息化模式，从而提速降本，满足上下游需求（OW）</strong>。</p><p>转化为SWOT分析模型图，为：</p><p><img src="https://pic2.zhimg.com/50/v2-94468148d36fea8ce7679f9c89315898_hd.jpg?source=1940ef5c" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/2021/09/07/git/"/>
      <url>/2021/09/07/git/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ol start="6"><li><p>版本控制系统</p><p> 中央集权型版本控制系统 —&gt; 必须有（中央）版本控制服务器</p><p> 1990s —&gt; CVS (Current Version System) / VSS (Visual Source Safe)</p><pre><code>     ---&gt; 锁定模式 ---&gt; 互斥 ---&gt; 一个文件不能被多个人同时维护</code></pre><p> 2000 —&gt; Subversion (SVN)</p><pre><code>     ---&gt; 合并模式 ---&gt; 允许多个人同时维护一个文件 ---&gt; 提交工作成果         ---&gt; 没有冲突：自动合并         ---&gt; 发生冲突：提示你手动解决</code></pre><p> 分布式版本控制系统 —&gt; 没有中央服务器存在一样可以实施版本控制</p><p> 2005 —&gt; Git —&gt; Linus</p><p> ~ Git命令</p><ol><li><p>初始化本地仓库：git init</p></li><li><p>将文件放到暂存区（缓存区）：<br> ~ git add <filename><br> ~ git add .</filename></p></li><li><p>将文件提交到仓库：git commit -m ‘…’<br> 如果是第一次使用Git进行提交，需要先配置用户名和邮箱：<br> ~ git config –global user.email ‘……’<br> ~ git config –global user.name ‘……’</p></li><li><p>查看提交日志：git log</p></li><li><p>查看版本控制状态：git status</p></li><li><p>用缓存区恢复工作区：git restore <filename></filename></p></li><li><p>用仓库恢复缓存区：git restore –staged <filename></filename></p></li><li><p>版本回退：git reset <commit-id><br> ~ –hard：让仓库、缓存区、工作区都回退到指定的版本（三者一致）<br> ~ –mixed：默认选项，让仓库、缓存区回退到指定的版本，工作区保持现状<br> ~ –soft：让仓库回退到指定的版本，缓存区和工作区保持现状</commit-id></p></li><li><p>查看过去和未来的日志：git reflog</p></li><li><p>远端仓库：<br>~ 添加：git remote add origin <url><br>~ 删除：git remote remove origin<br>~ 查看：git remote -v</url></p></li><li><p>上推（向服务器推代码）：git push -u origin master</p></li><li><p>下拉（从服务器获取代码）：git pull<br>git pull = git fetch + git merge</p></li><li><p>克隆：git clone –depth 1 <url></url></p></li><li><p>生成密钥对：ssh-keygen -t rsa -b 2048 -C “<a href="mailto:jackfrued@126.com">jackfrued@126.com</a>“</p></li><li><p>查看公钥文件：cat ~/.ssh/id_rsa.pub —&gt; 部署到服务器上<br>提示：免密访问请使用SSH地址</p></li></ol></li><li><p>代码托管平台（Git服务器）</p><p> ~ 国外：github.com<br> ~ 国内：</p><pre><code> - 码云：https://gitee.com ---&gt; 当做Git私服来使用     - coding：https://coding.net     - 行云：https://codeup.teambition.com/tour</code></pre></li></ol><p>10.远端仓库:<br>Йл/Д: git remote add origin <url><br>删除:<br>git remote remove origin<br>查看:<br>git remote -V<br>11.. 上推(向服务器推代码) : git push -u origin master<br>12. FjI (MRRSTREX1tTE) : git pull<br>    git pull = git fetch + git merge</url></p><ol start="13"><li><p>5ßk: git clone <url></url></p></li><li><p>分支操作</p><pre><code>~ 查看分支：git branch -a~ 创建分支：git branch &lt;branch-name&gt;~ 切换分支：git switch &lt;branch-name&gt; / git checkout &lt;branch-name&gt;~ 创建和切换分支：git switch -c &lt;branch-name&gt; / git checkout -b &lt;branch-name&gt;~ 合并分支：    - git switch &lt;target-branch&gt;    - git merge --no-ff &lt;branch-name&gt;~ 变基：    - git rebase &lt;target-branch&gt;    - git switch &lt;target-branch&gt;    - git merge &lt;branch-name&gt;</code></pre><p>~遇到冲突如何解决<br>1.从服务器fetch最新的代码，放到一个临时分支</p></li></ol><ul><li>git fetch origin master: temp</li></ul><p>2.查看哪里有冲突<br>git diff temp<br>3.尝试将临时分支合并到当前分支—&gt; CONFLICT<br>-<br>git merge temp<br>-合并虽然是失败的，但是有冲突的代码已经被标记了<br>取消合并: git merge –abort<br>4.解决代码冲突(找到当事人进行沟通，确定保留谁的代码)<br>5.重新提交解决冲突后的代码并上推到服务器</p><ul><li>git add <fi lename=""><br>git commit -m</fi></li><li>git push -u origin <branch-name></branch-name></li></ul><p>6.删除临时分支<br>git branch -d temp<br>7.重新发起Pull Request</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 版本控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql</title>
      <link href="/2021/08/25/mysql-bi-ji/"/>
      <url>/2021/08/25/mysql-bi-ji/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="数据库常见的概念"><a href="#数据库常见的概念" class="headerlink" title="数据库常见的概念"></a>数据库常见的概念</h2><p>DB：数据库，存储数据的容器</p><p>DBMS：数据库管理系统，又称之为数据库软件或数据库产品，用于创建或管理DB</p><p>SQl：结构化查询语言，用于和数据库通信的语言，不是某个数据库软件特有</p><h2 id="数据库存储数据的特点"><a href="#数据库存储数据的特点" class="headerlink" title="数据库存储数据的特点"></a>数据库存储数据的特点</h2><ul><li>数据存放在表中，表存放在数据库中</li><li>一个库可以有多张表，每张表有唯一的名称来标识自己</li><li>表中的列称之为<code>字段</code>，表中有1个或多个列</li><li>表中的每一行数据，称之为一条记录</li></ul><h2 id="Mysql中常用的命令"><a href="#Mysql中常用的命令" class="headerlink" title="Mysql中常用的命令"></a>Mysql中常用的命令</h2><h3 id="mysql登录命令"><a href="#mysql登录命令" class="headerlink" title="mysql登录命令"></a>mysql登录命令</h3><p><code>mysql -u username -p</code></p><h3 id="查看数据库的版本"><a href="#查看数据库的版本" class="headerlink" title="查看数据库的版本"></a>查看数据库的版本</h3><ol><li>未登录的情况<ul><li><code>mysql -version</code></li><li><code>mysql -V</code></li></ul></li><li>登录情况<ul><li><code>select version();</code></li></ul></li></ol><h3 id="显示所有数据库"><a href="#显示所有数据库" class="headerlink" title="显示所有数据库"></a>显示所有数据库</h3><p><code>show databases;</code></p><h3 id="进入指定的数据库"><a href="#进入指定的数据库" class="headerlink" title="进入指定的数据库"></a>进入指定的数据库</h3><p><code>use database_name;</code></p><h3 id="显示当前库中的所有表"><a href="#显示当前库中的所有表" class="headerlink" title="显示当前库中的所有表"></a>显示当前库中的所有表</h3><p><code>show tables;</code></p><h3 id="显示其他数据库中的所有表"><a href="#显示其他数据库中的所有表" class="headerlink" title="显示其他数据库中的所有表"></a>显示其他数据库中的所有表</h3><p><code>show tables from database_name;</code></p><h3 id="查看表的创建语句"><a href="#查看表的创建语句" class="headerlink" title="查看表的创建语句"></a>查看表的创建语句</h3><p><code>show create table table_name;</code></p><h3 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h3><p><code>desc table_name;</code></p><h3 id="查看当前所在数据库"><a href="#查看当前所在数据库" class="headerlink" title="查看当前所在数据库"></a>查看当前所在数据库</h3><p><code>select database();</code></p><h3 id="查看当前mysql支持的存储引擎"><a href="#查看当前mysql支持的存储引擎" class="headerlink" title="查看当前mysql支持的存储引擎"></a>查看当前mysql支持的存储引擎</h3><p><code>show engines;</code></p><h2 id="Mysql语法规范"><a href="#Mysql语法规范" class="headerlink" title="Mysql语法规范"></a>Mysql语法规范</h2><ol><li>不区分大小写，建议关键字大写，表名，列名小写</li><li>每条命令最好用英文分号隔开</li><li>每条命令根据需要，可以进行缩进或者换行</li><li>注释<ul><li><code>-</code>单行注释， 这里在<code>-</code>后面加上空格</li><li><code>#</code>单行注释</li><li><code>/* 这是注释内容 */</code> 多行注释</li></ul></li></ol><h2 id="SQL的语言分类"><a href="#SQL的语言分类" class="headerlink" title="SQL的语言分类"></a>SQL的语言分类</h2><ul><li>DQL（Data Query Language）：数据查询语言select相关语句</li><li>DML（Data Manipulate Language）：数据操作语言 <code>insert</code>, <code>update</code>, <code>delete</code> 语句</li><li>DDL （Data Define language）：数据定义语言 <code>create</code>,  <code>drop</code>,  <code>alter</code>语句</li><li>TCL （Transaction Control Language）：事务控制语言 <code>set autocommit=0</code>, <code>starttransation</code>, <code>savepoint</code>, <code>commit</code>, <code>rollback</code></li></ul><h2 id="建表语句"><a href="#建表语句" class="headerlink" title="建表语句"></a>建表语句</h2><pre class="line-numbers language-mysql"><code class="language-mysql">创建表create table 表名(    字段名1 类型[(宽度)] [约束条件] [comment '字段说明'],   字段名2 类型[(宽度)] [约束条件] [comment '字段说明'],   字段名3 类型[(宽度)] [约束条件] [comment '字段说明'],  [primary key (字段名)],  [foreign key (字段名) references 表名 (字段名)], )engine=innodb default charset='utf8mb4';注意:1. 在同一张表中，字段名不能相同2. 宽度和约束条件为可选参数，字段名和类型是必须的3. 最后一个字段后不能加逗号4. 类型是用来限制 字段 必须以何种数据类型来存储记录5. 类型其实也是对字段的约束(约束字段下的记录必须为XX类型)6. 类型后写的 约束条件 是在类型之外的 额外添加的约束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Mysql常见约束"><a href="#Mysql常见约束" class="headerlink" title="Mysql常见约束"></a>Mysql常见约束</h2><h3 id="not-null：标识的字段不能为空"><a href="#not-null：标识的字段不能为空" class="headerlink" title="not null：标识的字段不能为空"></a><code>not null</code>：标识的字段不能为空</h3><h3 id="primary-key：标识该字段为该表的主键，可以唯一的标识记录，插入重复的会报错"><a href="#primary-key：标识该字段为该表的主键，可以唯一的标识记录，插入重复的会报错" class="headerlink" title="primary key：标识该字段为该表的主键，可以唯一的标识记录，插入重复的会报错"></a><code>primary key</code>：标识该字段为该表的主键，可以唯一的标识记录，插入重复的会报错</h3><h3 id="foreign-key：标识的字段为外键"><a href="#foreign-key：标识的字段为外键" class="headerlink" title="foreign key：标识的字段为外键"></a><code>foreign key</code>：标识的字段为外键</h3><h3 id="unique-key：标识该字段为唯一"><a href="#unique-key：标识该字段为唯一" class="headerlink" title="unique key：标识该字段为唯一"></a><code>unique key</code>：标识该字段为唯一</h3><h3 id="default-value：为该字段设置默认值"><a href="#default-value：为该字段设置默认值" class="headerlink" title="default value：为该字段设置默认值"></a><code>default value</code>：为该字段设置默认值</h3><h3 id="auto-increment-：标识该字段的值自动增长-整数类型，而且为主键"><a href="#auto-increment-：标识该字段的值自动增长-整数类型，而且为主键" class="headerlink" title="auto_increment:：标识该字段的值自动增长(整数类型，而且为主键)"></a><code>auto_increment</code>:：标识该字段的值自动增长(整数类型，而且为主键)</h3><blockquote><p>注意：关于自动增长字段的初始值、步长可以在mysql中进行设置，比如设置初始值为1万，每次增长10。自增长列当前值存储在内存中，数据库每次重启之后，会查询当前表中自增列的最大值作为当前值，如果表数据被清空之后，数据库重启了，自增列的值将从初始值开始</p></blockquote><h2 id="DDL和DML常用操作"><a href="#DDL和DML常用操作" class="headerlink" title="DDL和DML常用操作"></a>DDL和DML常用操作</h2><pre class="line-numbers language-mysql"><code class="language-mysql">drop database if exists 旧库名; create database 新库名 default charset='utf8mb4';-- 创建表create table 表名(    字段名1 类型[(宽度)] [约束条件] [comment '字段说明'],   字段名2 类型[(宽度)] [约束条件] [comment '字段说明'],   字段名3 类型[(宽度)] [约束条件] [comment '字段说明'],  [primary key (字段名)],  [foreign key (字段名) references 表名 (字段名)], )engine=innodb default charset='utf8mb4';create table test1(a int not null comment '字段a');-- 修改表alter table 表名 add column 列名 类型 [列约束];alter table 表名 modify column 列名 新类型 [约束];或者alter table 表名 change column 列名 新列名 新类型 [约束];alter table 表名 drop column 列名;-- 插入数据insert into 表名 [(字段,字段)] values (值,值),(值,值),(值,值);insert into 表 [(字段,字段)] 数据来源select语句;-- 数据更新update 表名 [[as] 别名] set [别名.]字段 = 值,[别名.]字段 = 值 [where条件];-- 删除数据delete [别名] from 表名 [[as] 别名] [where条件];-- 删除test1表所有记录delete from test1;-- 删除test1表所有记录delete test1 from test1;-- 有别名的方式，删除test1表所有记录 delete t1 from test1 t1;-- 有别名的方式删除满足条件的记录delete t1 from test1 t1 where t1.a>100;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="select查询"><a href="#select查询" class="headerlink" title="select查询"></a>select查询</h2><pre class="line-numbers language-mysql"><code class="language-mysql">-- 基础用法select 查询的列 from 表名;select 常量值1,常量值2,常量值3;select 表达式;select 函数;select 字段1,字段2,字段3 from 表名;select 别名.字段,别名.* from 表名 [as] 别名;-- 条件查询select 列名 from 表名 where 列 运算符 值-- 模糊查询select 列名 from 表名 where 列 like pattern;-- pattern中可以包含通配符，有以下通配符: -- %:表示匹配任意一个或多个字符 -- _:表示匹配任意一个字符。-- 区间查询selec 列名 from 表名 where 列名 between 值1 and 值2;-- 存在性查询select 列名 from 表名 where 字段 in (值1,值2,值3,值4);select 列名 from 表名 where 字段 not in (值1,值2,值3,值4);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>selenium的使用</title>
      <link href="/2021/08/18/selenium-de-shi-yong/"/>
      <url>/2021/08/18/selenium-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="selenium的使用"><a href="#selenium的使用" class="headerlink" title="selenium的使用"></a>selenium的使用</h1><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><h4 id="1-创建浏览器对象并且加载页面"><a href="#1-创建浏览器对象并且加载页面" class="headerlink" title="1.创建浏览器对象并且加载页面"></a>1.创建浏览器对象并且加载页面</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverdriver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-基本配置"><a href="#2-基本配置" class="headerlink" title="2. 基本配置"></a>2. 基本配置</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token comment" spellcheck="true"># 创建设置对象</span>options <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>ChromeOptions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 解决DevToolsActivePort文件不存在的报错</span>chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--no-sandbox'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 谷歌文档提到需要加上这个属性来规避bug</span>chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--disable-gpu'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 隐藏滚动条, 应对一些特殊页面</span>chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--hide-scrollbars'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 不加载图片, 提升速度</span>chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'blink-settings=imagesEnabled=false'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置取消图片加载</span>options<span class="token punctuation">.</span>add_experimental_option<span class="token punctuation">(</span><span class="token string">"prefs"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"profile.managed_default_content_settings.images"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置取消测试环境</span>options<span class="token punctuation">.</span>add_experimental_option<span class="token punctuation">(</span><span class="token string">'excludeSwitches'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'enable-automation'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 浏览器不提供可视化页面. linux下如果系统不支持可视化不加这条会启动失败</span>chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--headless'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置代理</span>option<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--proxy-server=socks5://代理服务器:端口'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 避免终端下执行代码报错</span>chrome_options<span class="token punctuation">.</span>add_experimental_option<span class="token punctuation">(</span><span class="token string">"excludeSwitches"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'enable-automation'</span><span class="token punctuation">,</span> <span class="token string">'enable-logging'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置配置</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>options<span class="token operator">=</span>options<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># -------------------------------------------------</span><span class="token comment" spellcheck="true"># 防止selenium被监测</span><span class="token comment" spellcheck="true"># 先修改js，再加载js</span>browser<span class="token punctuation">.</span>execute_cdp_cmd<span class="token punctuation">(</span>    <span class="token string">"Page.addScriptToEvaluateOnNewDocument"</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"source"</span><span class="token punctuation">:</span> <span class="token string">"Object.defineProperty(navigator, 'webdriver', {get: () => undefined})"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-基本使用"><a href="#3-基本使用" class="headerlink" title="3. 基本使用"></a>3. 基本使用</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ui <span class="token keyword">import</span> WebDriverWaitbrower <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>     brower<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 获取标签</span>     input <span class="token operator">=</span> brower<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'kw'</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 操作标签</span>     input<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'Python'</span><span class="token punctuation">)</span>     input<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>Keys<span class="token punctuation">.</span>ENTER<span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># 等待指定标签加载成功</span>     wait <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>brower<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>     wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>presence_of_element_located<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">'wrapper'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 获取相关信息</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>brower<span class="token punctuation">.</span>current_url<span class="token punctuation">)</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>brower<span class="token punctuation">.</span>get_cookies<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>brower<span class="token punctuation">.</span>page_source<span class="token punctuation">)</span> <span class="token keyword">except</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'异常！'</span><span class="token punctuation">)</span>     brower<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-创建浏览器对象"><a href="#4-创建浏览器对象" class="headerlink" title="4. 创建浏览器对象"></a>4. 创建浏览器对象</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrower <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>brower <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Firefox<span class="token punctuation">(</span><span class="token punctuation">)</span>brower <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Edge<span class="token punctuation">(</span><span class="token punctuation">)</span>brower <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>PhantomJS<span class="token punctuation">(</span><span class="token punctuation">)</span>brower <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Safari<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-访问网页"><a href="#5-访问网页" class="headerlink" title="5. 访问网页"></a>5. 访问网页</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrower <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>brower<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.taobao.com'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>brower<span class="token punctuation">.</span>page_source<span class="token punctuation">)</span>brower<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-查找单个元素"><a href="#6-查找单个元素" class="headerlink" title="6. 查找单个元素"></a>6. 查找单个元素</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.taobao.com'</span><span class="token punctuation">)</span>input_frist <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span>input_second <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_css_selector<span class="token punctuation">(</span><span class="token string">'#q'</span><span class="token punctuation">)</span>input_third <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="q"]'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>input_frist<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>input_second<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>input_third<span class="token punctuation">)</span>browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-查找多个元素"><a href="#7-查找多个元素" class="headerlink" title="7.查找多个元素"></a>7.查找多个元素</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.taobao.com'</span><span class="token punctuation">)</span>lis <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_elements_by_css_selector<span class="token punctuation">(</span><span class="token string">'.service-bd li'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span>browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-元素交互动作-对获取的元素调用交互方法"><a href="#8-元素交互动作-对获取的元素调用交互方法" class="headerlink" title="8. 元素交互动作 - 对获取的元素调用交互方法"></a>8. 元素交互动作 - 对获取的元素调用交互方法</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">import</span> timebrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.taobao.com'</span><span class="token punctuation">)</span>input <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span>input<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'iPhone'</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 清除搜索的内容</span>input<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>input<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'iPad'</span><span class="token punctuation">)</span>button <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">'btn-search'</span><span class="token punctuation">)</span>button<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-交互动作-将动作添加到动作链中串行执行"><a href="#9-交互动作-将动作添加到动作链中串行执行" class="headerlink" title="9. 交互动作 - 将动作添加到动作链中串行执行"></a>9. 交互动作 - 将动作添加到动作链中串行执行</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ActionChainsbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>url <span class="token operator">=</span> <span class="token string">'http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable'</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>browser<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>frame<span class="token punctuation">(</span><span class="token string">'iframeResult'</span><span class="token punctuation">)</span>source <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_css_selector<span class="token punctuation">(</span><span class="token string">'#draggable'</span><span class="token punctuation">)</span>target <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_css_selector<span class="token punctuation">(</span><span class="token string">'#droppable'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建动作连对象</span>actions <span class="token operator">=</span> ActionChains<span class="token punctuation">(</span>browser<span class="token punctuation">)</span>actions<span class="token punctuation">.</span>drag_and_drop<span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">)</span>actions<span class="token punctuation">.</span>perform<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 开始执行动作链的动作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-执行JavaScript"><a href="#10-执行JavaScript" class="headerlink" title="10. 执行JavaScript"></a>10. 执行JavaScript</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.zhihu.com/explore'</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'window.scrollTo(0, document.body.scrollHeight)'</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'alert("To Bottom")'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="11-获取元素信息"><a href="#11-获取元素信息" class="headerlink" title="11. 获取元素信息"></a>11. 获取元素信息</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取属性</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ActionChainsbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>url <span class="token operator">=</span> <span class="token string">'https://www.zhihu.com/explore'</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>logo <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'special'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>logo<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取指定属性的值</span><span class="token keyword">print</span><span class="token punctuation">(</span>logo<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取文本值</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>url <span class="token operator">=</span> <span class="token string">'https://www.zhihu.com/explore'</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>button <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">'Button--blue'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>button<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取ID、位置、标签名、大小</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>url <span class="token operator">=</span> <span class="token string">'https://www.zhihu.com/explore'</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>input <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">'Button--blue'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取ID</span><span class="token keyword">print</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取位置</span><span class="token keyword">print</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>location<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 标签名</span><span class="token keyword">print</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>tag_name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 大小</span><span class="token keyword">print</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="12-等待"><a href="#12-等待" class="headerlink" title="12. 等待"></a>12. 等待</h4><pre><code>隐式等待当使用了隐式等待执行测试的时候，如果webDriver没有在DOM中找到元素，将继续等待，超出设定时间后则抛出找不到元素的异常，换句话说，当查找元素或元素并没有立即出现的时候,隐式等待将等待一段时间再查找DOM，默认的时间是0</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>implicitly_wait<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 等待10秒钟</span>url <span class="token operator">=</span> <span class="token string">'https://www.zhihu.com/explore'</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>input <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">'zu-top-add-question'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>显示等待等到满足某个条件成立</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ui <span class="token keyword">import</span> WebDriverWait<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions <span class="token keyword">as</span> ECbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.taobao.com/'</span><span class="token punctuation">)</span>wait <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>browser<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 等待指定元素加载成功</span>input <span class="token operator">=</span> wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>presence_of_element_located<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">'q'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>button <span class="token operator">=</span> wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>element_to_be_clickable<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>CSS_SELECTOR<span class="token punctuation">,</span> <span class="token string">'.btn-search'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> button<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-前进后退"><a href="#10-前进后退" class="headerlink" title="10. 前进后退"></a>10. 前进后退</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com/'</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.taobao.com/'</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.jd.com/'</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>back<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="11-Cookies"><a href="#11-Cookies" class="headerlink" title="11. Cookies"></a>11. Cookies</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://maoyan.com/board/4?offset=0'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取cookie</span><span class="token keyword">print</span><span class="token punctuation">(</span>browser<span class="token punctuation">.</span>get_cookies<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置cookie</span>browser<span class="token punctuation">.</span>add_cookie<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token string">'domain'</span><span class="token punctuation">:</span> <span class="token string">'www.zhihu,com'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">:</span> <span class="token string">'germey'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>browser<span class="token punctuation">.</span>get_cookies<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>delete_all_cookies<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>browser<span class="token punctuation">.</span>get_cookies<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="12-选项卡"><a href="#12-选项卡" class="headerlink" title="12. 选项卡"></a>12. 选项卡</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">import</span> timebrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打开新的标签页</span>browser<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'window.open()'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>browser<span class="token punctuation">.</span>window_handles<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># browser.switch_to_window(browser.window_handles[1])</span><span class="token comment" spellcheck="true"># 切换标签页</span>browser<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>window<span class="token punctuation">(</span>browser<span class="token punctuation">.</span>window_handles<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.taobao.com'</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># browser.switch_to_window(browser.window_handles[0])</span>browser<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>window<span class="token punctuation">(</span>browser<span class="token punctuation">.</span>window_handles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="13-关闭"><a href="#13-关闭" class="headerlink" title="13.关闭"></a>13.关闭</h4><pre class="line-numbers language-python"><code class="language-python">browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""close方法是关闭当前的窗口，如果是打开了多个窗口，那么close关闭的是driver操作的当前窗口，如果当前浏览器只打开一个窗口，那么close方法相当于关闭浏览器了；quit方法则是完全关闭所有窗口，退出浏览器。那么问题来了，我们退出浏览器应该采用那个方法呢？当我们用webdriver打开浏览器时，会在系统盘产生临时文件，如果使用close方法关闭浏览器，并不会主动清除系统盘的临时文件，反之使用quit方法完全退出浏览器会自动清除临时文件，减少对系统盘空间的占用。所以，当你浏览器打开多窗口时，只想关闭当前窗口，就用close方法，但是退出浏览器最好使用quit方法。"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="14-控制浏览器窗口的大小和浏览器最大化"><a href="#14-控制浏览器窗口的大小和浏览器最大化" class="headerlink" title="14.控制浏览器窗口的大小和浏览器最大化"></a>14.控制浏览器窗口的大小和浏览器最大化</h4><pre class="line-numbers language-python"><code class="language-python">控制浏览器大小WebDriver 提供了 set_windows_size<span class="token punctuation">(</span><span class="token punctuation">)</span> 方法来设置浏览器的大小driver<span class="token punctuation">.</span>set_window_size<span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 设置浏览器大小</span>浏览器最大化driver<span class="token punctuation">.</span>maximize_window<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="15-滚动"><a href="#15-滚动" class="headerlink" title="15.滚动"></a>15.滚动</h4><pre class="line-numbers language-python"><code class="language-python">selenium使用execute_script方法执行JavaScript操作scrollTo<span class="token punctuation">(</span><span class="token punctuation">)</span> 方法可把内容滚动到指定的坐标。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> spider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象编程</title>
      <link href="/2021/08/08/mian-xiang-dui-xiang/"/>
      <url>/2021/08/08/mian-xiang-dui-xiang/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="编程类型"><a href="#编程类型" class="headerlink" title="编程类型"></a>编程类型</h2><p>指令式编程 —&gt; 面向过程(函数)编程 —&gt; 程序比较简单的时候没有任何问题</p><p>范式编程(程序设计的方法论)：面向对象编程 / 函数式编程</p><h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><p>对象：对象是可以接收消息的实体，面向对象编程就是通过狗日对象发消息达到解决问题的目标。</p><p>对象 = 数据 + 方法  —&gt; 对象将数据和操作数据的函数从逻辑上变成了一个整体。</p><ul><li>一切皆为对象</li><li>对象都有属性和行为</li><li>每个对象都是独一无二的</li><li>对象一定属于某个类</li></ul><p>类：将共同特征（静态特征和动态特征）的对象的共同特征抽取出来之后的得到的一个抽象概念。简单的说，类是对象的蓝图（模板），有了类才能创建出这种类型的对象。</p><h2 id="面向对象编程三步走："><a href="#面向对象编程三步走：" class="headerlink" title="面向对象编程三步走："></a>面向对象编程三步走：</h2><ol><li>定义类<ul><li>数据抽象：找到和对象相关的静态特征（属性）—&gt; 找名词</li><li>行为抽象：找到和对象相关的动态特征（方法）—&gt; 找动词</li></ul></li><li>造对象</li><li>向对象发消息</li></ol><blockquote><p>注意：</p><p>类的命名使用驼峰命名法，即每个单词首字母大写</p></blockquote><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>我们在类里面写的函数，通常称之为方法，它们基本上都是发给对象的消息。<br>但是有的时候，我们的消息并不想发给对象，而是希望发给这个类（类本身也是一个对象），<br>这个时候，我们可以使用静态方法或类方法。</p><p>静态方法 - 发给类的消息 —&gt; <code>@staticmethod</code> —&gt; 装饰器<br>类方法 - 发给类的消息 —&gt; <code>@classmethod</code> —&gt; 装饰器 —&gt; 第一个参数（cls）是接收消息的类</p><h1 id="魔法方法"><a href="#魔法方法" class="headerlink" title="魔法方法"></a>魔法方法</h1><p>魔术方法（魔法方法）—&gt; 有特殊用途和意义的方法</p><ul><li><code>__init__</code> —&gt; 初始化方法，在调用构造器语法创建对象的时候会被自动调</li><li> <code>__str__</code> —&gt; 获得对象的字符串表示，在调用print函数输出对象时会被自动调用</li><li><code>__repr__</code> —&gt; 获得对象的字符串表示，把对象放到容器中调用print输出时会自动调用—&gt; representation</li><li><code>__lt__</code> —&gt; 在使用 &lt; 运算符比较两个对象大小时会自动调用</li><li><code>__slots__</code> —&gt; 如果要限制一个类的对象只能拥有某些属性，可以在类中使用__slots__魔法属性</li></ul><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承：对已有的类进行扩展创建出新的类，这个过程就叫继承。<br>提供继承信息的类叫做父类（超类、基类），得到继承信息的类称为子类（派生类）。</p><p>继承是实现代码复用的一种手段，但是千万不要滥用继承。</p><p>继承是一种is-a关系。<br>a student is a person.<br>a teacher is a person.<br>a programmer is a person.</p><p>子类直接从父类继承公共的属性和行为，再添加自己特有的属性和行为，<br>所以子类一定是比父类更强大的，任何时候都可以用子类对象去替代父类对象。</p><p>Python中的继承允许多重继承，一个类可以有一个或多个父类。<br>如果不是必须使用多重继承的场景下，请尽量使用单一继承。</p><h2 id="两个类之间可能的关系"><a href="#两个类之间可能的关系" class="headerlink" title="两个类之间可能的关系"></a>两个类之间可能的关系</h2><ul><li>is-a关系：继承 —&gt; 从一个类派生出另一个类<pre><code>a student is a person.a teacher is a person.</code></pre></li><li>has-a关系：关联 —&gt; 把一个类的对象作为另外一个类的对象的属性<pre><code>a person has an identity card.a car has an engine.</code></pre><ul><li>（普通）关联 </li><li>强关联：整体和部分的关联，聚合和合成</li></ul></li><li>use-a关系：依赖 —&gt; 一个类的对象作为另外一个类的方法的参数或返回值<pre><code>a person use a vehicle.</code></pre></li></ul><h2 id="面向对象编程的四大支柱"><a href="#面向对象编程的四大支柱" class="headerlink" title="面向对象编程的四大支柱"></a>面向对象编程的四大支柱</h2><p>面向对象编程的四大支柱：</p><ul><li>抽象（abstraction）：提取共性（定义类就是一个抽象过程，需要做数据抽象和行为抽象）。</li><li> 封装（encapsulation）：把数据和操作数据的函数从逻辑上组装成一个整体（对象）。隐藏实现细节，暴露简单的调用接口。</li><li> 继承（inheritance）：扩展已有的类创建新类，实现对已有类的代码复用</li><li> 多态（polymorphism）：给不同的对象发出同样的消息，不同的对象执行了不同的行为。 方法重写（override）：子类对父类已有的方法，重新给出自己的实现版本。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>枚举</title>
      <link href="/2021/08/06/mei-ju/"/>
      <url>/2021/08/06/mei-ju/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="枚举的定义："><a href="#枚举的定义：" class="headerlink" title="枚举的定义："></a>枚举的定义：</h2><p>枚举是与多个唯一常量值绑定的一组符号名(即成员)。枚举中的成员可以进行身份比较，并且枚举也属于可迭代类型。</p><blockquote><p>注意：</p><p>枚举表示常量，因此建议枚举成员名称使用大写字母</p></blockquote><h2 id="创建Enum"><a href="#创建Enum" class="headerlink" title="创建Enum"></a>创建Enum</h2><p>枚举有<code>class</code>来创建的，当然还有其他创建方法，在此笔者就不赘述。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> enum <span class="token keyword">import</span> Enum<span class="token keyword">class</span> <span class="token class-name">Colors</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>  PINK <span class="token operator">=</span> <span class="token string">'#FFC0CB'</span>  PURPLE <span class="token operator">=</span> <span class="token string">'#800080'</span>  BLACK <span class="token operator">=</span> <span class="token string">'#000000'</span><span class="token comment" spellcheck="true"># 枚举成员的字符串表现形式</span><span class="token keyword">print</span><span class="token punctuation">(</span>Colors<span class="token punctuation">.</span>PINK<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Color.PINK</span><span class="token comment" spellcheck="true"># 枚举成员的 类型 就是它所属于的枚举</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>Colors<span class="token punctuation">.</span>PINK<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;enum 'Colors'></span><span class="token comment" spellcheck="true"># Enum 成员包含 name 属性</span><span class="token keyword">print</span><span class="token punctuation">(</span>Colors<span class="token punctuation">.</span>PINK<span class="token punctuation">,</span>name<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># PINK</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注解：</p><p>Enum 成员值</p><p>成员值可以使<code>int</code>,<code>str</code>等。若无需设定确切值，<code>auto</code>实例会自动为成员分配合适的值。</p><p>命名法</p><ul><li>类Color 是枚举(enum)</li><li>Color.PINK，Color.PURPLE, Color.BLACK  等属性是 枚举成员(enum成员)，也是常量</li><li>枚举成员具有 名称和值（Color.PINK 的名称是 PINK，值是 #FFC0CB）</li></ul><p>虽然Enum<code>class</code>语法创建，但是Enum并不是常规的Python类。</p></blockquote><h2 id="枚举的遍历"><a href="#枚举的遍历" class="headerlink" title="枚举的遍历"></a>枚举的遍历</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> enum <span class="token keyword">import</span> Enum<span class="token keyword">class</span> <span class="token class-name">Colors</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>    PINK <span class="token operator">=</span> <span class="token string">'#FFC0CB'</span>    PURPLE <span class="token operator">=</span> <span class="token string">'#800080'</span>    BLACK <span class="token operator">=</span> <span class="token string">'#000000'</span>    <span class="token keyword">for</span> color <span class="token keyword">in</span> Colors<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Colors.PINK</span><span class="token comment" spellcheck="true"># Colors.PURPLE</span><span class="token comment" spellcheck="true"># Color.BLACK</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><p>枚举成员可哈希，可用于字典和集合</p></blockquote><h2 id="枚举成员及其属性的访问"><a href="#枚举成员及其属性的访问" class="headerlink" title="枚举成员及其属性的访问"></a>枚举成员及其属性的访问</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 使用name访问枚举成员</span><span class="token keyword">print</span><span class="token punctuation">(</span>Color<span class="token punctuation">[</span><span class="token string">'PINK'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Color.PINK</span><span class="token comment" spellcheck="true"># 可访问枚举成员的name,value</span><span class="token keyword">print</span><span class="token punctuation">(</span>Color<span class="token punctuation">[</span><span class="token string">'PINK'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># PINK</span><span class="token keyword">print</span><span class="token punctuation">(</span>Color<span class="token punctuation">[</span><span class="token string">'PINK'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># #FFC0CB</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="重复的枚举成员和值"><a href="#重复的枚举成员和值" class="headerlink" title="重复的枚举成员和值"></a>重复的枚举成员和值</h2><p>两个枚举成员的名称不能相同</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span>  <span class="token class-name">Color</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>    PINK <span class="token operator">=</span> <span class="token string">'#FFC0CB'</span>    PINK <span class="token operator">=</span> <span class="token string">'#DFC8BB'</span>    <span class="token triple-quoted-string string">"""Traceback (most recent call last):...TypeError: Attempted to reuse key: 'PINK'"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两个枚举成员的值可以相同。如果先定义成员A再定义成员B且它们的值相同，则B是A的别名。按值查找A和B的值返回的是A。按名称查找B，返回的也是A：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span>  <span class="token class-name">Color</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>    PINK <span class="token operator">=</span> <span class="token string">'#FFC0CB'</span>    RED <span class="token operator">=</span> <span class="token string">'#FFC0CB'</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>PINK<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Color.PINK</span><span class="token keyword">print</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>RED<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Color.PINK</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再谈字符串</title>
      <link href="/2021/08/01/zi-fu-chuan/"/>
      <url>/2021/08/01/zi-fu-chuan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="再谈字符串"><a href="#再谈字符串" class="headerlink" title="再谈字符串"></a>再谈字符串</h3><p><strong>字符串</strong>，即把<strong>字符按照一定的顺序串起来组成一个有限的序列</strong>。</p><p>Python中，我们使用<code>''</code>或者<code>""</code>包围起来，就可以表示一个字符串。字符串中的字符可以使特殊字符，英文字符，中文字符，希腊字母，Emoji字符等</p><pre class="line-numbers language-python"><code class="language-python">character_name <span class="token operator">=</span> <span class="token string">'DongxiLi'</span>character_name2 <span class="token operator">=</span> <span class="token string">'李东西'</span><span class="token comment" spellcheck="true"># 使用三引号可以对字符串进行折行，而折行的样式就是输出的样式</span>character_name <span class="token operator">=</span> <span class="token triple-quoted-string string">'''DongxiLi'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="转义字符和原始字符串"><a href="#转义字符和原始字符串" class="headerlink" title="转义字符和原始字符串"></a>转义字符和原始字符串</h3><p>可以在字符串中使用<code>\</code>（反斜杠）来表示转义，也就是说<code>\</code>后面的字符不再是它原来的意义，例如：<code>\n</code>不是代表反斜杠和字符<code>n</code>，而是表示换行；<code>\t</code>也不是代表反斜杠和字符<code>t</code>，而是表示制表符。所以如果字符串本身又包含了<code>'</code>、<code>"</code>、<code>\</code>这些特殊的字符，必须要通过<code>\</code>进行转义处理。例如要输出一个带单引号或反斜杠的字符串，需要用如下所示的方法。</p><pre class="line-numbers language-pyth"><code class="language-pyth">s = '\'hello, world'print(s)s2 = '\\hello, world\\'print(s2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Python字符串中可以用<code>r</code>或者<code>R</code>开头，这种字符串被称之为原始字符串，即字符串中的每一个字符都是它本来的含义，不存在转义。例如，在字符串<code>'hello\n'</code>中，<code>\n</code>表示换行；而在<code>r'hello\n'</code>中，<code>\n</code>不再表示换行，就是反斜杠和字符<code>n</code>。大家可以运行下面的代码，看看会输出什么。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 字符串s中的\t是制表符,\n是换行符</span>s <span class="token operator">=</span> <span class="token string">'\time up \now'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 字符串s2中没有转义字符,每个字符都是原始含义</span>s2 <span class="token operator">=</span> r<span class="token string">'\time up \now'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串的运算"><a href="#字符串的运算" class="headerlink" title="字符串的运算"></a>字符串的运算</h3><h4 id="字符串的拼接和重复"><a href="#字符串的拼接和重复" class="headerlink" title="字符串的拼接和重复"></a>字符串的拼接和重复</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 字符串的拼接和重复</span>s <span class="token operator">=</span> <span class="token string">'李'</span> <span class="token operator">+</span> <span class="token string">'东西'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 李东西</span>s2 <span class="token operator">=</span> <span class="token string">'呵呵'</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 呵呵呵呵呵呵</span>s <span class="token operator">+=</span> s2  <span class="token comment" spellcheck="true"># s = s + s2</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 李东西呵呵呵呵呵呵</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><p>字符串在计算机内存中也是以二进制形式存在的，那么字符串的大小比较比的是每个字符对应的编码的大小。例如<code>A</code>的编码是<code>65</code>， 而<code>a</code>的编码是<code>97</code>，所以<code>'A' &lt; 'a'</code>的结果相当于就是<code>65 &lt; 97</code>的结果，很显然是<code>True</code>；而<code>'boy' &lt; 'bad'</code>，因为第一个字符都是<code>'b'</code>比不出大小，所以实际比较的是第二个字符的大小，显然<code>'o' &lt; 'a'</code>的结果是<code>False</code>，所以<code>'boy' &lt; 'bad'</code>的结果也是<code>False</code>。如果不清楚两个字符对应的编码到底是多少，可以使用<code>ord</code>函数来获得，例如<code>ord('A')</code>的值是<code>65</code></p><pre class="line-numbers language-python"><code class="language-python">s1 <span class="token operator">=</span> <span class="token string">'a whole new world'</span>s2 <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">,</span> s1 <span class="token operator">&lt;</span> s2<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># False True</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2 <span class="token operator">==</span> <span class="token string">'hello world'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2 <span class="token operator">==</span> <span class="token string">'Hello world'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2 <span class="token operator">!=</span> <span class="token string">'Hello world'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><p>字符串比较运算符比较的事字符串的内容</p></blockquote><h4 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h4><p><code>is</code>运算符(身份运算符)， 如果用<code>is</code>来比较两个字符串，它比价的是两个变量对应的字符串是否在内存中相同的位置(内存地址)。</p><pre class="line-numbers language-python"><code class="language-python">s1 <span class="token operator">=</span> <span class="token string">'hello world'</span>s2 <span class="token operator">=</span> <span class="token string">'hello world'</span>s3 <span class="token operator">=</span> s2<span class="token comment" spellcheck="true"># 比较字符串的内容</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">,</span> s2 <span class="token operator">==</span> s3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True True</span><span class="token comment" spellcheck="true"># 比较字符串的内存地址</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1 <span class="token keyword">is</span> s2<span class="token punctuation">,</span> s2 <span class="token keyword">is</span> s3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False True</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 140422212438512 140422213227888 140422213227888</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>提示：</p><p>Python中可以用<code>id</code>来查看变量的内存地址</p></blockquote><h4 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h4><p>Python中可以用<code>in</code>和<code>not in</code>判断一个字符串是否存在内外一个字符或者字符串，<code>in</code>和<code>not in</code>运损通常称之为成员运算，会产生布尔值<code>True</code>或者<code>False</code></p><pre class="line-numbers language-python"><code class="language-python">s1 <span class="token operator">=</span> <span class="token string">'helo world'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'wo'</span> <span class="token keyword">in</span> s1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span>s2 <span class="token operator">=</span> <span class="token string">'googbye'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2 <span class="token keyword">in</span> s1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取字符串的长度"><a href="#获取字符串的长度" class="headerlink" title="获取字符串的长度"></a>获取字符串的长度</h4><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'DongxiLi'</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="索引和切片"><a href="#索引和切片" class="headerlink" title="索引和切片"></a>索引和切片</h4><p>通过索引可以从字符串中取出某个字符，运算符是<code>[n]</code> 这里的<code>0 &lt;= n &lt; N</code>，这里的<code>N</code>指的是字符串的长度；当然这里的<code>n</code>也可以<code>-N &lt;= n &lt;0</code>，当<code>n</code>负数是通常称之为负向索引</p><p><strong>字符串是不可变类型</strong>， 所以<strong>不能通过索引修改字符串中的字符</strong></p><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'abc123456'</span>N <span class="token operator">=</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取第一个字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token operator">-</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># a a</span><span class="token comment" spellcheck="true"># 获取最后一个字符</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>N<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 6 6</span><span class="token comment" spellcheck="true"># 获取字符c</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># c c</span><span class="token comment" spellcheck="true"># 获取字符3</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><p>进行索引操作时一定要注意索引的范围，不然会发生索引越界，引发<code>IndexError</code>异常，错误提示信息为：<code>string index out of range</code>（字符串索引超出范围</p></blockquote><p>如果要字符串中取出多个字符，则可以通过切片，运算符是<code>[i:j:k]</code>其中<code>i</code>是开始索引，<code>j</code>是结束索引(取不到j),<code>k</code>是步长，默认步长为1，表示从前向后获取相邻字符的连续切片，所以<code>:k</code>部分可以省略。    </p><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'abc123456'</span><span class="token comment" spellcheck="true"># i=2, j=5, k=1 的正向切片</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># c12</span><span class="token comment" spellcheck="true"># i=-7, j=-4, k=1 的正向切片</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># c12</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># c123456</span><span class="token comment" spellcheck="true"># i=-7, j=9, k=1的正向切片操作</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># c123456</span><span class="token comment" spellcheck="true"># i=2, j=9, k=2的正向切片操作</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># c246</span><span class="token comment" spellcheck="true"># i=-7, j=9, k=2的正向切片操作</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># c246</span><span class="token comment" spellcheck="true"># i=7, j=1, k=-1的负向切片操作</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 54321c</span><span class="token comment" spellcheck="true"># i=-2, j=-8, k=-1的负向切片操作</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 54321c</span><span class="token comment" spellcheck="true"># i=7, j=-10, k=-1的负向切片操作</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 54321cba</span><span class="token comment" spellcheck="true"># i=-1, j=1, k=-1的负向切片操作</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 654321c</span><span class="token comment" spellcheck="true"># i=-1, j=-10, k=-1的负向切片</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 654321cba</span><span class="token comment" spellcheck="true"># i=-1, j=-10, k=-2的负向切片</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 642ca</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="遍历字符串"><a href="#遍历字符串" class="headerlink" title="遍历字符串"></a>遍历字符串</h4><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'DongxiLi'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> ch <span class="token keyword">in</span> name<span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串的方法"><a href="#字符串的方法" class="headerlink" title="字符串的方法"></a>字符串的方法</h3><p>Python中，我们可以通过字符串类型自带的方法对字符串进行操作和处理，对于一个字符串类型的变量，我们可以用<code>变量名.方法名()</code>的方式来调用它的方法。</p><h4 id="大小写相关操作"><a href="#大小写相关操作" class="headerlink" title="大小写相关操作"></a>大小写相关操作</h4><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'dong xi li'</span><span class="token comment" spellcheck="true"># 使用capitalize方法获得字符串首字母大写后的字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Dong xi li</span><span class="token comment" spellcheck="true"># 使用title方法获得字符串每个单词首字母大写后的字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#Dong Xi Li</span><span class="token comment" spellcheck="true"># 使用upper方法获得字符串大写后的字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># DONG XI LI</span>name2 <span class="token operator">=</span> ’DONG XI LI‘<span class="token comment" spellcheck="true"># 使用lower方法获得字符串小写后的字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>lower<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 'dong xi li'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查找操作"><a href="#查找操作" class="headerlink" title="查找操作"></a>查找操作</h4><p>如果想在一个字符串中从前往后查找有没有另外一个字符串，可以使用<code>find</code>或者<code>index</code>方法</p><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'hello, world!'</span><span class="token comment" spellcheck="true"># find方法从字符串中查找另外一个字符串的所在位置</span><span class="token comment" spellcheck="true"># 找到了就放回字符串中另一个字符串字符的索引</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'or'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 8</span><span class="token comment" spellcheck="true"># 找不到返回-1</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'DongxiLi'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># -1</span><span class="token comment" spellcheck="true"># index方法与find方法类似</span><span class="token comment" spellcheck="true"># 找到了返回字符串中另一个字符串首字符的索引</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>inex<span class="token punctuation">(</span><span class="token string">'or'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 找不到引发异常</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'DongxiLi'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ValueError:substring not found</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在使用<code>find</code>和<code>index</code>方法时还可以通过方法的参数来指定查找的范围，即可以指定开始的索引。<code>find</code>和<code>index</code>方法还有逆向查找的版本。分别是<code>rdind</code>和<code>index</code>。</p><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token comment" spellcheck="true"># 从前向后查找o出现的位置(相当于第一出现)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 4</span><span class="token comment" spellcheck="true"># 从索引为5的位置开始查找o出现的位置</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 7</span><span class="token comment" spellcheck="true"># 从后向前查找字符o出现的位置(相当于最后一次出现)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以通过字符串的<code>startswith</code>，<code>endswith</code>来判断字符串是否以某个字符开头或者结尾；也可以用<code>is</code>开头的方法来判断字符串的特征。</p><pre class="line-numbers language-python"><code class="language-python">s1 <span class="token operator">=</span> <span class="token string">'hello, world'</span><span class="token comment" spellcheck="true"># startwith方法检查字符串是否以指定字符串开头，返回bool</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'H'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'he'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span><span class="token comment" spellcheck="true"># endswith方法检查字符串是否以指定字符串结尾，返回bool</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span>s2 <span class="token operator">=</span> <span class="token string">'abc123'</span><span class="token comment" spellcheck="true"># isdigit方法检查字符串是否有数字构成，返回bool</span><span class="token keyword">print</span><span class="token punctuation">(</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span><span class="token comment" spellcheck="true"># isalpha方法检查字符串是否由字母构成，返回bool</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span><span class="token comment" spellcheck="true"># isalnum方法检查字符串是否以数字和字母构成，返回bool</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h4><p>Python中字符串类型可以通过<code>center</code>,<code>ljust</code>,<code>rjust</code>方法做居中，左对齐和右对齐的处理。</p><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'hello, world'</span><span class="token comment" spellcheck="true"># center方法以宽度20将字符串居中并在两侧填充*</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ****hello world*****</span><span class="token comment" spellcheck="true"># rjust方法以宽度为20将字符串右对齐并在左侧填充-  </span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ---------hello world</span><span class="token comment" spellcheck="true"># ljust方法以宽度为20将字符串左对齐并在右侧填充^  </span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'^'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># hello world^^^^^^^^^         </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果需要进一步控制格式化语法中变量值的形式，可以参照下面的表格来进行字符串格式化操作。</p><table><thead><tr><th>变量值</th><th>占位符</th><th>格式化结果</th><th>说明</th></tr></thead><tbody><tr><td><code>3.1415926</code></td><td><code>{:.2f}</code></td><td><code>'3.14'</code></td><td>保留小数点后两位</td></tr><tr><td><code>3.1415926</code></td><td><code>{:+.2f}</code></td><td><code>'+3.14'</code></td><td>带符号保留小数点后两位</td></tr><tr><td><code>-1</code></td><td><code>{:+.2f}</code></td><td><code>'-1.00'</code></td><td>带符号保留小数点后两位</td></tr><tr><td><code>3.1415926</code></td><td><code>{:.0f}</code></td><td><code>'3'</code></td><td>不带小数</td></tr><tr><td><code>123</code></td><td><code>{:0&gt;10d}</code></td><td><code>0000000123</code></td><td>左边补<code>0</code>，补够10位</td></tr><tr><td><code>123</code></td><td><code>{:x&lt;10d}</code></td><td><code>123xxxxxxx</code></td><td>右边补<code>x</code> ，补够10位</td></tr><tr><td><code>123</code></td><td><code>{:&gt;10d}</code></td><td><code>'       123'</code></td><td>左边补空格，补够10位</td></tr><tr><td><code>123</code></td><td><code>{:&lt;10d}</code></td><td><code>'123       '</code></td><td>右边补空格，补够10位</td></tr><tr><td><code>123456789</code></td><td><code>{:,}</code></td><td><code>'123,456,789'</code></td><td>逗号分隔格式</td></tr><tr><td><code>0.123</code></td><td><code>{:.2%}</code></td><td><code>'12.30%'</code></td><td>百分比格式</td></tr><tr><td><code>123456789</code></td><td><code>{:.2e}</code></td><td><code>'1.23e+08'</code></td><td>科学计数法格式</td></tr></tbody></table><h4 id="修剪操作"><a href="#修剪操作" class="headerlink" title="修剪操作"></a>修剪操作</h4><p>字符串的<code>strip</code>方法可以帮助我们将原字符串修剪掉左右两端的空格之后的字符串。这个方法非常有实用价值，通常用来将用户输入中因为不小心键入的头尾空格去掉，<code>strip</code>方法还有<code>lstrip</code>和<code>rstrip</code>两个版本。</p><pre class="line-numbers language-python"><code class="language-python">​```Pythons <span class="token operator">=</span> <span class="token string">'   jackfrued@126.com  \t\r\n'</span><span class="token comment" spellcheck="true"># strip方法获得字符串修剪左右两侧空格之后的字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># jackfrued@126.com</span>​```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>元组</title>
      <link href="/2021/08/01/chang-yong-shu-ju-jie-gou-zhi-yuan-zu/"/>
      <url>/2021/08/01/chang-yong-shu-ju-jie-gou-zhi-yuan-zu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="元组的定义和使用"><a href="#元组的定义和使用" class="headerlink" title="元组的定义和使用"></a>元组的定义和使用</h3><p>Python中元组是把多个元素按照一定的顺序构成的序列。元组不同于列表的是，元组是不可变类型。而不可变类型就说明，元组一旦被定义，元组里面的元素就不能被修改。定义元组可以使用<strong>字面量</strong>语法<code>()</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个三元组</span>character_names <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'徐晓'</span>， <span class="token string">'陈芝报'</span><span class="token punctuation">,</span> <span class="token string">'褚禄山'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义一个四元组</span>info <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'徐晓'</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">'北凉'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 元组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>列表</title>
      <link href="/2021/07/31/chang-yong-shu-ju-jie-gou-zhi-lie-biao/"/>
      <url>/2021/07/31/chang-yong-shu-ju-jie-gou-zhi-lie-biao/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="列表的定义和使用"><a href="#列表的定义和使用" class="headerlink" title="列表的定义和使用"></a>列表的定义和使用</h3><p>Python中，<strong>列表是由一系列元素按特定顺序构成的数据序列</strong>。列表可以<strong>可以保存多个数据</strong>，并且这些数据可以<strong>重复</strong>，以及合一存储多种数据类型(但是一般不建议这么做)。</p><ol><li>通过字面量<code>[]</code>语法来定义列表，列表中的元素使用英文状态下的逗号(,)进行分隔<pre class="line-numbers language-python"><code class="language-python">nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'徐凤年'</span>， <span class="token string">'姜似'</span>， <span class="token string">'裴南苇'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>通过Python内置的<code>list</code>函数姜其他序列编程列表。准确的来说<code>list</code>并不是一个函数，而是创建对象的构造器<br>```python<br>nums = list(range(1, 10))<br>print(nums)  # [1, 2, 3, 4, 5, 6, 7, 8, 9]</li></ol><p>ch = list(‘hello’)<br>print(ch)  # [‘h’, ‘e’, ‘l’, ‘l’, ‘o’]</p><pre><code>3. 通过列表推导式(列表生成式)生成列表```pythonnums = [i ** 2 for i in range(1, 9)]print(nums)  # [1, 4, 9, 16, 25, 36, 49, 64, 81]</code></pre><blockquote><p>注意：<br> 列表是一种可变得数据类型，也即说明列表可以添加元素，删除元素，更新元素</p></blockquote><h4 id="列表的运算符"><a href="#列表的运算符" class="headerlink" title="列表的运算符"></a>列表的运算符</h4><pre class="line-numbers language-python"><code class="language-python">character_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'李淳罡'</span><span class="token punctuation">,</span> <span class="token string">'剑九黄'</span><span class="token punctuation">,</span> <span class="token string">'贾嘉佳'</span><span class="token punctuation">]</span>character_names2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'吴六鼎'</span><span class="token punctuation">,</span> <span class="token string">'温华'</span><span class="token punctuation">,</span> <span class="token string">'轩辕青锋'</span><span class="token punctuation">,</span> <span class="token string">'鱼幼薇'</span><span class="token punctuation">,</span> <span class="token string">'王初冬'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 列表的拼接</span>character_names3 <span class="token operator">=</span> character_names <span class="token operator">+</span> character_names2<span class="token keyword">print</span><span class="token punctuation">(</span>character_names3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['李淳罡', '剑九黄', '贾嘉佳', '吴六鼎', '温华', '轩辕青锋', '鱼幼薇', '王初冬']</span>    character_names<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>character_names2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>character_names<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['李淳罡', '剑九黄', '贾嘉佳', '吴六鼎', '温华', '轩辕青锋', '鱼幼薇', '王初冬']</span>    <span class="token comment" spellcheck="true"># 列表的重复</span>names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'李东西'</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['李东西','李东西', '李东西']</span>    <span class="token comment" spellcheck="true"># 列表的成员运算</span><span class="token comment" spellcheck="true"># character_names3 = # ['李淳罡', '剑九黄', '贾嘉佳', '吴六鼎', '温华', '轩辕青锋', '鱼幼薇', '王初冬']</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'徐凤年'</span> <span class="token keyword">in</span> character_names3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'徐凤年'</span> <span class="token operator">not</span> <span class="token keyword">in</span> character_names3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span>    <span class="token comment" spellcheck="true"># 获取列表的长度(元素个数)</span>size <span class="token operator">=</span> len<span class="token punctuation">(</span>character_names3<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 8</span>    <span class="token comment" spellcheck="true"># 列表的索引</span><span class="token keyword">print</span><span class="token punctuation">(</span>character_names3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> character_names3<span class="token punctuation">[</span><span class="token operator">-</span>size<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 李淳罡 李淳罡</span><span class="token keyword">print</span><span class="token punctuation">(</span>character_names3<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 王初冬</span><span class="token keyword">print</span><span class="token punctuation">(</span>character_names3<span class="token punctuation">[</span>size<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> character_names3<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 王初冬 王初冬</span>    <span class="token comment" spellcheck="true"># 列表的索引</span><span class="token keyword">print</span><span class="token punctuation">(</span>character_names3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['剑九黄', '贾嘉佳', '吴六鼎', '温华', '轩辕青锋']</span><span class="token keyword">print</span><span class="token punctuation">(</span>character_names3<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['剑九黄', '贾嘉佳', '吴六鼎', '温华', '轩辕青锋']</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>character_names3<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['王初冬', '鱼幼薇', '轩辕青锋', '温华', '吴六鼎', '贾嘉佳', '剑九黄', '李淳罡']</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>character_names3<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['李淳罡', '贾嘉佳', '温华', '鱼幼薇']</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>character_names3<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['王初冬', '轩辕青锋', '吴六鼎', '剑九黄']</span>    <span class="token comment" spellcheck="true"># 列表的比较运算</span>items1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>items2 <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 两个列表比较相等性比的是对应索引位置上的元素是否相等</span><span class="token keyword">print</span><span class="token punctuation">(</span>items1 <span class="token operator">==</span> items2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span>items3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 两个列表比较大小比的是对应索引位置上的元素的大小</span><span class="token keyword">print</span><span class="token punctuation">(</span>items1 <span class="token operator">&lt;=</span> items3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：<br> 由于列表是可变类型，所以通过索引操作既可以获取列表中的元素，也可以更新列表中的元素。对列表做索引操作一样要注意索引越界的问题，对于有<code>N</code>个元素的列表，正向索引的范围是<code>0</code>到<code>N-1</code>，负向索引的范围是<code>-1</code>到<code>-N</code>，如果超出这个范围，将引发<code>IndexError</code>异常，错误信息为：<code>list index out of range</code>。</p></blockquote><h4 id="列表元素的遍历"><a href="#列表元素的遍历" class="headerlink" title="列表元素的遍历"></a>列表元素的遍历</h4><ul><li>通过’for‘循环遍历<br>```python<br>character_names = [‘李淳罡’, ‘剑九黄’, ‘贾嘉佳’, ‘吴六鼎’, ‘温华’, ‘轩辕青锋’, ‘鱼幼薇’, ‘王初冬’]</li></ul><p>for name in character_names:<br>    print(name)</p><p>for index in range(len(character_names)):<br>print(character_names[index])</p><pre><code>### 列表的方法#### 添加元素和删除元素```pythoncharacter_names = ['姜似', '鱼幼薇', '南宫仆射']   # 使用append方法在列表末尾添加元素character_names.append('红薯')print(character_names)  # ['姜似', '鱼幼薇', '南宫仆射', '红薯']   # 使用insetr方法在列表指定索引位置插入元素character_names.insert(1, '洛阳')print(character_names)  # ['姜似', '洛阳', '鱼幼薇', '南宫仆射', '红薯']   # 删除元素character_names.remove('红薯')print(character_names)  # ['姜似', '洛阳', '鱼幼薇', '南宫仆射']   # 删除指定索引位置的元素# 默认删除列表最后一个元素# pop方法会返回删除的元素character_names.pop(2)  print(character_names)  # ['姜似', '洛阳', '南宫仆射']   # 删除列表末尾元素character_names.pop()   # 清空列表中的元素character_names.clear()print(character_names)  # []</code></pre><blockquote><p>注意：<br> 在使用<code>remove</code>方法删除元素时，如果要删除的元素并不在列表中，会引<code>ValueError</code>异常，错误消息是：<code>list.remove(x): x not in list</code>。在使用<code>pop</code>方法删除元素时，如果索引的值超出了范围，会引发<code>IndexError</code>异常，错误消息是：<code>pop index out of range</code>。</p></blockquote><pre class="line-numbers language-python"><code class="language-python">character_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'姜似'</span><span class="token punctuation">,</span> <span class="token string">'鱼幼薇'</span><span class="token punctuation">,</span> <span class="token string">'南宫仆射'</span><span class="token punctuation">]</span><span class="token keyword">del</span> character_names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>character_names<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['姜似', '南宫仆射']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>从列表中删除元素其实还有一种方式，就是使用Python中的<code>del</code>关键字后面跟要删除的元素，这种做法跟使用<code>pop</code>方法指定索引删除元素没有实质性的区别，但后者会返回删除的元素，前者在性能上略优（<code>del</code>对应字节码指令是<code>DELETE_SUBSCR</code>，而<code>pop</code>对应的字节码指令是<code>CALL_METHOD</code>和<code>POP_TOP</code>）。</p></blockquote><h4 id="元素排序和反转列表的sort操作可以实现列表元素的排序，而reversre操作可以实现元素的反转"><a href="#元素排序和反转列表的sort操作可以实现列表元素的排序，而reversre操作可以实现元素的反转" class="headerlink" title="元素排序和反转列表的sort操作可以实现列表元素的排序，而reversre操作可以实现元素的反转"></a>元素排序和反转列表的<code>sort</code>操作可以实现列表元素的排序，而<code>reversre</code>操作可以实现元素的反转</h4><pre class="line-numbers language-python"><code class="language-python">character_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'姜似'</span><span class="token punctuation">,</span> <span class="token string">'鱼幼薇'</span><span class="token punctuation">,</span> <span class="token string">'南宫仆射'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 排序,sort方法没有返回值，是在原数组上面操作</span>character_names<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>character<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['南宫仆射', '姜似', '鱼幼薇']</span><span class="token comment" spellcheck="true"># 反转</span>character_names<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>character_names<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['鱼幼薇', '姜似', '南宫仆射'] </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="嵌套的列表"><a href="#嵌套的列表" class="headerlink" title="嵌套的列表"></a>嵌套的列表</h3><p>如果列表中的元素又是列表，那么可以说这是嵌套的列表。嵌套的列表可以用来表示数学上的矩阵，表格。例如：我们想保存5个学生3门课程的成绩，可以定义一个保存5个元素的列表保存5个学生的信息，而每个列表元素又是3个元素构成的列表，分别代表3门课程的成绩。但是，一定要注意下面的代码是有问题的</p><pre class="line-numbers language-python"><code class="language-python">scores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token keyword">print</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>看上去我们好像创建了一个<code>5 * 3</code>的嵌套列表，但实际上当我们录入第一个学生的第一门成绩后，你就会发现问题来了，我们看看下面代码的输出。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 嵌套的列表需要多次索引操作才能获取元素</span>scores<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">95</span><span class="token keyword">print</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [[95, 0, 0], [95, 0, 0], [95, 0, 0], [95, 0, 0], [95, 0, 0]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们不去过多的解释为什么会出现这样的问题，如果想深入研究这个问题，可以通过<a href="http://www.pythontutor.com/visualize.html">Python Tutor</a>网站的可视化代码执行功能，看看创建列表时计算机内存中发生了怎样的变化，下面的图就是在这个网站上生成的。建议大家不去纠结这个问题，现阶段只需要记住不能用<code>[[0] * 3] * 5]</code>这种方式来创建嵌套列表就行了。那么创建嵌套列表的正确做法是什么呢，下面的代码会给你答案。</p><pre class="line-numbers language-python"><code class="language-python">scores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span>scores<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">95</span><span class="token keyword">print</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [[95, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 列表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python内置数据类型</title>
      <link href="/2021/07/21/python-cai-niao-bi-jing-zhi-lu-er/"/>
      <url>/2021/07/21/python-cai-niao-bi-jing-zhi-lu-er/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="1-Python内置并且常见的数据类型"><a href="#1-Python内置并且常见的数据类型" class="headerlink" title="1. Python内置并且常见的数据类型:"></a>1. Python<strong>内置</strong>并且常见的<strong>数据类型</strong>:</h3><ul><li><p>整型(int)：</p><ul><li>Python中不仅仅有我们生活中常见<strong>自然数</strong>，它和任何一门编程语言一样可以处理<strong>任意大小</strong>的整数</li><li>二进制：</li><li>八进制</li><li>十进制</li><li>十六进制</li></ul></li><li><p>浮点型(float)： 浮点型通俗来说就是我们熟知的小数；这里包括了一切负数，一切整数</p></li><li><p>字符串型(str)：字符串是用<strong>单引号(‘hello’)<strong>或者</strong>双引号（”hello”）</strong>引起来的任意文本，通常字符串里面的内容表示就是表面的那么简单，你看到是什么样就是什么样，当然也有特例存在，那就是转义字符</p>  <img src="files(二)\1.png" align="left" style="zoom:80%;"><p>  <strong>注意</strong>：python中说的空字符串并非“    ”里面是空格，而是””，也即是在引号里面什么都没有称之为空字符串</p></li><li><p>布尔型(bool)：布尔值<strong>只有</strong>True，False两种值</p></li><li><p>自定义类型：用户根据自己的需求定义数数据类型</p></li></ul><h3 id="2-变量"><a href="#2-变量" class="headerlink" title="2. 变量"></a>2. 变量</h3><ol><li><p>定义：一般我们说的变量是用来方便<strong>存储数据的载体</strong>，而之所以称其为变量是因为<strong>变量的值可以被读取和修改</strong>。</p></li><li><p>对于变量我们一般会为其取一个优雅而漂亮的名字，在为变量命名的时候我们往往会严格遵守一些规则:</p><ul><li><p>变量名由<strong>字母</strong>(Unicode字符)， <strong>数字</strong>和<strong>下划线</strong>构成。切记，数字不能作为变量名的开头(如果不想造成不必要的麻烦，我在这建议都用英文字母来为变量命名)</p>  <img src="files(二)\2.png" align="left" style="zoom:80%;"></li><li><p><strong>大小写敏感</strong>，即大写变量和小写变量属于不同变量</p><img src="\files(二)\3.png" aligin="left" style="zoom:80%;"></li><li><p>避免与Python语言的关键字<strong>（有特殊含义的单词）和</strong>保留字<strong>（如函数、模块等的名字）</strong>发生重名的冲突。</p><p>  建议:</p><ul><li>变量名通常使用小写英文字母，多个单词用下划线进行连接</li><li>下划线开头的变量通常是受保护的</li><li>私有变量用两个下划线开头(如没有特殊情况请不要以下划线开头)</li><li>在命名是最后做到<strong>见名知意</strong></li></ul>  <img src="\files(二)\4.png" align="left" style="zoom:80%;">  </li><li><p><strong>tips</strong>:  </p><ol><li>在Python中如果循环变量用不到，则可以用 **_ **表示</li></ol>  <img src="D:\千锋培训\知乎文章\files(二)\5.png" align="left" style="zoom:80%;">  <ol start="2"><li>在Python中，给一个变量赋值并<strong>不需要申明数据的类型</strong>，Python会自动识别所给的数据类型 <img src="D:\千锋培训\知乎文章\files(二)\6.png" glign="left" style="zoom:80%;"></li></ol></li></ul></li></ol><h3 id="3-Python三大结构"><a href="#3-Python三大结构" class="headerlink" title="3. Python三大结构"></a>3. Python三大结构</h3><ul><li>顺序：语句从上到下的执行</li><li>分支：根据不同的情况，走对应的分支，执行不同的代码</li><li>循环：重复运行某一段代码块，直到满足某一个条件才会结束循环，或者是遍历完所有的元素也会跳出循环</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
