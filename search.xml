<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python os模块的常用函数</title>
      <link href="/2021/10/04/os-mo-kuai-de-chang-yong-han-shu/"/>
      <url>/2021/10/04/os-mo-kuai-de-chang-yong-han-shu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><code>os</code> 模块的常用方法</p><ol><li><code>os.chdir()</code> 方法用于改变当前工作目录到指定的路径</li></ol><ol start="2"><li><code>os.getcwd()</code> 方法用于返回当前工作目录</li></ol><ol start="3"><li><p><code>os.listdir() </code>方法用于返回指定的文件夹包含的文件或文件夹的名字的列表。</p><p> 它不包括 <strong>.</strong> 和 <strong>..</strong> 即使它在文件夹中。</p></li></ol><ol start="4"><li><p><code>os.makedirs()</code> 方法用于递归创建目录。</p><p> 如果子目录创建失败或者已经存在，会抛出一个 OSError 的异常，Windows上Error 183 即为目录已经存在的异常错误。</p><p> 如果第一个参数 path 只有一级，则与<code>mkdir()</code>函数相同。</p></li></ol><ol start="5"><li><p><code>os.mkdir()</code> 方法用于以数字权限模式创建目录。默认的模式为 0777 (八进制)。</p><p> 如果目录有多级，则创建最后一级，如果最后一级目录的上级目录有不存在的，则会抛出一个 OSError。</p></li></ol><ol start="6"><li><p><code>os.open()</code> 方法用于打开一个文件，并且设置需要的打开选项，模式参数mode参数是可选的，默认为 0777。</p></li><li><p><code>os.remove()</code> 方法用于删除指定路径的文件。如果指定的路径是一个目录，将抛出OSError。</p></li></ol><ol start="8"><li><code>os.removedirs()</code> 方法用于递归删除目录。像<code>rmdir()</code>, 如果子文件夹成功删除, <code>removedirs()</code>才尝试它们的父文件夹,直到抛出一个error(它基本上被忽略,因为它一般意味着你文件夹不为空)。</li></ol><ol start="9"><li><code>os.rename()</code> 方法用于命名文件或目录，从 src 到 dst,如果dst是一个存在的目录, 将抛出OSError。</li></ol><ol start="10"><li><code>os.renames()</code> 方法用于递归重命名目录或文件。类似rename()。</li></ol><ol start="11"><li><code>os.rmdir()</code> 方法用于删除指定路径的目录。仅当这文件夹是空的才可以, 否则, 抛出OSError。</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取当前工作路径</span><span class="token comment" spellcheck="true"># os.getcwdb()  # b'/Users/lidongxi/Desktop'</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 更改工作路径</span>os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'Desktop/'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 查看当前/指令路径下的文件或文件夹的名字，返回列表</span>os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 非递归创建文件夹</span><span class="token comment" spellcheck="true"># 如果目录有多级，则创建最后一级，如果最后一级目录的上级目录有不存在的，则会抛出一个</span>os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'demo'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 错误示例</span><span class="token comment" spellcheck="true"># os.mkdir('demofile/file')  #[Errno 2] No such file or directory: 'demofile/file'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># os.makedirs()方法用于递归创建目录</span>os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span><span class="token string">'demo02/new'</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>flags – 该参数可以是以下选项，多个使用 “|” 隔开：</p><ul><li>os.O_RDONLY: 以只读的方式打开</li><li>os.O_WRONLY: 以只写的方式打开</li><li>os.O_RDWR : 以读写的方式打开</li><li>os.O_NONBLOCK: 打开时不阻塞</li><li>os.O_APPEND: 以追加的方式打开</li><li>os.O_CREAT: 创建并打开一个新文件</li><li>os.O_TRUNC: 打开一个文件并截断它的长度为零（必须有写权限）</li><li>os.O_EXCL: 如果指定的文件存在，返回错误</li><li>os.O_SHLOCK: 自动获取共享锁</li><li>os.O_EXLOCK: 自动获取独立锁</li><li>os.O_DIRECT: 消除或减少缓存效果</li><li>os.O_FSYNC : 同步写入</li><li>os.O_NOFOLLOW: 不追踪软链接</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 打开文件</span>file <span class="token operator">=</span> os<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> flags<span class="token operator">=</span>os<span class="token punctuation">.</span>O_RDWR<span class="token operator">|</span>os<span class="token punctuation">.</span>O_CREAT<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 写入字符串, a bytes-like object is required</span>os<span class="token punctuation">.</span>write<span class="token punctuation">(</span>file<span class="token punctuation">,</span> str<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"This is test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭文件</span>os<span class="token punctuation">.</span>close<span class="token punctuation">(</span>file<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># os.remove() 方法用于删除指定路径的文件</span>os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># os.rmdir() 删除指定文件夹</span>os<span class="token punctuation">.</span>rmdir<span class="token punctuation">(</span><span class="token string">'demo'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 递归删除一个目录</span>os<span class="token punctuation">.</span>removedirs<span class="token punctuation">(</span><span class="token string">'demo02/new/'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">! touch test<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 重命名文件/文件夹名字</span><span class="token comment" spellcheck="true"># os.rename(src, dst)</span><span class="token comment" spellcheck="true"># 重命名文件</span>os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'demo.txt'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 重命名文件夹</span>os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'demo'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># os.renames() 方法用于递归重命名目录或文件。类似rename()</span><span class="token comment" spellcheck="true"># 在重命名的同时，如果目标文件夹不存在会先递归的创建文件夹，在把文件重命名到目标文件夹下</span>os<span class="token punctuation">.</span>renames<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'aa/b/demo.txt'</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'./aa/b/'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>os.path下的常用方法</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>os.path.basename（path）</td><td>返回文件名</td></tr><tr><td>os.path.dirname（path）</td><td>返回目录路径</td></tr><tr><td>os.path.abspath(path)</td><td>返回绝对路径</td></tr><tr><td>os.path.exists（path）</td><td>路径存在则返回True,路径损坏返回False</td></tr><tr><td>os.path.getatime（path）</td><td>返回最近访问时间（浮点型秒数）</td></tr><tr><td>os.path.getmtime（path）</td><td>返回最近文件修改时间</td></tr><tr><td>os.path.getctime（path）</td><td>返回文件 path 创建时间</td></tr><tr><td>os.path.getsize（path）</td><td>返回文件大小，如果文件不存在就返回错误</td></tr><tr><td>os.path.isfile</td><td>判断路径是否为文件</td></tr><tr><td>os.path.isdir（path） （path）</td><td>判断路径是否为目录</td></tr><tr><td>os.path.split（path）</td><td>把路径分割成 dirname 和 basename，返回一个元组</td></tr><tr><td>os.path.join（path1, [, path2[, …]）</td><td>将目录和文件名合成一个路径</td></tr><tr><td>os.path.splitext（path）</td><td>分割路径中的文件名与拓展名</td></tr></tbody></table><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取文件名</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span><span class="token string">'/Users/lidongxi/Desktop/douyin.xls'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取文件路径</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span><span class="token string">'/Users/lidongxi/Desktop/douyin.xls'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取绝对路径</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 判断路径是否存在</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'/Users/lidongxi/Desktop/douyin.xls'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取最近访问时间，返回浮点型的描述</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getatime<span class="token punctuation">(</span><span class="token string">'/Users/lidongxi/Desktop/douyin.xls'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取文件修改时间</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getmtime<span class="token punctuation">(</span><span class="token string">'/Users/lidongxi/Desktop/douyin.xls'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取文件创建的时间</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getctime<span class="token punctuation">(</span><span class="token string">'/Users/lidongxi/Desktop/douyin.xls'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 查看文件大小</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span><span class="token string">'/Users/lidongxi/Desktop/douyin.xls'</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">**</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 判断路径是否为文件</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span><span class="token string">'/Users/lidongxi/Desktop/douyin.xls'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 判断路径是否为目录</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span><span class="token string">'/Users/lidongxi/Desktop/douyin.xls'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 把路径分隔成路径和文件名，返回元组</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/Users/lidongxi/Desktop/douyin.xls'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 分隔路径中的文件名与拓展名，返回元组</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span><span class="token string">'/Users/lidongxi/Desktop/douyin.xls'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 将目录和文件名合成一个路径</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'/Users/lidongxi/Desktop'</span><span class="token punctuation">,</span> <span class="token string">'douyin.xls'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> os的system原理</p><ul><li>os.system() 函数可以将字符串转化成命令在服务器上运行；其原理是每一条system函数执行时，其会创建一个子进程在系统上执行命令行，子进程的执行结果无法影响主进程</li><li>上述原理会导致当需要执行多条命令行的时候可能得不到预期的结果；</li></ul><pre class="line-numbers language-python"><code class="language-python">os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'cd /usr/local'</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'aaa.txt'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上述程序运行后会发现txt文件并没有创建在/usr/local文件夹下，而是在当前的目录下</p><p>使用system执行多条命令</p><ul><li>为了保证system执行多条命令可以成功，多条命令需要在同一个子进程中运行;</li></ul><pre class="line-numbers language-python"><code class="language-python">os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'cd /usr/local &amp;&amp; mkdir aaa.txt'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 或者</span>os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'cd /usr/local ; mkdir aaa.txt'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 标准库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python sys模块的常用函数</title>
      <link href="/2021/10/04/biao-zhun-ku-sys/"/>
      <url>/2021/10/04/biao-zhun-ku-sys/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token comment" spellcheck="true"># argv在外部向程序传递参数</span><span class="token comment" spellcheck="true"># sys.argv 返回一个列表</span><span class="token comment" spellcheck="true"># sys.argv[0]第一个参数默认为文件当前脚本名</span><span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 查看python解释器版本</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'当前python解释器版本：{sys.version}'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># sys.platform: 获取当前系统平台</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'系统平台为：{sys.platform}'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># sys.getdefaultencoding(): 获取系统当前编码</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'系统当前编码：{sys.getdefaultencoding()}'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 返回当前解释器递归的最大深度</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'当前解释器递归的最大深度：{sys.getrecursionlimit()}'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 修改最大递归深度</span>sys<span class="token punctuation">.</span>setrecursionlimit<span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'修改后的递归最大深度：{sys.getrecursionlimit()}'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 程序中间的退出，arg=0为正常退出</span>sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token string">'程序出错，提前退出'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># sys.path: 获取指定模块搜索路径的字符串集合，可以将写好的模块放在得到的某个路径下，就可以在程序中import时正确找到</span><span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 标准库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析方法论</title>
      <link href="/2021/09/24/shu-ju-fen-xi-fang-fa-lun/"/>
      <url>/2021/09/24/shu-ju-fen-xi-fang-fa-lun/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="数据分析方法论"><a href="#数据分析方法论" class="headerlink" title="数据分析方法论"></a>数据分析方法论</h1><h2 id="一、公式法"><a href="#一、公式法" class="headerlink" title="一、公式法"></a>一、公式法</h2><p>所谓公式法就是针对某个指标，用公式层层分解该指标的影响因素。</p><p>举例:分析某产品的销售额较低的原因，用公式法分解： </p><ul><li>某产品销售额=销售量 X 产品单价</li><li>销售量=渠道A销售量 + 渠道B销售量 + 渠道C销售量 + …</li><li>渠道销售量=点击用户数UV X 下单率 购买转化</li><li>点击用户数=曝光量 X 点击率</li></ul><p><strong>第一层:找到产品销售额的影响因素。</strong>某产品销售额=销售量 X 产品单价。是销量过低还是价格设置不合理?</p><p><strong>第二层:找到销售量的影响因素。</strong>分析各渠道销售量，对比以往，是哪些过低了。</p><p><strong>第三层:分析影响渠道销售量的因素。</strong>渠道销售量=点击用户数 X 下单率。是点击用户数低了， 还是下单量过低。如果是下单量过低，需要看一下该渠道的广告内容针对的人群和产品实际受 众符合度高不高。</p><p><strong>第四层:分析影响点击的因素。</strong>点击用户数=曝光量 X 点击率。是曝光量不够还是点击率太低， 点击率低需要优化广告创意，曝光量则和投放的渠道有关。通过对销售额的逐层拆解，细化评估以及分析的粒度。 公式拆解法是针对问题的层级式解析，在拆解时，对因素层层分解，层层剥尽。</p><h2 id="二、象限法"><a href="#二、象限法" class="headerlink" title="二、象限法"></a>二、象限法</h2><p>网易云、QQ、酷狗、虾米</p><p>用户日活 、年龄层、购买会员数、</p><p>通过对两种及以上维度的划分，运用坐标的方式表达出想要的价值。由价值直接转变为策略， 从而进行一些落地的推动。象限法是一种策略驱动的思维，常于产品分析、市场分析、客户管 理、商品管理等。</p><img src="http://image.woshipm.com/wp-files/2020/05/f13WuZ3bnfjELhDLBra2.jpeg" alt="img" style="zoom:60%;"><img src="http://image.woshipm.com/wp-files/2020/05/WQSgegXa4UXdyYTGrrkm.jpeg" alt="img" style="zoom:50%;"><p>还有经典的 RFM 模型，把客户按最近一次消费(Recency)、消费频率(Frequency)、消费金额 (Monetary)三个维度分成八个象限。</p><p><img src="https://pic4.zhimg.com/80/v2-04470b0165b7dfa8b994c33d6e8f7353_1440w.jpg" alt="img"></p><p>象限法的优势:<br><strong>1. 找到问题的共性原因</strong><br>通过象限分析法，将有相同特征的事件进行归因分析，总结其中的共性原因。例如上面广告的 案例中，第一象限的事件可以提炼出有效的推广渠道与推广策略，第三和第四象限可以排除一 些无效的推广渠道;<br><strong>2. 建立分组优化策略</strong><br>针对投放的象限分析法可以针对不同象限建立优化策略，例如 RFM 客户管理模型中按照象限 将客户分为重点发展客户、重点保持客户、一般发展客户、一般保持客户等不同类型。给重点 发展客户倾斜更多的资源，比如 VIP 服务、个性化服务、附加销售等。给潜力客户销售价值更 高的产品，或一些优惠措施来吸引他们回归。</p><h2 id="三、二八法-帕累托分析"><a href="#三、二八法-帕累托分析" class="headerlink" title="三、二八法/帕累托分析"></a>三、二八法/帕累托分析</h2><p>二八法也可以叫帕累托法则，源于经典的二八法则。比如在个人财富上可以说世界上 20%的 人掌握着 80%的财富。而在数据分析中，则可以理解为 20%的数据产生了 80%的效果需要围 绕这 20%的数据进行挖掘。往往在使用二八法则的时候和排名有关系，排在前 20%的才算是 有效数据。二八法是抓重点分析，适用于任何行业。找到重点，发现其特征，然后可以思考如 何让其余的 80%向这 20%转化，提高效果。一般地，会用在产品分类上，去测量并构建 ABC 模型。比如某零售企业有 500 个 SKU 以及这 些 SKU 对应的销售额，那么哪些 SKU 是重要的呢，这就是在业务运营中分清主次的问题。常见的做法是将产品 SKU 作为维度，并将对应的销售额作为基础度量指标，将这些销售额指 标从大到小排列，并计算截止当前产品 SKU 的销售额累计合计占总销售额的百分比。百分比在 70%(含)以内，划分为 A 类。 百分比在 70<del>90%(含)以内，划分为 B 类。 百分比在 90</del>100%(含)以内，划分为 C 类。 以上百分比也可以根据自己的实际情况调整。ABC分析模型，不光可以用来划分产品和销售额，还可以划分客户及客户交易额等。比如给企 业贡献 80%利润的客户是哪些，占比多少。假设有 20%，那么在资源有限的情况下，就知道 要重点维护这 20%类客户。</p><h2 id="四、漏斗法"><a href="#四、漏斗法" class="headerlink" title="四、漏斗法"></a>四、漏斗法</h2><p>漏斗法即是漏斗图，有点像倒金字塔，是一个流程化的思考方式，常用于像新用户的开发、购物转化率这些有变化和一定流程的分析中。上图是经典的营销漏斗，形象展示了从获取用户到最终转化成购买这整个流程中的一个个子环 节。相邻环节的转化率则就是指用数据指标来量化每一个步骤的表现。所以整个漏斗模型就是 先将整个购买流程拆分成一个个步骤，然后用转化率来衡量每一个步骤的表现，最后通过异常 的数据指标找出有问题的环节，从而解决问题，优化该步骤，最终达到提升整体购买转化率的目的。整体漏斗模型的核心思想其实可以归为分解和量化。比如分析电商的转化，我们要做的就是监 控每个层级上的用户转化，寻找每个层级的可优化点。对于没有按照流程操作的用户，专门绘 制他们的转化模型，缩短路径提升用户体验。还有经典的黑客增长模型，AARRR 模型，指 Acquisition、Activation、Retention、Revenue、 Referral，即用户获取、用户激活、用户留存、用户收益以及用户传播。这是产品运营中比较 常见的一个模型，结合产品本身的特点以及产品的生命周期位置，来关注不同的数据指标，最 终制定不同的运营策略。从下面这幅 AARRR 模型图中，能够比较明显的看出来整个用户的生命周期是呈现逐渐递减趋 势的。通过拆解和量化整个用户生命周期各环节，可以进行数据的横向和纵向对比，从而发现 对应的问题，最终进行不断的优化迭代。</p><h2 id="五、逻辑树分析方法"><a href="#五、逻辑树分析方法" class="headerlink" title="五、逻辑树分析方法"></a>五、逻辑树分析方法</h2><h3 id="1-1、逻辑拆解"><a href="#1-1、逻辑拆解" class="headerlink" title="1.1、逻辑拆解"></a>1.1、逻辑拆解</h3><p>将复杂问题拆解成多子个问题进行分析(费米问题)不断地分解问题。逻辑树又称问题树、分解树等。逻辑树是将问题的所有子问题分层罗列，从最高层开始并逐步向下扩展。将复杂问题经过合理的假设拆解成一个一个子问题。</p><p><img src="https://pic4.zhimg.com/80/v2-a3a149bf3bb059d21856888d865dc97b_1440w.jpg" alt="img"></p><p>例如一个经典的费米问题分析方法：请问一座城市有多少调音师？ 拆解为两个子问题： 总共多少个调音师=所有调音师1年总共工作多长时间➗一个调音师一年工作多长时间</p><p><strong>所有调音师1年总共工作多长时间：10万小时</strong></p><ul><li>(第三层拆解)-如果一座城市居民500万，按拥有钢琴的人最小比例值1%的计算，则全市有5万架钢琴</li><li>(第二层拆解)-假设一架钢琴每年需要调音1次，每次调音要2个小时，一年工作365天，</li><li>(第一层拆解)-得出所有调音师1年总共工作10万小时=(5万架)X(1年1次)X(2小时)</li></ul><p><strong>一个调音师1年工作多长时间：2000小时</strong></p><ul><li>(第二层拆解)-假设1个调音师一周工作5天，每天工作8小时，一年工作50个星期</li><li>(第一层拆解)-得出一个调音师一年工作时长2000小时=(8小时)X(5天)X(5星期)</li></ul><p><img src="https://pic4.zhimg.com/80/v2-eaeb1a5c1b7092ced2d1d8548d1fb30f_1440w.jpg" alt="img"></p><h3 id="1-2、有什么用？"><a href="#1-2、有什么用？" class="headerlink" title="1.2、有什么用？"></a>1.2、有什么用？</h3><p>最大的用处就是去解决“费米问题”</p><p>什么是费米问题呢？</p><p>在<strong>产品经理或者数据分析师</strong>的面试过程中，面试官经常会遇到如下的问题，比如</p><ul><li><p>上海有多少个红绿灯？</p></li><li><p>北京有多少特斯拉？</p></li><li><p>芝加哥有多少钢琴？</p></li><li><p>北京有多少出租车？</p></li><li><p>某煎饼摊，一天卖出的煎饼数量是多少？</p></li><li><p>多少兵乓球可以装满这个屋子？</p></li><li><p>深圳有多少产品经理？</p></li><li><p>北京有多少个加油站？</p></li></ul><p>费米问题常用来被考察面试者以下三方面的能力</p><ul><li><strong>逻辑分析能力：</strong>遇到问题是否有清晰有条理，考察产品感和基础逻辑能力</li><li><strong>数据能力：</strong>对数据的关注度，是否重视日常的数据</li><li><strong>细节把握的能力：</strong>是否注意分析分析中的细节，结合实际情况去细化</li></ul><h3 id="1-3、如何去用？"><a href="#1-3、如何去用？" class="headerlink" title="1.3、如何去用？"></a>1.3、如何去用？</h3><p>经典分析问题举例说明：</p><p><strong>芝加哥有多少钢琴调音师？</strong></p><p>用逻辑数分析方法后可以得出</p><p><strong>钢琴调音师的数量=【芝加哥所有的钢琴师1年的总工作时间】÷【钢琴师每年的工作时间】</strong></p><p><strong>【前者】:<strong>芝加哥所有的钢琴师1年的总工作时间由下面几个因素决定</strong>——需求侧</strong></p><ul><li>芝加哥有多少架钢琴：250万人口乘以2%=5万</li><li>钢琴每年要调几次音：1年1次</li><li>调一次音要多久：2小时</li><li>所以一年的总工作时间是 5万×1×2=10万小时</li></ul><p><strong>【后者】：</strong>钢琴师每年的工作时间由下面几个因素决定<strong>——供给侧</strong></p><ul><li>5天8小时，50个星期=2000个小时</li><li>耗费在奔波的路上要减去-20%=1600小时</li></ul><p>结果就出来了</p><p>芝加哥大概有10万 ÷ 1600=60个</p><p>典型的供需关系问题</p><h3 id="1-4、费米问题：解题思路与技巧"><a href="#1-4、费米问题：解题思路与技巧" class="headerlink" title="1.4、费米问题：解题思路与技巧"></a>1.4、费米问题：解题思路与技巧</h3><p>如何面对产品经理或者数据分析师面试中开放的问题</p><p><strong>常用的思路：</strong></p><ul><li>已知数据进行切入</li><li>通用的三种解答方法进行切入：<strong>供需关系，空间分析、收入分析</strong></li></ul><p><strong>常用的数据（需要对数据有个基本的了解）：</strong></p><ul><li>北京1600平方千米，2100万人口</li><li>上海6300平方千米，2400万人口</li><li>广州7400平方千米，1400万人口</li><li>深圳2000平方千米，1200万人口</li></ul><p><strong>基于以上思路再次举个例子：</strong>请你估算北京有多少个加油站？</p><h4 id="解题方法1：从供需关系出发【解决80-的费米问题】"><a href="#解题方法1：从供需关系出发【解决80-的费米问题】" class="headerlink" title="解题方法1：从供需关系出发【解决80%的费米问题】"></a>解题方法1：从供需关系出发【解决80%的费米问题】</h4><ul><li><strong>假设：</strong>加油站的供求关系是平衡的，市场供应量与需求侧匹配</li><li><strong>参数：</strong>北京有500万机动车、一辆车10天＋一次油，一辆车加油5分钟，大部分车主实际加油时间为早上8点到晚上10点，14个小时，一个加油站默认2个加油桩，加油桩利用率50%</li><li><strong>模型分析</strong>：<ul><li>北京一天加油能力=北京的车辆一天加油需求次数</li><li>供给侧：北京城市一天加油能力=14个小时×50%利用率×2个桩÷5分钟，也就是一个加油桩一天能加168辆车</li><li>需求侧：500万车除以10，每天平均有50万辆车，要加油</li><li>50万除以168 ，也就是3000个加油站</li></ul></li><li><strong>点评：模型客观，参数值较为确定，参数个数较多</strong></li></ul><h4 id="解题方法2：从空间关系出发"><a href="#解题方法2：从空间关系出发" class="headerlink" title="解题方法2：从空间关系出发"></a><strong>解题方法2：从空间关系出发</strong></h4><ul><li><strong>假设：</strong>一个司机开到北京任何一个地方，快没油了，这个司机都能在很短的地方加到油</li><li><strong>参数：</strong>5分钟能加到油，车速50km/h, 北京的面积1600平方千米</li><li><strong>模型分析：</strong><ul><li>司机加到油的活动范围为：（50km/h乘以5分钟)^2</li><li>北京的面积1600平方千米÷司机加油的活动范围=922个</li></ul></li><li><strong>点评：</strong>模型比较好理解；但是参数值非常不确定，参数个数较少</li></ul><h4 id="解题方法3：从收入分析出发"><a href="#解题方法3：从收入分析出发" class="headerlink" title="解题方法3：从收入分析出发"></a>解题方法3：从收入分析出发</h4><ul><li><strong>假设</strong>：加油站的收入能够撑得起他的运营成本</li><li><strong>参数：</strong>北京500辆车、一辆车10天加一次油、加一次油200元，毛利润占收入的10%，工资支出占利润的50%，需要5个人支撑起一个加油站的营运，人均工资5000元</li><li><strong>模型分析：</strong><ul><li>北京某个加油站总支出：工资支出5000×5；</li><li>北京的加油站总收入：500万辆车、10一天加一次油。一次油200,，再乘以10%的毛利润，再乘以50%</li><li><strong>最终：</strong>北京的加油站总收入(支出)÷北京某个加油站总支出=6000个</li></ul></li></ul><p>三种方法估计出来的值大约为1000到6000，可以得出北京市加油站的数量级应该为“千”，取个平均值，大概为3000。</p><h3 id="1-5、费米问题案例集"><a href="#1-5、费米问题案例集" class="headerlink" title="1.5、费米问题案例集"></a>1.5、费米问题案例集</h3><p>【1】上海有多少个红绿灯？</p><ul><li><strong>解题方法：</strong>空间关系，</li><li><strong>假设：</strong>为了保证路口的安全，需要控制城市内的车保持中等速度行驶，</li><li><strong>参数：</strong>一个路口有4个红绿灯，10分钟以60km/h的速度前进的汽车一定会遇到红绿灯，上海市面积6300平方千米</li></ul><p>【2】北京有多少特斯拉？</p><ul><li><strong>模型分析：</strong>北京汽车保有量500万×特斯拉占据市场的份额，另外汽车的占据市场份额可以在路口蹲守，一个小时内经过了100辆车，有5辆是特斯拉，那就默认市场份额5%</li></ul><p>【3】北京有多少出租车？</p><ul><li>解题方法：供需角度</li><li>假设：假设北京市做出租车的需求量和出租车的数量是相匹配的</li><li>参数：<ul><li>一天中市场的打车时间需求：北京市人口2100万人口，一天中的打车比例为2%，每次打车的时间在30分钟；</li><li>一辆出租车可以提供的时间：24小时中，在途8小时，14小时休息，2小时空载；另外市面上，也就是每天8小时，一个司机可以解决6除以30分钟，也就是12个人的打车需求</li></ul></li><li>2100×2%÷12，就是北京出租车得数量</li></ul><p>【4】某煎饼摊，一年卖出的煎饼数量是多少？</p><ul><li>解题方法：从供需角度来解决</li><li>假设：能卖出的煎饼与能做出的煎饼供需关系一致</li><li>参数：<ul><li>煎饼大妈一天的工作时间：早上2小时、中午1小时、晚上2小时，总共5小时。</li><li>煎饼大妈做一个煎饼的时间：5分钟</li></ul></li><li>360天×（5小时÷5分钟）=？</li></ul><p>【5】多少兵乓球可以装满这个屋子？</p><ul><li>解题方法：从空间关系出发</li><li>假设：乒乓球立体的、塞满整个屋子</li><li>参数：利用乒乓球的直径计算他的正方体面积0.025平方米，整个屋子的面积100平方米</li><li>模型分析：相除即可</li></ul><p>【6】深圳有多少产品经理</p><ul><li>解题方法：从供需关系</li><li>假设：深圳市所有互联网公司都有产品经理</li><li>参数：深圳市互联网公司总数5000家，每一家公司的人员数量各不相同，但是加起来从业人数50万人，每一家公司的人员配比为（1：1：1：1：4：1）—销售：产品：交互：视觉：研发：人力等；</li><li>模型分析：50万*（1/9）=11万</li></ul><h2 id="六、多维度拆解分析方法"><a href="#六、多维度拆解分析方法" class="headerlink" title="六、多维度拆解分析方法"></a>六、多维度拆解分析方法</h2><p>顾名思义从多个维度拆解分析数据(维度、拆解)。在数据分析中，通过不同的维度去观察同一组数据，从而观察数据变化后的原因。大部分数据变化可以从**”数据指标”<strong>和</strong>“业务流程”<strong>两个方向进行拆解分析。</strong>“数据指标”维度：<strong>指的是数据指标构成因素的分析，比如用户指标(包含新增用户，留存用户等)</strong>“业务流程”维度：**指的是在实际业务流程中的因素分析，比如渠道分析(不同渠道的推广效果，不同渠道的付费率等)。其他：”时间维度“，“地区维度”等。</p><h2 id="七、5W2H-方法论"><a href="#七、5W2H-方法论" class="headerlink" title="七、5W2H 方法论"></a>七、5W2H 方法论</h2><p><strong>5W2H分析法。</strong>在碰到一个问题的时候，都可以从7个方面思考：why、what、who、when、where、how、how much。<strong>对于题主的问题来说顺序其实没有特别严格的规定哦~！</strong></p><p><strong>具体的内容包括：</strong></p><p>· WHY——为什么？为什么要这么做？理由何在？原因是什么？</p><p>· WHAT——是什么？目的是什么？做什么工作？</p><p>· WHO——谁？由谁来承担？谁来完成？谁负责？相关方是谁？</p><p>· WHEN——何时？什么时间完成？什么时机最适宜？</p><p>· WHERE——何处？在哪里做？从哪里入手？</p><p>· HOW——怎么做？如何提高效率？如何实施？方法怎样？</p><p>· HOW MUCH——多少？做到什么程度？数量如何？质量水平如何？费用产出如何？</p><p>你在脑子空白，不知道如何回答的时候，可以套用5W2H框架，把问题进行细化，快速明确问题，让自己的思路条理化。</p><p><strong>以面试的角度来谈论如何在实战中用好5W2H分析法</strong></p><blockquote><p>「你们现在准备一个电动汽车上市的推广策划，预算是20w，一个月的时间准备，你会怎样规划？（奔驰面试题）」</p></blockquote><p><strong>首先，我们发现题目给出的信息非常少，我们可以和面试官沟通。</strong>（如果是群面，就可以和同组的小伙伴们沟通）</p><p>“这个电动汽车的定价是多少？”</p><p>“电动汽车的产品定位是什么？有什么产品特色？技术上？外观上？”</p><p>“电动汽车的目标用户画像是怎样的？”</p><p>“有多少台电动汽车可以在推广期使用？”</p><p>……</p><p>通过和面试官的沟通，假定获取以下信息：</p><p>这款电动汽车定价20w左右，在技术上突破了传统电动汽车续航里程短、充电慢的缺点，性能上对齐传统汽车，但是比传统汽车更节能经济。适合工作了3-5年的1、2线白领人群，男性居多，大概有3台车可以在推广时使用。</p><p><strong>然后，我们先按照5W2H的框架来分析一遍。</strong>我们的回答可以是：</p><ul><li><strong>Why - 策划目的</strong> </li></ul><p>这个策划是要拓展年轻群体对电动汽车的认知，培养一批种子用户。预期传播覆盖人群200w+。</p><ul><li><strong>What - 主题内容</strong></li></ul><p>策划的主题是“电动，从此环保奔驰”，强化大家对电动、环保和性能的感知。</p><ul><li><strong>When - 活动时间</strong></li></ul><p>配合上市时间，推广时间在上市前2周，为上市做好预热。</p><ul><li><strong>Where - 渠道</strong></li></ul><p>预期目标分解，线上线下联动：</p><ol><li><p>提前制作宣传视频，选择汽车KOL的新媒体、虎扑等直男社区投放。（传播目标100w+）</p></li><li><p>与商场合作，开设试驾点。事先在网上开放报名，邀请网友在现场体验驾驶，记录并制作VLOG视频。（现场活动，参与人员有限）</p></li><li><p>后期Vlog传播，保持话题热度。（传播目标100w+）</p></li></ol><ul><li><strong>Who - 相关人员</strong></li></ul><p>内部：根据内部人员情况，做好工作分配安排</p><p>合作方：提前联系并确认好供应商、合作媒体、宣传资源</p><ul><li><strong>How - 怎么做</strong></li></ul><p>前期准备一个月的时间，整个推广策划大概需要7天时间，宣传视频策划制作、前期活动准备同步进行，大致需要20天时间，留下3天做推广上线前的调整时间。</p><p>全程实施检测效果，包括线上的播放量、转赞评等数据，线下的活动口碑等，活动结束后完成活动总结报告，对推广的效果做出总结。 </p><p>可做好项目安排表，合理规划项目进度。</p><ul><li><strong>How much - 成本</strong></li></ul><p>总预算20w。</p><p>宣传视频拍摄预算5w、kol新媒体投放预算7w、商场试驾预算7w，多出1w作为备用资金，应对一些突发情况。</p><h2 id="八、PEST分析方法论：行业分析"><a href="#八、PEST分析方法论：行业分析" class="headerlink" title="八、PEST分析方法论：行业分析"></a>八、PEST分析方法论：行业分析</h2><p>政策（Policy）、经济（Economy）、社会（Society）、技术（Technology）</p><p><img src="https://pic2.zhimg.com/80/v2-0cc0c02499b50f681d0be70e7ce03d1d_1440w.jpg" alt="img"></p><h2 id="九、AARRR-用户行为分析方法论"><a href="#九、AARRR-用户行为分析方法论" class="headerlink" title="九、AARRR 用户行为分析方法论"></a>九、AARRR 用户行为分析方法论</h2><p>AARRR模型对应产品运营的 5 个重要环节，分别是：</p><p><strong>第一环节是获取用户（Acquisition ）：用户如何找到我们？</strong></p><p><strong>1.语言——市场匹配</strong>，怎么说才能打动用户的心</p><p>实际上考验的是抓住用户注意力的能力。现在人们关注一条网络信息的时间通常是8秒，如果不能在8秒内告诉用户你的产品对他有什么用，你就失去了一次获客的机会。</p><p><strong>2.渠道——产品匹配，</strong>产品投放在什么渠道才能直达用户的视线范围</p><p>渠道可以分为三类，一种是口碑渠道，适合病毒营销；一种是有机渠道，适合搜索引擎优化（SEO）、内容营销，比如搜索引擎优化可以提高自己网站在搜索引擎搜索结果页面的排名；还有一种是付费渠道，有哪些付费渠道呢？</p><p>1）展示位广告</p><ul><li>在网站或手机 App 的顶部、App 的开屏广告位等。</li><li>按展示次数付费（CPM，Cost Per Mille），也就是有多少人看到了该广告。</li></ul><p>2）搜索广告</p><ul><li>广告主为某一个搜索关键词出价，用户看到的搜索结果是按广告主出价的高低来排名的。</li><li>按点击次数付费（CPC，Cost Per Click），也就是有多少人点击了该广告。</li></ul><p>3）信息流广告</p><ul><li><p>根据用户的兴趣爱好来推荐广告。</p></li><li><p>按点击次数付费（CPC）或者按投放的实际效果付费（CPA，Cost Per Action）。</p></li><li><p>按投放的实际效果付费（CPA，Cost Per Action）包括：</p></li><li><ul><li>CPD（Cost Per Download）：按 App 的下载数计费</li><li>CPI（Cost Per Install）：按激活 App 的数量计费</li><li>CPS（Cost Per Sales）：按完成购买的用户数或者销售额来计费</li></ul></li></ul><p>在将产品投放去哪个渠道的时候，要清楚你的目标用户是谁，目标用户在哪。目前主流广告平台都支持这三种方式的付费：按展示次数付费（CPM）、按点击次数付费（CPC）和按投放的实际效果付费（CPA）。广告主可以按自己的产品需求来灵活选择。</p><p><strong>【需要关注的指标】</strong></p><ul><li>渠道曝光量：有多少人看到产品推广的线索</li><li>渠道转换率：有多少用户因为曝光转换成用户</li><li>日新增用户数：每天新增用户是多少</li><li>日应用下载量：每天有多少用户下载了产品</li><li>获客成本（CAC）：获取一个客户所花费的成本</li></ul><p><strong>第二环节是激活用户（Activation）：用户的首次体验如何？</strong></p><p>想唤醒休眠用户，就得先摸清楚产品的“啊哈时刻”（Aha moment，让用户感受到产品亮点情不自禁地发出赞叹的时刻，它对应的就是打动用户的产品亮点）。</p><p>要想激活用户，得绘制一幅通往“啊哈时刻”的路线图。比如你负责的产品是个购物软件，在新用户体验到啊哈时刻之前，必须要完成下面这些步骤：下载app，找到所需商品，放入购物车，创建账户，输入姓名，加入信用卡和配送信息，然后点击购买。</p><p>在这一系列动作中，到底用户停留在了哪一步？是搜不到要的东西，还是创建账户太麻烦，或者是页面设置不合理？你要计算每个节点用户的流失率，来相应地提高产品性能，改善用户体验。</p><p><strong>【需要关注的指标】</strong></p><ul><li><p>日活跃用户数（日活）：一天之内，登录或使用了某个产品的用户数。比如一天内打开我微信公众号的人数。类似的还有周活跃用户数，月活跃用户数。</p></li><li><p>活跃率（活跃用户占比）：某一时间段内活跃用户在总用户量的占比。根据时间可分为日活跃率（DAU）、周活跃率（WAU）、月活跃率（MAU）等。</p></li><li><p>产品使用每个节点用户的流失率。用户流失率和留存率恰好相反。如果某产品新用户的次日留存为20%，那么反过来说明有80%的用户流失了。</p></li><li><p>如果是网页端的产品，还有两个指标来衡量网页端活跃：</p></li><li><ul><li>PV（Page View，页面浏览量）：用户每打开一个网页可以看作一个PV，用户看了十个网页，则PV为10。</li><li>UV（Unique Visitor，独立访客数）：一定时间内访问网页的人数。</li></ul></li></ul><p><strong>第三个环节是提高留存（Retention）：用户会回来吗？</strong></p><p>在第二个环节用户终于被激活唤醒了，这时候你的任务就变成了如何让用户变成回头客。留存的核心目标是让用户养成使用习惯。在这个阶段，你要明白习惯是如何形成的。</p><p><strong>【需要关注的指标】</strong></p><ul><li>次日留存率：（当天新增的用户中，在第2天使用过产品的用户数）/第一天新增总用户数</li><li>第3日留存率：（第一天新增用户中，在第3天使用过产品的用户数）/第一天新增总用户数</li><li>第7日留存率：（第一天新增的用户中，在第7天使用过产品的用户数）/第一天新增总用户数</li><li>第30日留存率：（第一天新增的用户中，在第30天使用过产品的用户数）/第一天新增总用户数</li></ul><p>Facebook有一个著名的40-20-10法则，即新用户次日留存率为40%，7日留存率为20%，30日留存率为10%，有这个表现的产品属于数据比较好的。</p><p><strong>第四个环节是增加收入（Revenue ）：如何赚到更多钱？</strong></p><p>完成了上面所有的步骤，终于来到最有挑战性的一关，那就是如何从用户身上获得真正的收益。比如让用户续订、创造更多的广告位等等。</p><p>虽然商业模式不同，变现的方式不同，但是有一个概念需要重视，那就是夹点（pinch point），它指的是损失潜在收益的地方。</p><p>对于电商企业来说，用户从挑选商品到完成购买之间是一个危险区，很多人中途会放弃购买。要评估这些常见夹点，分析用户在这些点放弃的原因。</p><p><strong>【需要关注的指标】</strong></p><p>这里我们要注意“<strong>用户</strong>”和“<strong>付费用户</strong>”的区分，这也将影响收入的计算。（下面提到的“用户”，如果没有特别说明是“付费用户”，那么就是值全部用户（包括付费用户和非付费用户））</p><ul><li>客单价：每位用户平均购买商品的金额。客单价=销售总额/顾客总数</li><li>PUR(Pay User Rate)：付费用户占比</li><li>ARPPU(Average Revenue Per Paying User)：某段时间内，付费用户的平均收入（不包括未付费的用户）。ARPPU=总收入/付费用户数</li><li>生命周期价值(LTV，Lift Time Value)：，即平均一个用户在首次登录游戏到最后一次登录游戏内，为该游戏创造的收入总计。常用于游戏行业。</li><li>复购率：一定时间内，消费两次以上的用户数 / 总购买用户数。比如有10个用户购买了产品，5个用户产生了重复购买，则重复购买率=5个重复购买用户数 / 10（总购买用户数=50%</li><li>销售额=用户数<em>转化率</em>客单价*购买频率（指消费者或用户在一定时期内购买某种或某类商品的次数。）</li></ul><p><strong>第五个环节推荐（Refer病毒式营销）： 用户会告诉其他人吗？</strong></p><p>引爆一种流行病不只有一种途径，流行病爆发需要三个条件：</p><p><strong>1）传染物本身</strong></p><p>传染物本身是说要对自己的产品有足够的了解。试着问自己一个问题：我的产品是否真正解决了用户的痛点？</p><p>如果你是写文章的，就要考虑你的文章能为用户带来哪些真正的价值。如果你是做餐饮的，你的菜品是否真的为用户所喜欢。</p><p><strong>2）传染物发挥作用所需的环境</strong></p><p>也就是你的用户在哪里？对应我们前面讲的AARRR模型第一关环节（获取用户）。要去思考使用你产品的刚需用户经常在哪些环境（社区，大学等等渠道）中出现。</p><p><strong>3）人们传播传染物的行为</strong></p><p>在对自己的产品有了深刻洞察，同时找到你的目标人群后，还要考虑到人们会因为什么目的去分享你的产品，让更多的人看到你的产品。这个条件对应的就是AARRR模型第五个环节（推荐，病毒式营销）。</p><p><strong>【需要关注的指标】</strong></p><ul><li><strong>转发率</strong>：某功能中，转发用户数 / 看到该功能的用户数。比如我的微信公众号（猴子聊人物）推送一篇文章给3万用户，转发这篇文章的用户数是3000，那么转发率=3000（转发这篇文章的用户数） / 3万（看到这篇文章的用户数）=10 %</li><li><strong>转化率</strong>：计算方法与具体业务场景有关。<ul><li>比如淘宝转化率=某段时间内产生购买行为的客户人数 / 所有到达店铺的访客人数，假如双11当天，有100个用户看到了你店铺的推广信息，被吸引进入店铺，最后有10个人购买了店铺里的东西，那么转化率=10（产生购买行为的客户人数） /100（ 所有到达店铺的访客人数）=10%</li><li>广告转化率=点击广告进入推广网站的人数 / 看到广告的人数，比如我们经常使用百度，搜索结果里会有广告，如果有100个人看到了广告，其中有10个人点击广告进入推广网站，那么转化率=10（点击广告进入推广网站的人数） / 100（看到广告的人数）=10%</li></ul></li><li><strong>K因子</strong>(K-factor)：用来衡量推荐的效果，即一个发起推荐的用户可以带来多少新用户。</li><li><ul><li>K 因子= (每个用户向他的朋友们发出的邀请的数量) * (接收到邀请的人转化为新用户的转化率)。</li><li>假设平均每个用户会向20个朋友发出邀请，而平均的转化率为10%的话，K =20*10%=2。这个结果还算是不错的效果。</li><li>当K›1时，用户群就会象滚雪球一样增大。如果K‹1的话，那么用户群到某个规模时就会停止通过自传播增长。</li></ul></li></ul><h2 id="十、杜邦分析法-财务管理方法论"><a href="#十、杜邦分析法-财务管理方法论" class="headerlink" title="十、杜邦分析法 - 财务管理方法论"></a>十、杜邦分析法 - 财务管理方法论</h2><p>将各种财务指标综合在一起来评价公司财务管理效果。即计算“用公司自己的钱赚取的利润率”/净资产收益率，拆解成三个指标相乘：</p><p>净资产收益率=销售净利率 X 总资产周转率 X 权益乘数</p><p>1）公司业务是否赚钱？</p><p>销售净利润=净利润/销售额，衡量公司业务是否赚钱。</p><p>2）公司资产运营效率如何？</p><p>总资产周转率=销售额/总资产，衡量公司资产运营效率如何。</p><p>3）公司债务负担有没有风险？</p><p>权益乘数=总资产/净资产，也叫做杠杆率，衡量公司负债经营的情况。</p><p><img src="https://pic4.zhimg.com/80/v2-d2a618a11092235b01744bf730153743_1440w.jpg" alt="img"></p><p><img src="https://pic4.zhimg.com/80/v2-fc6d7cf653395240667969627e77f0d7_1440w.jpg" alt="img"></p><h2 id="十一、基于用户生命周期的分析体系（用户画像）"><a href="#十一、基于用户生命周期的分析体系（用户画像）" class="headerlink" title="十一、基于用户生命周期的分析体系（用户画像）"></a>十一<strong>、基于用户生命周期的分析体系</strong>（用户画像）</h2><p>用户生命周期衍生于“客户生命周期”的概念。</p><p>用户从不同角度有不同的分类法：</p><p>比如从用户活跃度来看，可以分为僵尸用户、低频用户、活跃用户和深度用户</p><p>从用户对平台的价值来看，可能分法就变成了种子用户、普通用户、核心用户。</p><p>从用户价值来看，分为无效用户、潜在用户、跟进用户、成单用户。</p><p>不同的行业有不同的分类，不同的分类也有不同的运营策略。而从用户生命周期的角度来解析和管理用户，是常见的数据分析方式之一。</p><p>举例从用户活跃度来看，可能就要构建一个用户活跃度模型：</p><ul><li>流失用户：有一段时间没有再打开产品(曾经打开过产品），那么我们就视为流失用户，根据产品的属性，可以按30天，60天，90天等划分。</li><li>不活跃用户：有一段时间没有打开产品，为了和流失区分开来，需要选择无交集的时间范围。比如流失用户是60天以上没打开产品，那么不活跃则是0～60天没打开。</li><li>回流用户：有一段时间没用产品，之后突然回来再次使用，则称为回流用户。回流用户是活跃用户，且是由流失用户或不活跃用户唤回而来。</li><li>活跃用户：一段时间内打开过产品。</li><li>忠诚用户：也可以叫超级活跃用户，长期持续使用产品，比如连续四周，或者一个月内15天等</li></ul><p>用户活跃可以简化为一个最简单的公式：新增用户的数量要大于流失用户的增加量。不同业务情况需要各自衡量，怎么去构建这个模型。</p><p><img src="https://pic4.zhimg.com/80/v2-b827ff123130d09e3af9d5c6dac4e49b_1440w.jpg" alt="img"></p><h2 id="十二、SWOT"><a href="#十二、SWOT" class="headerlink" title="十二、SWOT"></a>十二、SWOT</h2><p><strong>如果外部的机会正好是你的优势，赶紧利用起来。</strong></p><p>而这个利用方法，就被称为“机会优势战略”（OS）</p><p><strong>外部的机会但是是你的劣势，你就需要改进。</strong></p><p>那么这个改进方法，就被称为“机会劣势战略”（OW）</p><p><strong>你具有优势但是外部存在威胁，那就需要时刻盯梢、保持警惕。</strong></p><p>而如何监视、监视哪些？就被称为“优势威胁战略”（ST）</p><p><strong>既是威胁又是你的劣势，请及时逃离并消除。</strong></p><p>这个消除方法，就是“威胁劣势战略”（TW）</p><hr><p>举两个简单的分析例子。</p><p><strong>个人求职案例</strong></p><p>近几年大数据/数据分析很火（O），毕业于统计学专业（S）的你可以<strong>利用自己的特长，走向风口行业，做一名数据分析师</strong>（OS）。但你发现，成为一名数据分析时并不容易，还需要懂得R语言、SQL等数据库知识，而你没有学过（W），于是你<strong>报了学习班，努力掌握数据分析技能（OW）</strong>。到了投递简历、面试的时候，你发现竞争非常激烈（T），你仔细反思了一下自己的现状：对统计学的深刻认识、精通是特长，但数据分析应用经验有些薄弱。于是，<strong>在几轮面试中，不断观察面试官反馈及时调整（ST）、扬长避短（TW）</strong>，成功收到自己满意的offer。</p><p>转化成SWOT分析模型，这个人的求职竞争力分析：</p><p><img src="https://pic4.zhimg.com/80/v2-4236165f3b5f21c4c28e566ab9add6d6_1440w.jpg?source=1940ef5c" alt="img"></p><p><strong>企业转型案例</strong></p><p>一家传统的制造业企业，面对<strong>近些年来互联网的不断冲击，眼见着竞争对手一个个都进行了信息化数字化转型，收效良好（T）</strong>，而自己虽然拥有行业领先的技术（S），和因为过硬的技术而紧密结合的一批客户、供应商，但由于过于传统的管理运作方式，效率渐渐跟不上上下游的需求（W），在进出货上有些力不从心。于是，企业决定<strong>继续开发技术优势，加深上下游的合作（OS）</strong>，同时要改进现阶段的管理模式，<strong>打探同行的信息化策略（ST）</strong>、<strong>学习他们的转型经验（WT）</strong>，自己尝试<strong>摸索适合自己的信息化模式，从而提速降本，满足上下游需求（OW）</strong>。</p><p>转化为SWOT分析模型图，为：</p><p><img src="https://pic2.zhimg.com/50/v2-94468148d36fea8ce7679f9c89315898_hd.jpg?source=1940ef5c" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/2021/09/07/git/"/>
      <url>/2021/09/07/git/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ol start="6"><li><p>版本控制系统</p><p> 中央集权型版本控制系统 —&gt; 必须有（中央）版本控制服务器</p><p> 1990s —&gt; CVS (Current Version System) / VSS (Visual Source Safe)</p><pre><code>     ---&gt; 锁定模式 ---&gt; 互斥 ---&gt; 一个文件不能被多个人同时维护</code></pre><p> 2000 —&gt; Subversion (SVN)</p><pre><code>     ---&gt; 合并模式 ---&gt; 允许多个人同时维护一个文件 ---&gt; 提交工作成果         ---&gt; 没有冲突：自动合并         ---&gt; 发生冲突：提示你手动解决</code></pre><p> 分布式版本控制系统 —&gt; 没有中央服务器存在一样可以实施版本控制</p><p> 2005 —&gt; Git —&gt; Linus</p><p> ~ Git命令</p><ol><li><p>初始化本地仓库：git init</p></li><li><p>将文件放到暂存区（缓存区）：<br> ~ git add <filename><br> ~ git add .</filename></p></li><li><p>将文件提交到仓库：git commit -m ‘…’<br> 如果是第一次使用Git进行提交，需要先配置用户名和邮箱：<br> ~ git config –global user.email ‘……’<br> ~ git config –global user.name ‘……’</p></li><li><p>查看提交日志：git log</p></li><li><p>查看版本控制状态：git status</p></li><li><p>用缓存区恢复工作区：git restore <filename></filename></p></li><li><p>用仓库恢复缓存区：git restore –staged <filename></filename></p></li><li><p>版本回退：git reset <commit-id><br> ~ –hard：让仓库、缓存区、工作区都回退到指定的版本（三者一致）<br> ~ –mixed：默认选项，让仓库、缓存区回退到指定的版本，工作区保持现状<br> ~ –soft：让仓库回退到指定的版本，缓存区和工作区保持现状</commit-id></p></li><li><p>查看过去和未来的日志：git reflog</p></li><li><p>远端仓库：<br>~ 添加：git remote add origin <url><br>~ 删除：git remote remove origin<br>~ 查看：git remote -v</url></p></li><li><p>上推（向服务器推代码）：git push -u origin master</p></li><li><p>下拉（从服务器获取代码）：git pull<br>git pull = git fetch + git merge</p></li><li><p>克隆：git clone –depth 1 <url></url></p></li><li><p>生成密钥对：ssh-keygen -t rsa -b 2048 -C “<a href="mailto:jackfrued@126.com">jackfrued@126.com</a>“</p></li><li><p>查看公钥文件：cat ~/.ssh/id_rsa.pub —&gt; 部署到服务器上<br>提示：免密访问请使用SSH地址</p></li></ol></li><li><p>代码托管平台（Git服务器）</p><p> ~ 国外：github.com<br> ~ 国内：</p><pre><code> - 码云：https://gitee.com ---&gt; 当做Git私服来使用     - coding：https://coding.net     - 行云：https://codeup.teambition.com/tour</code></pre></li></ol><p>10.远端仓库:<br>Йл/Д: git remote add origin <url><br>删除:<br>git remote remove origin<br>查看:<br>git remote -V<br>11.. 上推(向服务器推代码) : git push -u origin master<br>12. FjI (MRRSTREX1tTE) : git pull<br>    git pull = git fetch + git merge</url></p><ol start="13"><li><p>5ßk: git clone <url></url></p></li><li><p>分支操作</p><pre><code>~ 查看分支：git branch -a~ 创建分支：git branch &lt;branch-name&gt;~ 切换分支：git switch &lt;branch-name&gt; / git checkout &lt;branch-name&gt;~ 创建和切换分支：git switch -c &lt;branch-name&gt; / git checkout -b &lt;branch-name&gt;~ 合并分支：    - git switch &lt;target-branch&gt;    - git merge --no-ff &lt;branch-name&gt;~ 变基：    - git rebase &lt;target-branch&gt;    - git switch &lt;target-branch&gt;    - git merge &lt;branch-name&gt;</code></pre><p>~遇到冲突如何解决<br>1.从服务器fetch最新的代码，放到一个临时分支</p></li></ol><ul><li>git fetch origin master: temp</li></ul><p>2.查看哪里有冲突<br>git diff temp<br>3.尝试将临时分支合并到当前分支—&gt; CONFLICT<br>-<br>git merge temp<br>-合并虽然是失败的，但是有冲突的代码已经被标记了<br>取消合并: git merge –abort<br>4.解决代码冲突(找到当事人进行沟通，确定保留谁的代码)<br>5.重新提交解决冲突后的代码并上推到服务器</p><ul><li>git add <fi lename=""><br>git commit -m</fi></li><li>git push -u origin <branch-name></branch-name></li></ul><p>6.删除临时分支<br>git branch -d temp<br>7.重新发起Pull Request</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 版本控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql</title>
      <link href="/2021/08/25/mysql-bi-ji/"/>
      <url>/2021/08/25/mysql-bi-ji/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="数据库常见的概念"><a href="#数据库常见的概念" class="headerlink" title="数据库常见的概念"></a>数据库常见的概念</h2><p>DB：数据库，存储数据的容器</p><p>DBMS：数据库管理系统，又称之为数据库软件或数据库产品，用于创建或管理DB</p><p>SQl：结构化查询语言，用于和数据库通信的语言，不是某个数据库软件特有</p><h2 id="数据库存储数据的特点"><a href="#数据库存储数据的特点" class="headerlink" title="数据库存储数据的特点"></a>数据库存储数据的特点</h2><ul><li>数据存放在表中，表存放在数据库中</li><li>一个库可以有多张表，每张表有唯一的名称来标识自己</li><li>表中的列称之为<code>字段</code>，表中有1个或多个列</li><li>表中的每一行数据，称之为一条记录</li></ul><h2 id="Mysql中常用的命令"><a href="#Mysql中常用的命令" class="headerlink" title="Mysql中常用的命令"></a>Mysql中常用的命令</h2><h3 id="mysql登录命令"><a href="#mysql登录命令" class="headerlink" title="mysql登录命令"></a>mysql登录命令</h3><p><code>mysql -u username -p</code></p><h3 id="查看数据库的版本"><a href="#查看数据库的版本" class="headerlink" title="查看数据库的版本"></a>查看数据库的版本</h3><ol><li>未登录的情况<ul><li><code>mysql -version</code></li><li><code>mysql -V</code></li></ul></li><li>登录情况<ul><li><code>select version();</code></li></ul></li></ol><h3 id="显示所有数据库"><a href="#显示所有数据库" class="headerlink" title="显示所有数据库"></a>显示所有数据库</h3><p><code>show databases;</code></p><h3 id="进入指定的数据库"><a href="#进入指定的数据库" class="headerlink" title="进入指定的数据库"></a>进入指定的数据库</h3><p><code>use database_name;</code></p><h3 id="显示当前库中的所有表"><a href="#显示当前库中的所有表" class="headerlink" title="显示当前库中的所有表"></a>显示当前库中的所有表</h3><p><code>show tables;</code></p><h3 id="显示其他数据库中的所有表"><a href="#显示其他数据库中的所有表" class="headerlink" title="显示其他数据库中的所有表"></a>显示其他数据库中的所有表</h3><p><code>show tables from database_name;</code></p><h3 id="查看表的创建语句"><a href="#查看表的创建语句" class="headerlink" title="查看表的创建语句"></a>查看表的创建语句</h3><p><code>show create table table_name;</code></p><h3 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h3><p><code>desc table_name;</code></p><h3 id="查看当前所在数据库"><a href="#查看当前所在数据库" class="headerlink" title="查看当前所在数据库"></a>查看当前所在数据库</h3><p><code>select database();</code></p><h3 id="查看当前mysql支持的存储引擎"><a href="#查看当前mysql支持的存储引擎" class="headerlink" title="查看当前mysql支持的存储引擎"></a>查看当前mysql支持的存储引擎</h3><p><code>show engines;</code></p><h2 id="Mysql语法规范"><a href="#Mysql语法规范" class="headerlink" title="Mysql语法规范"></a>Mysql语法规范</h2><ol><li>不区分大小写，建议关键字大写，表名，列名小写</li><li>每条命令最好用英文分号隔开</li><li>每条命令根据需要，可以进行缩进或者换行</li><li>注释<ul><li><code>-</code>单行注释， 这里在<code>-</code>后面加上空格</li><li><code>#</code>单行注释</li><li><code>/* 这是注释内容 */</code> 多行注释</li></ul></li></ol><h2 id="SQL的语言分类"><a href="#SQL的语言分类" class="headerlink" title="SQL的语言分类"></a>SQL的语言分类</h2><ul><li>DQL（Data Query Language）：数据查询语言select相关语句</li><li>DML（Data Manipulate Language）：数据操作语言 <code>insert</code>, <code>update</code>, <code>delete</code> 语句</li><li>DDL （Data Define language）：数据定义语言 <code>create</code>,  <code>drop</code>,  <code>alter</code>语句</li><li>TCL （Transaction Control Language）：事务控制语言 <code>set autocommit=0</code>, <code>starttransation</code>, <code>savepoint</code>, <code>commit</code>, <code>rollback</code></li></ul><h2 id="建表语句"><a href="#建表语句" class="headerlink" title="建表语句"></a>建表语句</h2><pre class="line-numbers language-mysql"><code class="language-mysql">创建表create table 表名(    字段名1 类型[(宽度)] [约束条件] [comment '字段说明'],   字段名2 类型[(宽度)] [约束条件] [comment '字段说明'],   字段名3 类型[(宽度)] [约束条件] [comment '字段说明'],  [primary key (字段名)],  [foreign key (字段名) references 表名 (字段名)], )engine=innodb default charset='utf8mb4';注意:1. 在同一张表中，字段名不能相同2. 宽度和约束条件为可选参数，字段名和类型是必须的3. 最后一个字段后不能加逗号4. 类型是用来限制 字段 必须以何种数据类型来存储记录5. 类型其实也是对字段的约束(约束字段下的记录必须为XX类型)6. 类型后写的 约束条件 是在类型之外的 额外添加的约束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Mysql常见约束"><a href="#Mysql常见约束" class="headerlink" title="Mysql常见约束"></a>Mysql常见约束</h2><h3 id="not-null：标识的字段不能为空"><a href="#not-null：标识的字段不能为空" class="headerlink" title="not null：标识的字段不能为空"></a><code>not null</code>：标识的字段不能为空</h3><h3 id="primary-key：标识该字段为该表的主键，可以唯一的标识记录，插入重复的会报错"><a href="#primary-key：标识该字段为该表的主键，可以唯一的标识记录，插入重复的会报错" class="headerlink" title="primary key：标识该字段为该表的主键，可以唯一的标识记录，插入重复的会报错"></a><code>primary key</code>：标识该字段为该表的主键，可以唯一的标识记录，插入重复的会报错</h3><h3 id="foreign-key：标识的字段为外键"><a href="#foreign-key：标识的字段为外键" class="headerlink" title="foreign key：标识的字段为外键"></a><code>foreign key</code>：标识的字段为外键</h3><h3 id="unique-key：标识该字段为唯一"><a href="#unique-key：标识该字段为唯一" class="headerlink" title="unique key：标识该字段为唯一"></a><code>unique key</code>：标识该字段为唯一</h3><h3 id="default-value：为该字段设置默认值"><a href="#default-value：为该字段设置默认值" class="headerlink" title="default value：为该字段设置默认值"></a><code>default value</code>：为该字段设置默认值</h3><h3 id="auto-increment-：标识该字段的值自动增长-整数类型，而且为主键"><a href="#auto-increment-：标识该字段的值自动增长-整数类型，而且为主键" class="headerlink" title="auto_increment:：标识该字段的值自动增长(整数类型，而且为主键)"></a><code>auto_increment</code>:：标识该字段的值自动增长(整数类型，而且为主键)</h3><blockquote><p>注意：关于自动增长字段的初始值、步长可以在mysql中进行设置，比如设置初始值为1万，每次增长10。自增长列当前值存储在内存中，数据库每次重启之后，会查询当前表中自增列的最大值作为当前值，如果表数据被清空之后，数据库重启了，自增列的值将从初始值开始</p></blockquote><h2 id="DDL和DML常用操作"><a href="#DDL和DML常用操作" class="headerlink" title="DDL和DML常用操作"></a>DDL和DML常用操作</h2><pre class="line-numbers language-mysql"><code class="language-mysql">drop database if exists 旧库名; create database 新库名 default charset='utf8mb4';-- 创建表create table 表名(    字段名1 类型[(宽度)] [约束条件] [comment '字段说明'],   字段名2 类型[(宽度)] [约束条件] [comment '字段说明'],   字段名3 类型[(宽度)] [约束条件] [comment '字段说明'],  [primary key (字段名)],  [foreign key (字段名) references 表名 (字段名)], )engine=innodb default charset='utf8mb4';create table test1(a int not null comment '字段a');-- 修改表alter table 表名 add column 列名 类型 [列约束];alter table 表名 modify column 列名 新类型 [约束];或者alter table 表名 change column 列名 新列名 新类型 [约束];alter table 表名 drop column 列名;-- 插入数据insert into 表名 [(字段,字段)] values (值,值),(值,值),(值,值);insert into 表 [(字段,字段)] 数据来源select语句;-- 数据更新update 表名 [[as] 别名] set [别名.]字段 = 值,[别名.]字段 = 值 [where条件];-- 删除数据delete [别名] from 表名 [[as] 别名] [where条件];-- 删除test1表所有记录delete from test1;-- 删除test1表所有记录delete test1 from test1;-- 有别名的方式，删除test1表所有记录 delete t1 from test1 t1;-- 有别名的方式删除满足条件的记录delete t1 from test1 t1 where t1.a>100;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="select查询"><a href="#select查询" class="headerlink" title="select查询"></a>select查询</h2><pre class="line-numbers language-mysql"><code class="language-mysql">-- 基础用法select 查询的列 from 表名;select 常量值1,常量值2,常量值3;select 表达式;select 函数;select 字段1,字段2,字段3 from 表名;select 别名.字段,别名.* from 表名 [as] 别名;-- 条件查询select 列名 from 表名 where 列 运算符 值-- 模糊查询select 列名 from 表名 where 列 like pattern;-- pattern中可以包含通配符，有以下通配符: -- %:表示匹配任意一个或多个字符 -- _:表示匹配任意一个字符。-- 区间查询selec 列名 from 表名 where 列名 between 值1 and 值2;-- 存在性查询select 列名 from 表名 where 字段 in (值1,值2,值3,值4);select 列名 from 表名 where 字段 not in (值1,值2,值3,值4);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象编程</title>
      <link href="/2021/08/08/mian-xiang-dui-xiang/"/>
      <url>/2021/08/08/mian-xiang-dui-xiang/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="编程类型"><a href="#编程类型" class="headerlink" title="编程类型"></a>编程类型</h2><p>指令式编程 —&gt; 面向过程(函数)编程 —&gt; 程序比较简单的时候没有任何问题</p><p>范式编程(程序设计的方法论)：面向对象编程 / 函数式编程</p><h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><p>对象：对象是可以接收消息的实体，面向对象编程就是通过狗日对象发消息达到解决问题的目标。</p><p>对象 = 数据 + 方法  —&gt; 对象将数据和操作数据的函数从逻辑上变成了一个整体。</p><ul><li>一切皆为对象</li><li>对象都有属性和行为</li><li>每个对象都是独一无二的</li><li>对象一定属于某个类</li></ul><p>类：将共同特征（静态特征和动态特征）的对象的共同特征抽取出来之后的得到的一个抽象概念。简单的说，类是对象的蓝图（模板），有了类才能创建出这种类型的对象。</p><h2 id="面向对象编程三步走："><a href="#面向对象编程三步走：" class="headerlink" title="面向对象编程三步走："></a>面向对象编程三步走：</h2><ol><li>定义类<ul><li>数据抽象：找到和对象相关的静态特征（属性）—&gt; 找名词</li><li>行为抽象：找到和对象相关的动态特征（方法）—&gt; 找动词</li></ul></li><li>造对象</li><li>向对象发消息</li></ol><blockquote><p>注意：</p><p>类的命名使用驼峰命名法，即每个单词首字母大写</p></blockquote><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>我们在类里面写的函数，通常称之为方法，它们基本上都是发给对象的消息。<br>但是有的时候，我们的消息并不想发给对象，而是希望发给这个类（类本身也是一个对象），<br>这个时候，我们可以使用静态方法或类方法。</p><p>静态方法 - 发给类的消息 —&gt; <code>@staticmethod</code> —&gt; 装饰器<br>类方法 - 发给类的消息 —&gt; <code>@classmethod</code> —&gt; 装饰器 —&gt; 第一个参数（cls）是接收消息的类</p><h1 id="魔法方法"><a href="#魔法方法" class="headerlink" title="魔法方法"></a>魔法方法</h1><p>魔术方法（魔法方法）—&gt; 有特殊用途和意义的方法</p><ul><li><code>__init__</code> —&gt; 初始化方法，在调用构造器语法创建对象的时候会被自动调</li><li> <code>__str__</code> —&gt; 获得对象的字符串表示，在调用print函数输出对象时会被自动调用</li><li><code>__repr__</code> —&gt; 获得对象的字符串表示，把对象放到容器中调用print输出时会自动调用—&gt; representation</li><li><code>__lt__</code> —&gt; 在使用 &lt; 运算符比较两个对象大小时会自动调用</li><li><code>__slots__</code> —&gt; 如果要限制一个类的对象只能拥有某些属性，可以在类中使用__slots__魔法属性</li></ul><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承：对已有的类进行扩展创建出新的类，这个过程就叫继承。<br>提供继承信息的类叫做父类（超类、基类），得到继承信息的类称为子类（派生类）。</p><p>继承是实现代码复用的一种手段，但是千万不要滥用继承。</p><p>继承是一种is-a关系。<br>a student is a person.<br>a teacher is a person.<br>a programmer is a person.</p><p>子类直接从父类继承公共的属性和行为，再添加自己特有的属性和行为，<br>所以子类一定是比父类更强大的，任何时候都可以用子类对象去替代父类对象。</p><p>Python中的继承允许多重继承，一个类可以有一个或多个父类。<br>如果不是必须使用多重继承的场景下，请尽量使用单一继承。</p><h2 id="两个类之间可能的关系"><a href="#两个类之间可能的关系" class="headerlink" title="两个类之间可能的关系"></a>两个类之间可能的关系</h2><ul><li>is-a关系：继承 —&gt; 从一个类派生出另一个类<pre><code>a student is a person.a teacher is a person.</code></pre></li><li>has-a关系：关联 —&gt; 把一个类的对象作为另外一个类的对象的属性<pre><code>a person has an identity card.a car has an engine.</code></pre><ul><li>（普通）关联 </li><li>强关联：整体和部分的关联，聚合和合成</li></ul></li><li>use-a关系：依赖 —&gt; 一个类的对象作为另外一个类的方法的参数或返回值<pre><code>a person use a vehicle.</code></pre></li></ul><h2 id="面向对象编程的四大支柱"><a href="#面向对象编程的四大支柱" class="headerlink" title="面向对象编程的四大支柱"></a>面向对象编程的四大支柱</h2><p>面向对象编程的四大支柱：</p><ul><li>抽象（abstraction）：提取共性（定义类就是一个抽象过程，需要做数据抽象和行为抽象）。</li><li> 封装（encapsulation）：把数据和操作数据的函数从逻辑上组装成一个整体（对象）。隐藏实现细节，暴露简单的调用接口。</li><li> 继承（inheritance）：扩展已有的类创建新类，实现对已有类的代码复用</li><li> 多态（polymorphism）：给不同的对象发出同样的消息，不同的对象执行了不同的行为。 方法重写（override）：子类对父类已有的方法，重新给出自己的实现版本。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数</title>
      <link href="/2021/08/07/han-shu/"/>
      <url>/2021/08/07/han-shu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="函数定义："><a href="#函数定义：" class="headerlink" title="函数定义："></a>函数定义：</h2><p>Python中使用<code>def</code>关键字来定义函数，通过<code>return</code>关键字来返回函数的执行结果。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义函数：def是定义函数的关键字、fac是函数名，num是参数（自变量）</span><span class="token keyword">def</span> <span class="token function">fac</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""求阶乘"""</span>    result <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> n <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">*=</span> n    <span class="token comment" spellcheck="true"># 返回num的阶乘（因变量）</span>    <span class="token keyword">return</span> resultm <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'m = '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>n <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'n = '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 当需要计算阶乘的时候不用再写重复的代码而是直接调用函数fac</span><span class="token comment" spellcheck="true"># 调用函数的语法是在函数名后面跟上圆括号并传入参数</span><span class="token keyword">print</span><span class="token punctuation">(</span>fac<span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">//</span> fac<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">//</span> fac<span class="token punctuation">(</span>m <span class="token operator">-</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数的作用："><a href="#函数的作用：" class="headerlink" title="函数的作用："></a>函数的作用：</h2><p>世界级的编程大师<em>Martin Fowler</em>先生曾经说过：“<strong>代码有很多种坏味道，重复是最坏的一种！</strong>”因此函数的作用就是解决代码重复的方案之一。</p><h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><h3 id="参数的默认值"><a href="#参数的默认值" class="headerlink" title="参数的默认值"></a>参数的默认值</h3><p>如果函数中没有<code>return</code>语句，那么函数默认返回代表空值的<code>None</code>。另外，在定义函数时，函数也可以没有自变量，但是函数名后面的圆括号是必须有的。Python中还允许函数的参数拥有默认值。</p><p>带默认值的参数必须放在不带默认值的参数之后，否则将产生<code>SyntaxError</code>错误，错误消息是：<code>non-default argument follows default argument</code>，翻译成中文的意思是“没有默认值的参数放在了带默认值的参数后面”</p><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>Python语言中的函数可以通过星号表达式语法来支持可变参数。</p><p>可变参数指的是在调用函数时，可以向函数传入0个或任意多个参数。</p><p>有的时候我们并不知道函数的调用者会向该函数传入多少个参数，这个时候可变参数就可以派上用场。</p><h3 id="位置参数和关键字参数"><a href="#位置参数和关键字参数" class="headerlink" title="位置参数和关键字参数"></a>位置参数和关键字参数</h3><p>在设计函数的时候，函数的参数个数是暂时无法确定的</p><p>arguments —&gt; args —&gt; 参数</p><p>位置参数 —&gt; positional argument</p><ul><li>*args —&gt; 可变参数 —&gt; 可以接收零个或任意多个位置参数 —&gt; 将所有的位置参数打包成一个元组</li></ul><p>关键字参数 —&gt; keyword argument —&gt; 参数名=参数值</p><ul><li>**kwargs —&gt; 可以接收零个或任意多个关键字参数 —&gt; 将所有的关键字参数打包成一个字典</li></ul><p>关键字参数一定是在位置参数的后面！！！</p><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>Lambda函数 —&gt; 没有名字而且一句话就能写完的函数，唯一的表达式就是函数的返回值</p><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>函数如果直接或间接的调用了自身，这种调用称为递归调用。</p><p>不管函数是调用别的函数，还是调用自身，一定要做到快速收敛。<br>在比较有限的调用次数内能够结束，而不是无限制的调用函数。</p><p>如果一个函数（通常指递归调用的函数）不能够快速收敛，那么就很有可能产生下面的错误<br>RecursionError: maximum recursion depth exceeded<br>最终导致程序的崩溃。</p><p>阶乘的定义：<br>~ n! = n * (n - 1) * (n - 2) * … * 2 * 1<br>~ n! = n * (n - 1)!</p><p>递归函数的两个要点：</p><ol><li>递归公式（第n次跟第n-1次的关系）</li><li>收敛条件（什么时候停止递归调用）</li></ol><h2 id="函数的调用过程"><a href="#函数的调用过程" class="headerlink" title="函数的调用过程"></a>函数的调用过程</h2><img src="/Users/lidongxi/Documents/phone1000/weeks_three/课件/函数的调用过程.jpg" alt="函数的调用过程图解" style="zoom:50%;"><h2 id="Python中函数的地位"><a href="#Python中函数的地位" class="headerlink" title="Python中函数的地位"></a>Python中函数的地位</h2><p>Python中的函数是一等函数（一等公民）：</p><ol><li>函数可以作为函数的参数</li><li>函数可以作为函数的返回值</li><li>函数可以赋值给变量</li></ol><p>如果把函数作为函数的参数或者返回值，这种玩法通常称之为高阶函数。<br>通常使用高阶函数可以实现对原有函数的解耦合操作。</p><p>运算 - operate，运算符 - operator</p><h2 id="全局变量和局部变量"><a href="#全局变量和局部变量" class="headerlink" title="全局变量和局部变量"></a>全局变量和局部变量</h2><p>全局变量（没有写在任何函数里面的变量）<br>局部变量（定义在函数内部的变量）</p><p>Python程序中搜索一个变量是按照 LEGB 顺序进行搜索的</p><p>Local（局部作用域） —&gt; Embeded（嵌套作用域） —&gt; Global（全局作用域）<br>—&gt; Built-in（内置作用域） —&gt; NameError: name … not defined</p><p>global —&gt; 声明使用全局变量或者定义一个局部变量将其放到全局作用域<br>nonlocal —&gt; 声明使用嵌套作用域的变量（不使用局部变量）</p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="如何使用其他文件（模块）中定义的函数"><a href="#如何使用其他文件（模块）中定义的函数" class="headerlink" title="如何使用其他文件（模块）中定义的函数"></a>如何使用其他文件（模块）中定义的函数</h3><p>方法一：可以通过import导入模块，然后通过”模块名.函数名”的方式调用函数；<br>方法二：直接从模块中导入函数 —&gt; “from 模块 import 函数” —&gt; 直接通过函数名调用函数</p><h3 id="如何给导入的函数，模块取别名"><a href="#如何给导入的函数，模块取别名" class="headerlink" title="如何给导入的函数，模块取别名"></a>如何给导入的函数，模块取别名</h3><p>import导入函数、模块时，可以使用as关键字（alias）进行别名</p><p>做工程化项目开发时，如果项目中的代码文件非常多，我们可以使用”包”（package）来管理”模块”（module），<br>再通过模块来管理函数，包其实就是一个文件夹，而模块就是一个Python文件，通过这种方式就可以很好的解决</p><h3 id="如何解决命名冲突问题"><a href="#如何解决命名冲突问题" class="headerlink" title="如何解决命名冲突问题"></a>如何解决命名冲突问题</h3><p>大型项目团队开发中经常遇到的命名冲突的问题。</p><p>方法一：导入函数的时候对函数进行别名<br>方法二：使用完全限定名（qualified name） —&gt; [包名.]模块名.函数名</p><h2 id="Python内存管理图解"><a href="#Python内存管理图解" class="headerlink" title="Python内存管理图解"></a>Python内存管理图解</h2><img src="/Users/lidongxi/Documents/phone1000/weeks_three/课件/内存管理图.jpg" alt="内存管理" style="zoom:50%;"><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>写程序的终极原则：高内聚，低耦合 —&gt; high cohesion low coupling</p><p>设计函数最为重要的原则：单一职责原则（一个函数只做好一件事情）—&gt; 高度内聚</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>枚举</title>
      <link href="/2021/08/06/mei-ju/"/>
      <url>/2021/08/06/mei-ju/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="枚举的定义："><a href="#枚举的定义：" class="headerlink" title="枚举的定义："></a>枚举的定义：</h2><p>枚举是与多个唯一常量值绑定的一组符号名(即成员)。枚举中的成员可以进行身份比较，并且枚举也属于可迭代类型。</p><blockquote><p>注意：</p><p>枚举表示常量，因此建议枚举成员名称使用大写字母</p></blockquote><h2 id="创建Enum"><a href="#创建Enum" class="headerlink" title="创建Enum"></a>创建Enum</h2><p>枚举有<code>class</code>来创建的，当然还有其他创建方法，在此笔者就不赘述。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> enum <span class="token keyword">import</span> Enum<span class="token keyword">class</span> <span class="token class-name">Colors</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>  PINK <span class="token operator">=</span> <span class="token string">'#FFC0CB'</span>  PURPLE <span class="token operator">=</span> <span class="token string">'#800080'</span>  BLACK <span class="token operator">=</span> <span class="token string">'#000000'</span><span class="token comment" spellcheck="true"># 枚举成员的字符串表现形式</span><span class="token keyword">print</span><span class="token punctuation">(</span>Colors<span class="token punctuation">.</span>PINK<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Color.PINK</span><span class="token comment" spellcheck="true"># 枚举成员的 类型 就是它所属于的枚举</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>Colors<span class="token punctuation">.</span>PINK<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;enum 'Colors'></span><span class="token comment" spellcheck="true"># Enum 成员包含 name 属性</span><span class="token keyword">print</span><span class="token punctuation">(</span>Colors<span class="token punctuation">.</span>PINK<span class="token punctuation">,</span>name<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># PINK</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注解：</p><p>Enum 成员值</p><p>成员值可以使<code>int</code>,<code>str</code>等。若无需设定确切值，<code>auto</code>实例会自动为成员分配合适的值。</p><p>命名法</p><ul><li>类Color 是枚举(enum)</li><li>Color.PINK，Color.PURPLE, Color.BLACK  等属性是 枚举成员(enum成员)，也是常量</li><li>枚举成员具有 名称和值（Color.PINK 的名称是 PINK，值是 #FFC0CB）</li></ul><p>虽然Enum<code>class</code>语法创建，但是Enum并不是常规的Python类。</p></blockquote><h2 id="枚举的遍历"><a href="#枚举的遍历" class="headerlink" title="枚举的遍历"></a>枚举的遍历</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> enum <span class="token keyword">import</span> Enum<span class="token keyword">class</span> <span class="token class-name">Colors</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>    PINK <span class="token operator">=</span> <span class="token string">'#FFC0CB'</span>    PURPLE <span class="token operator">=</span> <span class="token string">'#800080'</span>    BLACK <span class="token operator">=</span> <span class="token string">'#000000'</span>    <span class="token keyword">for</span> color <span class="token keyword">in</span> Colors<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Colors.PINK</span><span class="token comment" spellcheck="true"># Colors.PURPLE</span><span class="token comment" spellcheck="true"># Color.BLACK</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><p>枚举成员可哈希，可用于字典和集合</p></blockquote><h2 id="枚举成员及其属性的访问"><a href="#枚举成员及其属性的访问" class="headerlink" title="枚举成员及其属性的访问"></a>枚举成员及其属性的访问</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 使用name访问枚举成员</span><span class="token keyword">print</span><span class="token punctuation">(</span>Color<span class="token punctuation">[</span><span class="token string">'PINK'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Color.PINK</span><span class="token comment" spellcheck="true"># 可访问枚举成员的name,value</span><span class="token keyword">print</span><span class="token punctuation">(</span>Color<span class="token punctuation">[</span><span class="token string">'PINK'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># PINK</span><span class="token keyword">print</span><span class="token punctuation">(</span>Color<span class="token punctuation">[</span><span class="token string">'PINK'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># #FFC0CB</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="重复的枚举成员和值"><a href="#重复的枚举成员和值" class="headerlink" title="重复的枚举成员和值"></a>重复的枚举成员和值</h2><p>两个枚举成员的名称不能相同</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span>  <span class="token class-name">Color</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>    PINK <span class="token operator">=</span> <span class="token string">'#FFC0CB'</span>    PINK <span class="token operator">=</span> <span class="token string">'#DFC8BB'</span>    <span class="token triple-quoted-string string">"""Traceback (most recent call last):...TypeError: Attempted to reuse key: 'PINK'"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两个枚举成员的值可以相同。如果先定义成员A再定义成员B且它们的值相同，则B是A的别名。按值查找A和B的值返回的是A。按名称查找B，返回的也是A：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span>  <span class="token class-name">Color</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>    PINK <span class="token operator">=</span> <span class="token string">'#FFC0CB'</span>    RED <span class="token operator">=</span> <span class="token string">'#FFC0CB'</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>PINK<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Color.PINK</span><span class="token keyword">print</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>RED<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Color.PINK</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再谈字符串</title>
      <link href="/2021/08/01/zi-fu-chuan/"/>
      <url>/2021/08/01/zi-fu-chuan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="再谈字符串"><a href="#再谈字符串" class="headerlink" title="再谈字符串"></a>再谈字符串</h3><p><strong>字符串</strong>，即把<strong>字符按照一定的顺序串起来组成一个有限的序列</strong>。</p><p>Python中，我们使用<code>''</code>或者<code>""</code>包围起来，就可以表示一个字符串。字符串中的字符可以使特殊字符，英文字符，中文字符，希腊字母，Emoji字符等</p><pre class="line-numbers language-python"><code class="language-python">character_name <span class="token operator">=</span> <span class="token string">'DongxiLi'</span>character_name2 <span class="token operator">=</span> <span class="token string">'李东西'</span><span class="token comment" spellcheck="true"># 使用三引号可以对字符串进行折行，而折行的样式就是输出的样式</span>character_name <span class="token operator">=</span> <span class="token triple-quoted-string string">'''DongxiLi'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="转义字符和原始字符串"><a href="#转义字符和原始字符串" class="headerlink" title="转义字符和原始字符串"></a>转义字符和原始字符串</h3><p>可以在字符串中使用<code>\</code>（反斜杠）来表示转义，也就是说<code>\</code>后面的字符不再是它原来的意义，例如：<code>\n</code>不是代表反斜杠和字符<code>n</code>，而是表示换行；<code>\t</code>也不是代表反斜杠和字符<code>t</code>，而是表示制表符。所以如果字符串本身又包含了<code>'</code>、<code>"</code>、<code>\</code>这些特殊的字符，必须要通过<code>\</code>进行转义处理。例如要输出一个带单引号或反斜杠的字符串，需要用如下所示的方法。</p><pre class="line-numbers language-pyth"><code class="language-pyth">s = '\'hello, world'print(s)s2 = '\\hello, world\\'print(s2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Python字符串中可以用<code>r</code>或者<code>R</code>开头，这种字符串被称之为原始字符串，即字符串中的每一个字符都是它本来的含义，不存在转义。例如，在字符串<code>'hello\n'</code>中，<code>\n</code>表示换行；而在<code>r'hello\n'</code>中，<code>\n</code>不再表示换行，就是反斜杠和字符<code>n</code>。大家可以运行下面的代码，看看会输出什么。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 字符串s中的\t是制表符,\n是换行符</span>s <span class="token operator">=</span> <span class="token string">'\time up \now'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 字符串s2中没有转义字符,每个字符都是原始含义</span>s2 <span class="token operator">=</span> r<span class="token string">'\time up \now'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串的运算"><a href="#字符串的运算" class="headerlink" title="字符串的运算"></a>字符串的运算</h3><h4 id="字符串的拼接和重复"><a href="#字符串的拼接和重复" class="headerlink" title="字符串的拼接和重复"></a>字符串的拼接和重复</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 字符串的拼接和重复</span>s <span class="token operator">=</span> <span class="token string">'李'</span> <span class="token operator">+</span> <span class="token string">'东西'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 李东西</span>s2 <span class="token operator">=</span> <span class="token string">'呵呵'</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 呵呵呵呵呵呵</span>s <span class="token operator">+=</span> s2  <span class="token comment" spellcheck="true"># s = s + s2</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 李东西呵呵呵呵呵呵</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><p>字符串在计算机内存中也是以二进制形式存在的，那么字符串的大小比较比的是每个字符对应的编码的大小。例如<code>A</code>的编码是<code>65</code>， 而<code>a</code>的编码是<code>97</code>，所以<code>'A' &lt; 'a'</code>的结果相当于就是<code>65 &lt; 97</code>的结果，很显然是<code>True</code>；而<code>'boy' &lt; 'bad'</code>，因为第一个字符都是<code>'b'</code>比不出大小，所以实际比较的是第二个字符的大小，显然<code>'o' &lt; 'a'</code>的结果是<code>False</code>，所以<code>'boy' &lt; 'bad'</code>的结果也是<code>False</code>。如果不清楚两个字符对应的编码到底是多少，可以使用<code>ord</code>函数来获得，例如<code>ord('A')</code>的值是<code>65</code></p><pre class="line-numbers language-python"><code class="language-python">s1 <span class="token operator">=</span> <span class="token string">'a whole new world'</span>s2 <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">,</span> s1 <span class="token operator">&lt;</span> s2<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># False True</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2 <span class="token operator">==</span> <span class="token string">'hello world'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2 <span class="token operator">==</span> <span class="token string">'Hello world'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2 <span class="token operator">!=</span> <span class="token string">'Hello world'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><p>字符串比较运算符比较的事字符串的内容</p></blockquote><h4 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h4><p><code>is</code>运算符(身份运算符)， 如果用<code>is</code>来比较两个字符串，它比价的是两个变量对应的字符串是否在内存中相同的位置(内存地址)。</p><pre class="line-numbers language-python"><code class="language-python">s1 <span class="token operator">=</span> <span class="token string">'hello world'</span>s2 <span class="token operator">=</span> <span class="token string">'hello world'</span>s3 <span class="token operator">=</span> s2<span class="token comment" spellcheck="true"># 比较字符串的内容</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">,</span> s2 <span class="token operator">==</span> s3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True True</span><span class="token comment" spellcheck="true"># 比较字符串的内存地址</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1 <span class="token keyword">is</span> s2<span class="token punctuation">,</span> s2 <span class="token keyword">is</span> s3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False True</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 140422212438512 140422213227888 140422213227888</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>提示：</p><p>Python中可以用<code>id</code>来查看变量的内存地址</p></blockquote><h4 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h4><p>Python中可以用<code>in</code>和<code>not in</code>判断一个字符串是否存在内外一个字符或者字符串，<code>in</code>和<code>not in</code>运损通常称之为成员运算，会产生布尔值<code>True</code>或者<code>False</code></p><pre class="line-numbers language-python"><code class="language-python">s1 <span class="token operator">=</span> <span class="token string">'helo world'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'wo'</span> <span class="token keyword">in</span> s1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span>s2 <span class="token operator">=</span> <span class="token string">'googbye'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2 <span class="token keyword">in</span> s1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取字符串的长度"><a href="#获取字符串的长度" class="headerlink" title="获取字符串的长度"></a>获取字符串的长度</h4><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'DongxiLi'</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="索引和切片"><a href="#索引和切片" class="headerlink" title="索引和切片"></a>索引和切片</h4><p>通过索引可以从字符串中取出某个字符，运算符是<code>[n]</code> 这里的<code>0 &lt;= n &lt; N</code>，这里的<code>N</code>指的是字符串的长度；当然这里的<code>n</code>也可以<code>-N &lt;= n &lt;0</code>，当<code>n</code>负数是通常称之为负向索引</p><p><strong>字符串是不可变类型</strong>， 所以<strong>不能通过索引修改字符串中的字符</strong></p><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'abc123456'</span>N <span class="token operator">=</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取第一个字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token operator">-</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># a a</span><span class="token comment" spellcheck="true"># 获取最后一个字符</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>N<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 6 6</span><span class="token comment" spellcheck="true"># 获取字符c</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># c c</span><span class="token comment" spellcheck="true"># 获取字符3</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><p>进行索引操作时一定要注意索引的范围，不然会发生索引越界，引发<code>IndexError</code>异常，错误提示信息为：<code>string index out of range</code>（字符串索引超出范围</p></blockquote><p>如果要字符串中取出多个字符，则可以通过切片，运算符是<code>[i:j:k]</code>其中<code>i</code>是开始索引，<code>j</code>是结束索引(取不到j),<code>k</code>是步长，默认步长为1，表示从前向后获取相邻字符的连续切片，所以<code>:k</code>部分可以省略。    </p><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'abc123456'</span><span class="token comment" spellcheck="true"># i=2, j=5, k=1 的正向切片</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># c12</span><span class="token comment" spellcheck="true"># i=-7, j=-4, k=1 的正向切片</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># c12</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># c123456</span><span class="token comment" spellcheck="true"># i=-7, j=9, k=1的正向切片操作</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># c123456</span><span class="token comment" spellcheck="true"># i=2, j=9, k=2的正向切片操作</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># c246</span><span class="token comment" spellcheck="true"># i=-7, j=9, k=2的正向切片操作</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># c246</span><span class="token comment" spellcheck="true"># i=7, j=1, k=-1的负向切片操作</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 54321c</span><span class="token comment" spellcheck="true"># i=-2, j=-8, k=-1的负向切片操作</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 54321c</span><span class="token comment" spellcheck="true"># i=7, j=-10, k=-1的负向切片操作</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 54321cba</span><span class="token comment" spellcheck="true"># i=-1, j=1, k=-1的负向切片操作</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 654321c</span><span class="token comment" spellcheck="true"># i=-1, j=-10, k=-1的负向切片</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 654321cba</span><span class="token comment" spellcheck="true"># i=-1, j=-10, k=-2的负向切片</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 642ca</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="遍历字符串"><a href="#遍历字符串" class="headerlink" title="遍历字符串"></a>遍历字符串</h4><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'DongxiLi'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> ch <span class="token keyword">in</span> name<span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串的方法"><a href="#字符串的方法" class="headerlink" title="字符串的方法"></a>字符串的方法</h3><p>Python中，我们可以通过字符串类型自带的方法对字符串进行操作和处理，对于一个字符串类型的变量，我们可以用<code>变量名.方法名()</code>的方式来调用它的方法。</p><h4 id="大小写相关操作"><a href="#大小写相关操作" class="headerlink" title="大小写相关操作"></a>大小写相关操作</h4><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'dong xi li'</span><span class="token comment" spellcheck="true"># 使用capitalize方法获得字符串首字母大写后的字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Dong xi li</span><span class="token comment" spellcheck="true"># 使用title方法获得字符串每个单词首字母大写后的字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#Dong Xi Li</span><span class="token comment" spellcheck="true"># 使用upper方法获得字符串大写后的字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># DONG XI LI</span>name2 <span class="token operator">=</span> ’DONG XI LI‘<span class="token comment" spellcheck="true"># 使用lower方法获得字符串小写后的字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>lower<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 'dong xi li'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查找操作"><a href="#查找操作" class="headerlink" title="查找操作"></a>查找操作</h4><p>如果想在一个字符串中从前往后查找有没有另外一个字符串，可以使用<code>find</code>或者<code>index</code>方法</p><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'hello, world!'</span><span class="token comment" spellcheck="true"># find方法从字符串中查找另外一个字符串的所在位置</span><span class="token comment" spellcheck="true"># 找到了就放回字符串中另一个字符串字符的索引</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'or'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 8</span><span class="token comment" spellcheck="true"># 找不到返回-1</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'DongxiLi'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># -1</span><span class="token comment" spellcheck="true"># index方法与find方法类似</span><span class="token comment" spellcheck="true"># 找到了返回字符串中另一个字符串首字符的索引</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>inex<span class="token punctuation">(</span><span class="token string">'or'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 找不到引发异常</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'DongxiLi'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ValueError:substring not found</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在使用<code>find</code>和<code>index</code>方法时还可以通过方法的参数来指定查找的范围，即可以指定开始的索引。<code>find</code>和<code>index</code>方法还有逆向查找的版本。分别是<code>rdind</code>和<code>index</code>。</p><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token comment" spellcheck="true"># 从前向后查找o出现的位置(相当于第一出现)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 4</span><span class="token comment" spellcheck="true"># 从索引为5的位置开始查找o出现的位置</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 7</span><span class="token comment" spellcheck="true"># 从后向前查找字符o出现的位置(相当于最后一次出现)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以通过字符串的<code>startswith</code>，<code>endswith</code>来判断字符串是否以某个字符开头或者结尾；也可以用<code>is</code>开头的方法来判断字符串的特征。</p><pre class="line-numbers language-python"><code class="language-python">s1 <span class="token operator">=</span> <span class="token string">'hello, world'</span><span class="token comment" spellcheck="true"># startwith方法检查字符串是否以指定字符串开头，返回bool</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'H'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'he'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span><span class="token comment" spellcheck="true"># endswith方法检查字符串是否以指定字符串结尾，返回bool</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span>s2 <span class="token operator">=</span> <span class="token string">'abc123'</span><span class="token comment" spellcheck="true"># isdigit方法检查字符串是否有数字构成，返回bool</span><span class="token keyword">print</span><span class="token punctuation">(</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span><span class="token comment" spellcheck="true"># isalpha方法检查字符串是否由字母构成，返回bool</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span><span class="token comment" spellcheck="true"># isalnum方法检查字符串是否以数字和字母构成，返回bool</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h4><p>Python中字符串类型可以通过<code>center</code>,<code>ljust</code>,<code>rjust</code>方法做居中，左对齐和右对齐的处理。</p><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'hello, world'</span><span class="token comment" spellcheck="true"># center方法以宽度20将字符串居中并在两侧填充*</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ****hello world*****</span><span class="token comment" spellcheck="true"># rjust方法以宽度为20将字符串右对齐并在左侧填充-  </span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ---------hello world</span><span class="token comment" spellcheck="true"># ljust方法以宽度为20将字符串左对齐并在右侧填充^  </span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'^'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># hello world^^^^^^^^^         </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果需要进一步控制格式化语法中变量值的形式，可以参照下面的表格来进行字符串格式化操作。</p><table><thead><tr><th>变量值</th><th>占位符</th><th>格式化结果</th><th>说明</th></tr></thead><tbody><tr><td><code>3.1415926</code></td><td><code>{:.2f}</code></td><td><code>'3.14'</code></td><td>保留小数点后两位</td></tr><tr><td><code>3.1415926</code></td><td><code>{:+.2f}</code></td><td><code>'+3.14'</code></td><td>带符号保留小数点后两位</td></tr><tr><td><code>-1</code></td><td><code>{:+.2f}</code></td><td><code>'-1.00'</code></td><td>带符号保留小数点后两位</td></tr><tr><td><code>3.1415926</code></td><td><code>{:.0f}</code></td><td><code>'3'</code></td><td>不带小数</td></tr><tr><td><code>123</code></td><td><code>{:0&gt;10d}</code></td><td><code>0000000123</code></td><td>左边补<code>0</code>，补够10位</td></tr><tr><td><code>123</code></td><td><code>{:x&lt;10d}</code></td><td><code>123xxxxxxx</code></td><td>右边补<code>x</code> ，补够10位</td></tr><tr><td><code>123</code></td><td><code>{:&gt;10d}</code></td><td><code>'       123'</code></td><td>左边补空格，补够10位</td></tr><tr><td><code>123</code></td><td><code>{:&lt;10d}</code></td><td><code>'123       '</code></td><td>右边补空格，补够10位</td></tr><tr><td><code>123456789</code></td><td><code>{:,}</code></td><td><code>'123,456,789'</code></td><td>逗号分隔格式</td></tr><tr><td><code>0.123</code></td><td><code>{:.2%}</code></td><td><code>'12.30%'</code></td><td>百分比格式</td></tr><tr><td><code>123456789</code></td><td><code>{:.2e}</code></td><td><code>'1.23e+08'</code></td><td>科学计数法格式</td></tr></tbody></table><h4 id="修剪操作"><a href="#修剪操作" class="headerlink" title="修剪操作"></a>修剪操作</h4><p>字符串的<code>strip</code>方法可以帮助我们将原字符串修剪掉左右两端的空格之后的字符串。这个方法非常有实用价值，通常用来将用户输入中因为不小心键入的头尾空格去掉，<code>strip</code>方法还有<code>lstrip</code>和<code>rstrip</code>两个版本。</p><pre class="line-numbers language-python"><code class="language-python">​```Pythons <span class="token operator">=</span> <span class="token string">'   jackfrued@126.com  \t\r\n'</span><span class="token comment" spellcheck="true"># strip方法获得字符串修剪左右两侧空格之后的字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># jackfrued@126.com</span>​```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>元组</title>
      <link href="/2021/08/01/chang-yong-shu-ju-jie-gou-zhi-yuan-zu/"/>
      <url>/2021/08/01/chang-yong-shu-ju-jie-gou-zhi-yuan-zu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="元组的定义和使用"><a href="#元组的定义和使用" class="headerlink" title="元组的定义和使用"></a>元组的定义和使用</h3><p>Python中元组是把多个元素按照一定的顺序构成的序列。元组不同于列表的是，元组是不可变类型。而不可变类型就说明，元组一旦被定义，元组里面的元素就不能被修改。定义元组可以使用<strong>字面量</strong>语法<code>()</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个三元组</span>character_names <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'徐晓'</span>， <span class="token string">'陈芝报'</span><span class="token punctuation">,</span> <span class="token string">'褚禄山'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义一个四元组</span>info <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'徐晓'</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">'北凉'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 元组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>列表</title>
      <link href="/2021/07/31/chang-yong-shu-ju-jie-gou-zhi-lie-biao/"/>
      <url>/2021/07/31/chang-yong-shu-ju-jie-gou-zhi-lie-biao/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="列表的定义和使用"><a href="#列表的定义和使用" class="headerlink" title="列表的定义和使用"></a>列表的定义和使用</h3><p>Python中，<strong>列表是由一系列元素按特定顺序构成的数据序列</strong>。列表可以<strong>可以保存多个数据</strong>，并且这些数据可以<strong>重复</strong>，以及合一存储多种数据类型(但是一般不建议这么做)。</p><ol><li>通过字面量<code>[]</code>语法来定义列表，列表中的元素使用英文状态下的逗号(,)进行分隔<pre class="line-numbers language-python"><code class="language-python">nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'徐凤年'</span>， <span class="token string">'姜似'</span>， <span class="token string">'裴南苇'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>通过Python内置的<code>list</code>函数姜其他序列编程列表。准确的来说<code>list</code>并不是一个函数，而是创建对象的构造器<br>```python<br>nums = list(range(1, 10))<br>print(nums)  # [1, 2, 3, 4, 5, 6, 7, 8, 9]</li></ol><p>ch = list(‘hello’)<br>print(ch)  # [‘h’, ‘e’, ‘l’, ‘l’, ‘o’]</p><pre><code>3. 通过列表推导式(列表生成式)生成列表```pythonnums = [i ** 2 for i in range(1, 9)]print(nums)  # [1, 4, 9, 16, 25, 36, 49, 64, 81]</code></pre><blockquote><p>注意：<br> 列表是一种可变得数据类型，也即说明列表可以添加元素，删除元素，更新元素</p></blockquote><h4 id="列表的运算符"><a href="#列表的运算符" class="headerlink" title="列表的运算符"></a>列表的运算符</h4><pre class="line-numbers language-python"><code class="language-python">character_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'李淳罡'</span><span class="token punctuation">,</span> <span class="token string">'剑九黄'</span><span class="token punctuation">,</span> <span class="token string">'贾嘉佳'</span><span class="token punctuation">]</span>character_names2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'吴六鼎'</span><span class="token punctuation">,</span> <span class="token string">'温华'</span><span class="token punctuation">,</span> <span class="token string">'轩辕青锋'</span><span class="token punctuation">,</span> <span class="token string">'鱼幼薇'</span><span class="token punctuation">,</span> <span class="token string">'王初冬'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 列表的拼接</span>character_names3 <span class="token operator">=</span> character_names <span class="token operator">+</span> character_names2<span class="token keyword">print</span><span class="token punctuation">(</span>character_names3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['李淳罡', '剑九黄', '贾嘉佳', '吴六鼎', '温华', '轩辕青锋', '鱼幼薇', '王初冬']</span>    character_names<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>character_names2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>character_names<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['李淳罡', '剑九黄', '贾嘉佳', '吴六鼎', '温华', '轩辕青锋', '鱼幼薇', '王初冬']</span>    <span class="token comment" spellcheck="true"># 列表的重复</span>names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'李东西'</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['李东西','李东西', '李东西']</span>    <span class="token comment" spellcheck="true"># 列表的成员运算</span><span class="token comment" spellcheck="true"># character_names3 = # ['李淳罡', '剑九黄', '贾嘉佳', '吴六鼎', '温华', '轩辕青锋', '鱼幼薇', '王初冬']</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'徐凤年'</span> <span class="token keyword">in</span> character_names3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'徐凤年'</span> <span class="token operator">not</span> <span class="token keyword">in</span> character_names3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span>    <span class="token comment" spellcheck="true"># 获取列表的长度(元素个数)</span>size <span class="token operator">=</span> len<span class="token punctuation">(</span>character_names3<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 8</span>    <span class="token comment" spellcheck="true"># 列表的索引</span><span class="token keyword">print</span><span class="token punctuation">(</span>character_names3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> character_names3<span class="token punctuation">[</span><span class="token operator">-</span>size<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 李淳罡 李淳罡</span><span class="token keyword">print</span><span class="token punctuation">(</span>character_names3<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 王初冬</span><span class="token keyword">print</span><span class="token punctuation">(</span>character_names3<span class="token punctuation">[</span>size<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> character_names3<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 王初冬 王初冬</span>    <span class="token comment" spellcheck="true"># 列表的索引</span><span class="token keyword">print</span><span class="token punctuation">(</span>character_names3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['剑九黄', '贾嘉佳', '吴六鼎', '温华', '轩辕青锋']</span><span class="token keyword">print</span><span class="token punctuation">(</span>character_names3<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['剑九黄', '贾嘉佳', '吴六鼎', '温华', '轩辕青锋']</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>character_names3<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['王初冬', '鱼幼薇', '轩辕青锋', '温华', '吴六鼎', '贾嘉佳', '剑九黄', '李淳罡']</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>character_names3<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['李淳罡', '贾嘉佳', '温华', '鱼幼薇']</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>character_names3<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['王初冬', '轩辕青锋', '吴六鼎', '剑九黄']</span>    <span class="token comment" spellcheck="true"># 列表的比较运算</span>items1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>items2 <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 两个列表比较相等性比的是对应索引位置上的元素是否相等</span><span class="token keyword">print</span><span class="token punctuation">(</span>items1 <span class="token operator">==</span> items2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span>items3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 两个列表比较大小比的是对应索引位置上的元素的大小</span><span class="token keyword">print</span><span class="token punctuation">(</span>items1 <span class="token operator">&lt;=</span> items3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：<br> 由于列表是可变类型，所以通过索引操作既可以获取列表中的元素，也可以更新列表中的元素。对列表做索引操作一样要注意索引越界的问题，对于有<code>N</code>个元素的列表，正向索引的范围是<code>0</code>到<code>N-1</code>，负向索引的范围是<code>-1</code>到<code>-N</code>，如果超出这个范围，将引发<code>IndexError</code>异常，错误信息为：<code>list index out of range</code>。</p></blockquote><h4 id="列表元素的遍历"><a href="#列表元素的遍历" class="headerlink" title="列表元素的遍历"></a>列表元素的遍历</h4><ul><li>通过’for‘循环遍历<br>```python<br>character_names = [‘李淳罡’, ‘剑九黄’, ‘贾嘉佳’, ‘吴六鼎’, ‘温华’, ‘轩辕青锋’, ‘鱼幼薇’, ‘王初冬’]</li></ul><p>for name in character_names:<br>    print(name)</p><p>for index in range(len(character_names)):<br>print(character_names[index])</p><pre><code>### 列表的方法#### 添加元素和删除元素```pythoncharacter_names = ['姜似', '鱼幼薇', '南宫仆射']   # 使用append方法在列表末尾添加元素character_names.append('红薯')print(character_names)  # ['姜似', '鱼幼薇', '南宫仆射', '红薯']   # 使用insetr方法在列表指定索引位置插入元素character_names.insert(1, '洛阳')print(character_names)  # ['姜似', '洛阳', '鱼幼薇', '南宫仆射', '红薯']   # 删除元素character_names.remove('红薯')print(character_names)  # ['姜似', '洛阳', '鱼幼薇', '南宫仆射']   # 删除指定索引位置的元素# 默认删除列表最后一个元素# pop方法会返回删除的元素character_names.pop(2)  print(character_names)  # ['姜似', '洛阳', '南宫仆射']   # 删除列表末尾元素character_names.pop()   # 清空列表中的元素character_names.clear()print(character_names)  # []</code></pre><blockquote><p>注意：<br> 在使用<code>remove</code>方法删除元素时，如果要删除的元素并不在列表中，会引<code>ValueError</code>异常，错误消息是：<code>list.remove(x): x not in list</code>。在使用<code>pop</code>方法删除元素时，如果索引的值超出了范围，会引发<code>IndexError</code>异常，错误消息是：<code>pop index out of range</code>。</p></blockquote><pre class="line-numbers language-python"><code class="language-python">character_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'姜似'</span><span class="token punctuation">,</span> <span class="token string">'鱼幼薇'</span><span class="token punctuation">,</span> <span class="token string">'南宫仆射'</span><span class="token punctuation">]</span><span class="token keyword">del</span> character_names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>character_names<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['姜似', '南宫仆射']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>从列表中删除元素其实还有一种方式，就是使用Python中的<code>del</code>关键字后面跟要删除的元素，这种做法跟使用<code>pop</code>方法指定索引删除元素没有实质性的区别，但后者会返回删除的元素，前者在性能上略优（<code>del</code>对应字节码指令是<code>DELETE_SUBSCR</code>，而<code>pop</code>对应的字节码指令是<code>CALL_METHOD</code>和<code>POP_TOP</code>）。</p></blockquote><h4 id="元素排序和反转列表的sort操作可以实现列表元素的排序，而reversre操作可以实现元素的反转"><a href="#元素排序和反转列表的sort操作可以实现列表元素的排序，而reversre操作可以实现元素的反转" class="headerlink" title="元素排序和反转列表的sort操作可以实现列表元素的排序，而reversre操作可以实现元素的反转"></a>元素排序和反转列表的<code>sort</code>操作可以实现列表元素的排序，而<code>reversre</code>操作可以实现元素的反转</h4><pre class="line-numbers language-python"><code class="language-python">character_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'姜似'</span><span class="token punctuation">,</span> <span class="token string">'鱼幼薇'</span><span class="token punctuation">,</span> <span class="token string">'南宫仆射'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 排序,sort方法没有返回值，是在原数组上面操作</span>character_names<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>character<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['南宫仆射', '姜似', '鱼幼薇']</span><span class="token comment" spellcheck="true"># 反转</span>character_names<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>character_names<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['鱼幼薇', '姜似', '南宫仆射'] </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="嵌套的列表"><a href="#嵌套的列表" class="headerlink" title="嵌套的列表"></a>嵌套的列表</h3><p>如果列表中的元素又是列表，那么可以说这是嵌套的列表。嵌套的列表可以用来表示数学上的矩阵，表格。例如：我们想保存5个学生3门课程的成绩，可以定义一个保存5个元素的列表保存5个学生的信息，而每个列表元素又是3个元素构成的列表，分别代表3门课程的成绩。但是，一定要注意下面的代码是有问题的</p><pre class="line-numbers language-python"><code class="language-python">scores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token keyword">print</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>看上去我们好像创建了一个<code>5 * 3</code>的嵌套列表，但实际上当我们录入第一个学生的第一门成绩后，你就会发现问题来了，我们看看下面代码的输出。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 嵌套的列表需要多次索引操作才能获取元素</span>scores<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">95</span><span class="token keyword">print</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [[95, 0, 0], [95, 0, 0], [95, 0, 0], [95, 0, 0], [95, 0, 0]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们不去过多的解释为什么会出现这样的问题，如果想深入研究这个问题，可以通过<a href="http://www.pythontutor.com/visualize.html">Python Tutor</a>网站的可视化代码执行功能，看看创建列表时计算机内存中发生了怎样的变化，下面的图就是在这个网站上生成的。建议大家不去纠结这个问题，现阶段只需要记住不能用<code>[[0] * 3] * 5]</code>这种方式来创建嵌套列表就行了。那么创建嵌套列表的正确做法是什么呢，下面的代码会给你答案。</p><pre class="line-numbers language-python"><code class="language-python">scores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span>scores<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">95</span><span class="token keyword">print</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [[95, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 列表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python内置数据类型</title>
      <link href="/2021/07/21/python-cai-niao-bi-jing-zhi-lu-er/"/>
      <url>/2021/07/21/python-cai-niao-bi-jing-zhi-lu-er/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="1-Python内置并且常见的数据类型"><a href="#1-Python内置并且常见的数据类型" class="headerlink" title="1. Python内置并且常见的数据类型:"></a>1. Python<strong>内置</strong>并且常见的<strong>数据类型</strong>:</h3><ul><li><p>整型(int)：</p><ul><li>Python中不仅仅有我们生活中常见<strong>自然数</strong>，它和任何一门编程语言一样可以处理<strong>任意大小</strong>的整数</li><li>二进制：</li><li>八进制</li><li>十进制</li><li>十六进制</li></ul></li><li><p>浮点型(float)： 浮点型通俗来说就是我们熟知的小数；这里包括了一切负数，一切整数</p></li><li><p>字符串型(str)：字符串是用<strong>单引号(‘hello’)<strong>或者</strong>双引号（”hello”）</strong>引起来的任意文本，通常字符串里面的内容表示就是表面的那么简单，你看到是什么样就是什么样，当然也有特例存在，那就是转义字符</p>  <img src="files(二)\1.png" align="left" style="zoom:80%;"><p>  <strong>注意</strong>：python中说的空字符串并非“    ”里面是空格，而是””，也即是在引号里面什么都没有称之为空字符串</p></li><li><p>布尔型(bool)：布尔值<strong>只有</strong>True，False两种值</p></li><li><p>自定义类型：用户根据自己的需求定义数数据类型</p></li></ul><h3 id="2-变量"><a href="#2-变量" class="headerlink" title="2. 变量"></a>2. 变量</h3><ol><li><p>定义：一般我们说的变量是用来方便<strong>存储数据的载体</strong>，而之所以称其为变量是因为<strong>变量的值可以被读取和修改</strong>。</p></li><li><p>对于变量我们一般会为其取一个优雅而漂亮的名字，在为变量命名的时候我们往往会严格遵守一些规则:</p><ul><li><p>变量名由<strong>字母</strong>(Unicode字符)， <strong>数字</strong>和<strong>下划线</strong>构成。切记，数字不能作为变量名的开头(如果不想造成不必要的麻烦，我在这建议都用英文字母来为变量命名)</p>  <img src="files(二)\2.png" align="left" style="zoom:80%;"></li><li><p><strong>大小写敏感</strong>，即大写变量和小写变量属于不同变量</p><img src="\files(二)\3.png" aligin="left" style="zoom:80%;"></li><li><p>避免与Python语言的关键字<strong>（有特殊含义的单词）和</strong>保留字<strong>（如函数、模块等的名字）</strong>发生重名的冲突。</p><p>  建议:</p><ul><li>变量名通常使用小写英文字母，多个单词用下划线进行连接</li><li>下划线开头的变量通常是受保护的</li><li>私有变量用两个下划线开头(如没有特殊情况请不要以下划线开头)</li><li>在命名是最后做到<strong>见名知意</strong></li></ul>  <img src="\files(二)\4.png" align="left" style="zoom:80%;">  </li><li><p><strong>tips</strong>:  </p><ol><li>在Python中如果循环变量用不到，则可以用 **_ **表示</li></ol>  <img src="D:\千锋培训\知乎文章\files(二)\5.png" align="left" style="zoom:80%;">  <ol start="2"><li>在Python中，给一个变量赋值并<strong>不需要申明数据的类型</strong>，Python会自动识别所给的数据类型 <img src="D:\千锋培训\知乎文章\files(二)\6.png" glign="left" style="zoom:80%;"></li></ol></li></ul></li></ol><h3 id="3-Python三大结构"><a href="#3-Python三大结构" class="headerlink" title="3. Python三大结构"></a>3. Python三大结构</h3><ul><li>顺序：语句从上到下的执行</li><li>分支：根据不同的情况，走对应的分支，执行不同的代码</li><li>循环：重复运行某一段代码块，直到满足某一个条件才会结束循环，或者是遍历完所有的元素也会跳出循环</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
