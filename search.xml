<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git</title>
      <link href="/2021/09/07/git/"/>
      <url>/2021/09/07/git/</url>
      
        <content type="html"><![CDATA[<ol start="6"><li><p>版本控制系统</p><p> 中央集权型版本控制系统 —&gt; 必须有（中央）版本控制服务器</p><p> 1990s —&gt; CVS (Current Version System) / VSS (Visual Source Safe)</p><pre><code>     ---&gt; 锁定模式 ---&gt; 互斥 ---&gt; 一个文件不能被多个人同时维护</code></pre><p> 2000 —&gt; Subversion (SVN)</p><pre><code>     ---&gt; 合并模式 ---&gt; 允许多个人同时维护一个文件 ---&gt; 提交工作成果         ---&gt; 没有冲突：自动合并         ---&gt; 发生冲突：提示你手动解决</code></pre><p> 分布式版本控制系统 —&gt; 没有中央服务器存在一样可以实施版本控制</p><p> 2005 —&gt; Git —&gt; Linus</p><p> ~ Git命令</p><ol><li><p>初始化本地仓库：git init</p></li><li><p>将文件放到暂存区（缓存区）：<br> ~ git add <filename><br> ~ git add .</filename></p></li><li><p>将文件提交到仓库：git commit -m ‘…’<br> 如果是第一次使用Git进行提交，需要先配置用户名和邮箱：<br> ~ git config –global user.email ‘……’<br> ~ git config –global user.name ‘……’</p></li><li><p>查看提交日志：git log</p></li><li><p>查看版本控制状态：git status</p></li><li><p>用缓存区恢复工作区：git restore <filename></filename></p></li><li><p>用仓库恢复缓存区：git restore –staged <filename></filename></p></li><li><p>版本回退：git reset <commit-id><br> ~ –hard：让仓库、缓存区、工作区都回退到指定的版本（三者一致）<br> ~ –mixed：默认选项，让仓库、缓存区回退到指定的版本，工作区保持现状<br> ~ –soft：让仓库回退到指定的版本，缓存区和工作区保持现状</commit-id></p></li><li><p>查看过去和未来的日志：git reflog</p></li><li><p>远端仓库：<br>~ 添加：git remote add origin <url><br>~ 删除：git remote remove origin<br>~ 查看：git remote -v</url></p></li><li><p>上推（向服务器推代码）：git push -u origin master</p></li><li><p>下拉（从服务器获取代码）：git pull<br>git pull = git fetch + git merge</p></li><li><p>克隆：git clone –depth 1 <url></url></p></li><li><p>生成密钥对：ssh-keygen -t rsa -b 2048 -C “<a href="mailto:jackfrued@126.com">jackfrued@126.com</a>“</p></li><li><p>查看公钥文件：cat ~/.ssh/id_rsa.pub —&gt; 部署到服务器上<br>提示：免密访问请使用SSH地址</p></li></ol></li><li><p>代码托管平台（Git服务器）</p><p> ~ 国外：github.com<br> ~ 国内：</p><pre><code> - 码云：https://gitee.com ---&gt; 当做Git私服来使用     - coding：https://coding.net     - 行云：https://codeup.teambition.com/tour</code></pre></li></ol><p>10.远端仓库:<br>Йл/Д: git remote add origin <url><br>删除:<br>git remote remove origin<br>查看:<br>git remote -V<br>11.. 上推(向服务器推代码) : git push -u origin master<br>12. FjI (MRRSTREX1tTE) : git pull<br>    git pull = git fetch + git merge</url></p><ol start="13"><li><p>5ßk: git clone <url></url></p></li><li><p>分支操作</p><pre><code>~ 查看分支：git branch -a~ 创建分支：git branch &lt;branch-name&gt;~ 切换分支：git switch &lt;branch-name&gt; / git checkout &lt;branch-name&gt;~ 创建和切换分支：git switch -c &lt;branch-name&gt; / git checkout -b &lt;branch-name&gt;~ 合并分支：    - git switch &lt;target-branch&gt;    - git merge --no-ff &lt;branch-name&gt;~ 变基：    - git rebase &lt;target-branch&gt;    - git switch &lt;target-branch&gt;    - git merge &lt;branch-name&gt;</code></pre><p>~遇到冲突如何解决<br>1.从服务器fetch最新的代码，放到一个临时分支</p></li></ol><ul><li>git fetch origin master: temp</li></ul><p>2.查看哪里有冲突<br>git diff temp<br>3.尝试将临时分支合并到当前分支—&gt; CONFLICT<br>-<br>git merge temp<br>-合并虽然是失败的，但是有冲突的代码已经被标记了<br>取消合并: git merge –abort<br>4.解决代码冲突(找到当事人进行沟通，确定保留谁的代码)<br>5.重新提交解决冲突后的代码并上推到服务器</p><ul><li>git add <fi lename=""><br>git commit -m</fi></li><li>git push -u origin <branch-name></branch-name></li></ul><p>6.删除临时分支<br>git branch -d temp<br>7.重新发起Pull Request</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql</title>
      <link href="/2021/08/25/mysql%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/08/25/mysql%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库常见的概念"><a href="#数据库常见的概念" class="headerlink" title="数据库常见的概念"></a>数据库常见的概念</h2><p>DB：数据库，存储数据的容器</p><p>DBMS：数据库管理系统，又称之为数据库软件或数据库产品，用于创建或管理DB</p><p>SQl：结构化查询语言，用于和数据库通信的语言，不是某个数据库软件特有</p><h2 id="数据库存储数据的特点"><a href="#数据库存储数据的特点" class="headerlink" title="数据库存储数据的特点"></a>数据库存储数据的特点</h2><ul><li>数据存放在表中，表存放在数据库中</li><li>一个库可以有多张表，每张表有唯一的名称来标识自己</li><li>表中的列称之为<code>字段</code>，表中有1个或多个列</li><li>表中的每一行数据，称之为一条记录</li></ul><h2 id="Mysql中常用的命令"><a href="#Mysql中常用的命令" class="headerlink" title="Mysql中常用的命令"></a>Mysql中常用的命令</h2><h3 id="mysql登录命令"><a href="#mysql登录命令" class="headerlink" title="mysql登录命令"></a>mysql登录命令</h3><p><code>mysql -u username -p</code></p><h3 id="查看数据库的版本"><a href="#查看数据库的版本" class="headerlink" title="查看数据库的版本"></a>查看数据库的版本</h3><ol><li>未登录的情况<ul><li><code>mysql -version</code></li><li><code>mysql -V</code></li></ul></li><li>登录情况<ul><li><code>select version();</code></li></ul></li></ol><h3 id="显示所有数据库"><a href="#显示所有数据库" class="headerlink" title="显示所有数据库"></a>显示所有数据库</h3><p><code>show databases;</code></p><h3 id="进入指定的数据库"><a href="#进入指定的数据库" class="headerlink" title="进入指定的数据库"></a>进入指定的数据库</h3><p><code>use database_name;</code></p><h3 id="显示当前库中的所有表"><a href="#显示当前库中的所有表" class="headerlink" title="显示当前库中的所有表"></a>显示当前库中的所有表</h3><p><code>show tables;</code></p><h3 id="显示其他数据库中的所有表"><a href="#显示其他数据库中的所有表" class="headerlink" title="显示其他数据库中的所有表"></a>显示其他数据库中的所有表</h3><p><code>show tables from database_name;</code></p><h3 id="查看表的创建语句"><a href="#查看表的创建语句" class="headerlink" title="查看表的创建语句"></a>查看表的创建语句</h3><p><code>show create table table_name;</code></p><h3 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h3><p><code>desc table_name;</code></p><h3 id="查看当前所在数据库"><a href="#查看当前所在数据库" class="headerlink" title="查看当前所在数据库"></a>查看当前所在数据库</h3><p><code>select database();</code></p><h3 id="查看当前mysql支持的存储引擎"><a href="#查看当前mysql支持的存储引擎" class="headerlink" title="查看当前mysql支持的存储引擎"></a>查看当前mysql支持的存储引擎</h3><p><code>show engines;</code></p><h2 id="Mysql语法规范"><a href="#Mysql语法规范" class="headerlink" title="Mysql语法规范"></a>Mysql语法规范</h2><ol><li>不区分大小写，建议关键字大写，表名，列名小写</li><li>每条命令最好用英文分号隔开</li><li>每条命令根据需要，可以进行缩进或者换行</li><li>注释<ul><li><code>-</code>单行注释， 这里在<code>-</code>后面加上空格</li><li><code>#</code>单行注释</li><li><code>/* 这是注释内容 */</code> 多行注释</li></ul></li></ol><h2 id="SQL的语言分类"><a href="#SQL的语言分类" class="headerlink" title="SQL的语言分类"></a>SQL的语言分类</h2><ul><li>DQL（Data Query Language）：数据查询语言select相关语句</li><li>DML（Data Manipulate Language）：数据操作语言 <code>insert</code>, <code>update</code>, <code>delete</code> 语句</li><li>DDL （Data Define language）：数据定义语言 <code>create</code>,  <code>drop</code>,  <code>alter</code>语句</li><li>TCL （Transaction Control Language）：事务控制语言 <code>set autocommit=0</code>, <code>starttransation</code>, <code>savepoint</code>, <code>commit</code>, <code>rollback</code></li></ul><h2 id="建表语句"><a href="#建表语句" class="headerlink" title="建表语句"></a>建表语句</h2><pre class="line-numbers language-mysql"><code class="language-mysql">创建表create table 表名(    字段名1 类型[(宽度)] [约束条件] [comment '字段说明'],   字段名2 类型[(宽度)] [约束条件] [comment '字段说明'],   字段名3 类型[(宽度)] [约束条件] [comment '字段说明'],  [primary key (字段名)],  [foreign key (字段名) references 表名 (字段名)], )engine=innodb default charset='utf8mb4';注意:1. 在同一张表中，字段名不能相同2. 宽度和约束条件为可选参数，字段名和类型是必须的3. 最后一个字段后不能加逗号4. 类型是用来限制 字段 必须以何种数据类型来存储记录5. 类型其实也是对字段的约束(约束字段下的记录必须为XX类型)6. 类型后写的 约束条件 是在类型之外的 额外添加的约束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Mysql常见约束"><a href="#Mysql常见约束" class="headerlink" title="Mysql常见约束"></a>Mysql常见约束</h2><h3 id="not-null：标识的字段不能为空"><a href="#not-null：标识的字段不能为空" class="headerlink" title="not null：标识的字段不能为空"></a><code>not null</code>：标识的字段不能为空</h3><h3 id="primary-key：标识该字段为该表的主键，可以唯一的标识记录，插入重复的会报错"><a href="#primary-key：标识该字段为该表的主键，可以唯一的标识记录，插入重复的会报错" class="headerlink" title="primary key：标识该字段为该表的主键，可以唯一的标识记录，插入重复的会报错"></a><code>primary key</code>：标识该字段为该表的主键，可以唯一的标识记录，插入重复的会报错</h3><h3 id="foreign-key：标识的字段为外键"><a href="#foreign-key：标识的字段为外键" class="headerlink" title="foreign key：标识的字段为外键"></a><code>foreign key</code>：标识的字段为外键</h3><h3 id="unique-key：标识该字段为唯一"><a href="#unique-key：标识该字段为唯一" class="headerlink" title="unique key：标识该字段为唯一"></a><code>unique key</code>：标识该字段为唯一</h3><h3 id="default-value：为该字段设置默认值"><a href="#default-value：为该字段设置默认值" class="headerlink" title="default value：为该字段设置默认值"></a><code>default value</code>：为该字段设置默认值</h3><h3 id="auto-increment-：标识该字段的值自动增长-整数类型，而且为主键"><a href="#auto-increment-：标识该字段的值自动增长-整数类型，而且为主键" class="headerlink" title="auto_increment:：标识该字段的值自动增长(整数类型，而且为主键)"></a><code>auto_increment</code>:：标识该字段的值自动增长(整数类型，而且为主键)</h3><blockquote><p>注意：关于自动增长字段的初始值、步长可以在mysql中进行设置，比如设置初始值为1万，每次增长10。自增长列当前值存储在内存中，数据库每次重启之后，会查询当前表中自增列的最大值作为当前值，如果表数据被清空之后，数据库重启了，自增列的值将从初始值开始</p></blockquote><h2 id="DDL和DML常用操作"><a href="#DDL和DML常用操作" class="headerlink" title="DDL和DML常用操作"></a>DDL和DML常用操作</h2><pre class="line-numbers language-mysql"><code class="language-mysql">drop database if exists 旧库名; create database 新库名 default charset='utf8mb4';-- 创建表create table 表名(    字段名1 类型[(宽度)] [约束条件] [comment '字段说明'],   字段名2 类型[(宽度)] [约束条件] [comment '字段说明'],   字段名3 类型[(宽度)] [约束条件] [comment '字段说明'],  [primary key (字段名)],  [foreign key (字段名) references 表名 (字段名)], )engine=innodb default charset='utf8mb4';create table test1(a int not null comment '字段a');-- 修改表alter table 表名 add column 列名 类型 [列约束];alter table 表名 modify column 列名 新类型 [约束];或者alter table 表名 change column 列名 新列名 新类型 [约束];alter table 表名 drop column 列名;-- 插入数据insert into 表名 [(字段,字段)] values (值,值),(值,值),(值,值);insert into 表 [(字段,字段)] 数据来源select语句;-- 数据更新update 表名 [[as] 别名] set [别名.]字段 = 值,[别名.]字段 = 值 [where条件];-- 删除数据delete [别名] from 表名 [[as] 别名] [where条件];-- 删除test1表所有记录delete from test1;-- 删除test1表所有记录delete test1 from test1;-- 有别名的方式，删除test1表所有记录 delete t1 from test1 t1;-- 有别名的方式删除满足条件的记录delete t1 from test1 t1 where t1.a>100;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="select查询"><a href="#select查询" class="headerlink" title="select查询"></a>select查询</h2><pre class="line-numbers language-mysql"><code class="language-mysql">-- 基础用法select 查询的列 from 表名;select 常量值1,常量值2,常量值3;select 表达式;select 函数;select 字段1,字段2,字段3 from 表名;select 别名.字段,别名.* from 表名 [as] 别名;-- 条件查询select 列名 from 表名 where 列 运算符 值-- 模糊查询select 列名 from 表名 where 列 like pattern;-- pattern中可以包含通配符，有以下通配符: -- %:表示匹配任意一个或多个字符 -- _:表示匹配任意一个字符。-- 区间查询selec 列名 from 表名 where 列名 between 值1 and 值2;-- 存在性查询select 列名 from 表名 where 字段 in (值1,值2,值3,值4);select 列名 from 表名 where 字段 not in (值1,值2,值3,值4);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>面向对象编程</title>
      <link href="/2021/08/08/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2021/08/08/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="编程类型"><a href="#编程类型" class="headerlink" title="编程类型"></a>编程类型</h2><p>指令式编程 —&gt; 面向过程(函数)编程 —&gt; 程序比较简单的时候没有任何问题</p><p>范式编程(程序设计的方法论)：面向对象编程 / 函数式编程</p><h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><p>对象：对象是可以接收消息的实体，面向对象编程就是通过狗日对象发消息达到解决问题的目标。</p><p>对象 = 数据 + 方法  —&gt; 对象将数据和操作数据的函数从逻辑上变成了一个整体。</p><ul><li>一切皆为对象</li><li>对象都有属性和行为</li><li>每个对象都是独一无二的</li><li>对象一定属于某个类</li></ul><p>类：将共同特征（静态特征和动态特征）的对象的共同特征抽取出来之后的得到的一个抽象概念。简单的说，类是对象的蓝图（模板），有了类才能创建出这种类型的对象。</p><h2 id="面向对象编程三步走："><a href="#面向对象编程三步走：" class="headerlink" title="面向对象编程三步走："></a>面向对象编程三步走：</h2><ol><li>定义类<ul><li>数据抽象：找到和对象相关的静态特征（属性）—&gt; 找名词</li><li>行为抽象：找到和对象相关的动态特征（方法）—&gt; 找动词</li></ul></li><li>造对象</li><li>向对象发消息</li></ol><blockquote><p>注意：</p><p>类的命名使用驼峰命名法，即每个单词首字母大写</p></blockquote><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>我们在类里面写的函数，通常称之为方法，它们基本上都是发给对象的消息。<br>但是有的时候，我们的消息并不想发给对象，而是希望发给这个类（类本身也是一个对象），<br>这个时候，我们可以使用静态方法或类方法。</p><p>静态方法 - 发给类的消息 —&gt; <code>@staticmethod</code> —&gt; 装饰器<br>类方法 - 发给类的消息 —&gt; <code>@classmethod</code> —&gt; 装饰器 —&gt; 第一个参数（cls）是接收消息的类</p><h1 id="魔法方法"><a href="#魔法方法" class="headerlink" title="魔法方法"></a>魔法方法</h1><p>魔术方法（魔法方法）—&gt; 有特殊用途和意义的方法</p><ul><li><code>__init__</code> —&gt; 初始化方法，在调用构造器语法创建对象的时候会被自动调</li><li> <code>__str__</code> —&gt; 获得对象的字符串表示，在调用print函数输出对象时会被自动调用</li><li><code>__repr__</code> —&gt; 获得对象的字符串表示，把对象放到容器中调用print输出时会自动调用—&gt; representation</li><li><code>__lt__</code> —&gt; 在使用 &lt; 运算符比较两个对象大小时会自动调用</li><li><code>__slots__</code> —&gt; 如果要限制一个类的对象只能拥有某些属性，可以在类中使用__slots__魔法属性</li></ul><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承：对已有的类进行扩展创建出新的类，这个过程就叫继承。<br>提供继承信息的类叫做父类（超类、基类），得到继承信息的类称为子类（派生类）。</p><p>继承是实现代码复用的一种手段，但是千万不要滥用继承。</p><p>继承是一种is-a关系。<br>a student is a person.<br>a teacher is a person.<br>a programmer is a person.</p><p>子类直接从父类继承公共的属性和行为，再添加自己特有的属性和行为，<br>所以子类一定是比父类更强大的，任何时候都可以用子类对象去替代父类对象。</p><p>Python中的继承允许多重继承，一个类可以有一个或多个父类。<br>如果不是必须使用多重继承的场景下，请尽量使用单一继承。</p><h2 id="两个类之间可能的关系"><a href="#两个类之间可能的关系" class="headerlink" title="两个类之间可能的关系"></a>两个类之间可能的关系</h2><ul><li>is-a关系：继承 —&gt; 从一个类派生出另一个类<pre><code>a student is a person.a teacher is a person.</code></pre></li><li>has-a关系：关联 —&gt; 把一个类的对象作为另外一个类的对象的属性<pre><code>a person has an identity card.a car has an engine.</code></pre><ul><li>（普通）关联 </li><li>强关联：整体和部分的关联，聚合和合成</li></ul></li><li>use-a关系：依赖 —&gt; 一个类的对象作为另外一个类的方法的参数或返回值<pre><code>a person use a vehicle.</code></pre></li></ul><h2 id="面向对象编程的四大支柱"><a href="#面向对象编程的四大支柱" class="headerlink" title="面向对象编程的四大支柱"></a>面向对象编程的四大支柱</h2><p>面向对象编程的四大支柱：</p><ul><li>抽象（abstraction）：提取共性（定义类就是一个抽象过程，需要做数据抽象和行为抽象）。</li><li> 封装（encapsulation）：把数据和操作数据的函数从逻辑上组装成一个整体（对象）。隐藏实现细节，暴露简单的调用接口。</li><li> 继承（inheritance）：扩展已有的类创建新类，实现对已有类的代码复用</li><li> 多态（polymorphism）：给不同的对象发出同样的消息，不同的对象执行了不同的行为。 方法重写（override）：子类对父类已有的方法，重新给出自己的实现版本。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>函数</title>
      <link href="/2021/08/07/%E5%87%BD%E6%95%B0/"/>
      <url>/2021/08/07/%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="函数定义："><a href="#函数定义：" class="headerlink" title="函数定义："></a>函数定义：</h2><p>Python中使用<code>def</code>关键字来定义函数，通过<code>return</code>关键字来返回函数的执行结果。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义函数：def是定义函数的关键字、fac是函数名，num是参数（自变量）</span><span class="token keyword">def</span> <span class="token function">fac</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""求阶乘"""</span>    result <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> n <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">*=</span> n    <span class="token comment" spellcheck="true"># 返回num的阶乘（因变量）</span>    <span class="token keyword">return</span> resultm <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'m = '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>n <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'n = '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 当需要计算阶乘的时候不用再写重复的代码而是直接调用函数fac</span><span class="token comment" spellcheck="true"># 调用函数的语法是在函数名后面跟上圆括号并传入参数</span><span class="token keyword">print</span><span class="token punctuation">(</span>fac<span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">//</span> fac<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">//</span> fac<span class="token punctuation">(</span>m <span class="token operator">-</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数的作用："><a href="#函数的作用：" class="headerlink" title="函数的作用："></a>函数的作用：</h2><p>世界级的编程大师<em>Martin Fowler</em>先生曾经说过：“<strong>代码有很多种坏味道，重复是最坏的一种！</strong>”因此函数的作用就是解决代码重复的方案之一。</p><h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><h3 id="参数的默认值"><a href="#参数的默认值" class="headerlink" title="参数的默认值"></a>参数的默认值</h3><p>如果函数中没有<code>return</code>语句，那么函数默认返回代表空值的<code>None</code>。另外，在定义函数时，函数也可以没有自变量，但是函数名后面的圆括号是必须有的。Python中还允许函数的参数拥有默认值。</p><p>带默认值的参数必须放在不带默认值的参数之后，否则将产生<code>SyntaxError</code>错误，错误消息是：<code>non-default argument follows default argument</code>，翻译成中文的意思是“没有默认值的参数放在了带默认值的参数后面”</p><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>Python语言中的函数可以通过星号表达式语法来支持可变参数。</p><p>可变参数指的是在调用函数时，可以向函数传入0个或任意多个参数。</p><p>有的时候我们并不知道函数的调用者会向该函数传入多少个参数，这个时候可变参数就可以派上用场。</p><h3 id="位置参数和关键字参数"><a href="#位置参数和关键字参数" class="headerlink" title="位置参数和关键字参数"></a>位置参数和关键字参数</h3><p>在设计函数的时候，函数的参数个数是暂时无法确定的</p><p>arguments —&gt; args —&gt; 参数</p><p>位置参数 —&gt; positional argument</p><ul><li>*args —&gt; 可变参数 —&gt; 可以接收零个或任意多个位置参数 —&gt; 将所有的位置参数打包成一个元组</li></ul><p>关键字参数 —&gt; keyword argument —&gt; 参数名=参数值</p><ul><li>**kwargs —&gt; 可以接收零个或任意多个关键字参数 —&gt; 将所有的关键字参数打包成一个字典</li></ul><p>关键字参数一定是在位置参数的后面！！！</p><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>Lambda函数 —&gt; 没有名字而且一句话就能写完的函数，唯一的表达式就是函数的返回值</p><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>函数如果直接或间接的调用了自身，这种调用称为递归调用。</p><p>不管函数是调用别的函数，还是调用自身，一定要做到快速收敛。<br>在比较有限的调用次数内能够结束，而不是无限制的调用函数。</p><p>如果一个函数（通常指递归调用的函数）不能够快速收敛，那么就很有可能产生下面的错误<br>RecursionError: maximum recursion depth exceeded<br>最终导致程序的崩溃。</p><p>阶乘的定义：<br>~ n! = n * (n - 1) * (n - 2) * … * 2 * 1<br>~ n! = n * (n - 1)!</p><p>递归函数的两个要点：</p><ol><li>递归公式（第n次跟第n-1次的关系）</li><li>收敛条件（什么时候停止递归调用）</li></ol><h2 id="函数的调用过程"><a href="#函数的调用过程" class="headerlink" title="函数的调用过程"></a>函数的调用过程</h2><img src="/Users/lidongxi/Documents/phone1000/weeks_three/课件/函数的调用过程.jpg" alt="函数的调用过程图解" style="zoom:50%;"><h2 id="Python中函数的地位"><a href="#Python中函数的地位" class="headerlink" title="Python中函数的地位"></a>Python中函数的地位</h2><p>Python中的函数是一等函数（一等公民）：</p><ol><li>函数可以作为函数的参数</li><li>函数可以作为函数的返回值</li><li>函数可以赋值给变量</li></ol><p>如果把函数作为函数的参数或者返回值，这种玩法通常称之为高阶函数。<br>通常使用高阶函数可以实现对原有函数的解耦合操作。</p><p>运算 - operate，运算符 - operator</p><h2 id="全局变量和局部变量"><a href="#全局变量和局部变量" class="headerlink" title="全局变量和局部变量"></a>全局变量和局部变量</h2><p>全局变量（没有写在任何函数里面的变量）<br>局部变量（定义在函数内部的变量）</p><p>Python程序中搜索一个变量是按照 LEGB 顺序进行搜索的</p><p>Local（局部作用域） —&gt; Embeded（嵌套作用域） —&gt; Global（全局作用域）<br>—&gt; Built-in（内置作用域） —&gt; NameError: name … not defined</p><p>global —&gt; 声明使用全局变量或者定义一个局部变量将其放到全局作用域<br>nonlocal —&gt; 声明使用嵌套作用域的变量（不使用局部变量）</p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="如何使用其他文件（模块）中定义的函数"><a href="#如何使用其他文件（模块）中定义的函数" class="headerlink" title="如何使用其他文件（模块）中定义的函数"></a>如何使用其他文件（模块）中定义的函数</h3><p>方法一：可以通过import导入模块，然后通过”模块名.函数名”的方式调用函数；<br>方法二：直接从模块中导入函数 —&gt; “from 模块 import 函数” —&gt; 直接通过函数名调用函数</p><h3 id="如何给导入的函数，模块取别名"><a href="#如何给导入的函数，模块取别名" class="headerlink" title="如何给导入的函数，模块取别名"></a>如何给导入的函数，模块取别名</h3><p>import导入函数、模块时，可以使用as关键字（alias）进行别名</p><p>做工程化项目开发时，如果项目中的代码文件非常多，我们可以使用”包”（package）来管理”模块”（module），<br>再通过模块来管理函数，包其实就是一个文件夹，而模块就是一个Python文件，通过这种方式就可以很好的解决</p><h3 id="如何解决命名冲突问题"><a href="#如何解决命名冲突问题" class="headerlink" title="如何解决命名冲突问题"></a>如何解决命名冲突问题</h3><p>大型项目团队开发中经常遇到的命名冲突的问题。</p><p>方法一：导入函数的时候对函数进行别名<br>方法二：使用完全限定名（qualified name） —&gt; [包名.]模块名.函数名</p><h2 id="Python内存管理图解"><a href="#Python内存管理图解" class="headerlink" title="Python内存管理图解"></a>Python内存管理图解</h2><img src="/Users/lidongxi/Documents/phone1000/weeks_three/课件/内存管理图.jpg" alt="内存管理" style="zoom:50%;"><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>写程序的终极原则：高内聚，低耦合 —&gt; high cohesion low coupling</p><p>设计函数最为重要的原则：单一职责原则（一个函数只做好一件事情）—&gt; 高度内聚</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>枚举</title>
      <link href="/2021/08/06/%E6%9E%9A%E4%B8%BE/"/>
      <url>/2021/08/06/%E6%9E%9A%E4%B8%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="枚举的定义："><a href="#枚举的定义：" class="headerlink" title="枚举的定义："></a>枚举的定义：</h2><p>枚举是与多个唯一常量值绑定的一组符号名(即成员)。枚举中的成员可以进行身份比较，并且枚举也属于可迭代类型。</p><blockquote><p>注意：</p><p>枚举表示常量，因此建议枚举成员名称使用大写字母</p></blockquote><h2 id="创建Enum"><a href="#创建Enum" class="headerlink" title="创建Enum"></a>创建Enum</h2><p>枚举有<code>class</code>来创建的，当然还有其他创建方法，在此笔者就不赘述。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> enum <span class="token keyword">import</span> Enum<span class="token keyword">class</span> <span class="token class-name">Colors</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>  PINK <span class="token operator">=</span> <span class="token string">'#FFC0CB'</span>  PURPLE <span class="token operator">=</span> <span class="token string">'#800080'</span>  BLACK <span class="token operator">=</span> <span class="token string">'#000000'</span><span class="token comment" spellcheck="true"># 枚举成员的字符串表现形式</span><span class="token keyword">print</span><span class="token punctuation">(</span>Colors<span class="token punctuation">.</span>PINK<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Color.PINK</span><span class="token comment" spellcheck="true"># 枚举成员的 类型 就是它所属于的枚举</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>Colors<span class="token punctuation">.</span>PINK<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;enum 'Colors'></span><span class="token comment" spellcheck="true"># Enum 成员包含 name 属性</span><span class="token keyword">print</span><span class="token punctuation">(</span>Colors<span class="token punctuation">.</span>PINK<span class="token punctuation">,</span>name<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># PINK</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注解：</p><p>Enum 成员值</p><p>成员值可以使<code>int</code>,<code>str</code>等。若无需设定确切值，<code>auto</code>实例会自动为成员分配合适的值。</p><p>命名法</p><ul><li>类Color 是枚举(enum)</li><li>Color.PINK，Color.PURPLE, Color.BLACK  等属性是 枚举成员(enum成员)，也是常量</li><li>枚举成员具有 名称和值（Color.PINK 的名称是 PINK，值是 #FFC0CB）</li></ul><p>虽然Enum<code>class</code>语法创建，但是Enum并不是常规的Python类。</p></blockquote><h2 id="枚举的遍历"><a href="#枚举的遍历" class="headerlink" title="枚举的遍历"></a>枚举的遍历</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> enum <span class="token keyword">import</span> Enum<span class="token keyword">class</span> <span class="token class-name">Colors</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>    PINK <span class="token operator">=</span> <span class="token string">'#FFC0CB'</span>    PURPLE <span class="token operator">=</span> <span class="token string">'#800080'</span>    BLACK <span class="token operator">=</span> <span class="token string">'#000000'</span>    <span class="token keyword">for</span> color <span class="token keyword">in</span> Colors<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Colors.PINK</span><span class="token comment" spellcheck="true"># Colors.PURPLE</span><span class="token comment" spellcheck="true"># Color.BLACK</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><p>枚举成员可哈希，可用于字典和集合</p></blockquote><h2 id="枚举成员及其属性的访问"><a href="#枚举成员及其属性的访问" class="headerlink" title="枚举成员及其属性的访问"></a>枚举成员及其属性的访问</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 使用name访问枚举成员</span><span class="token keyword">print</span><span class="token punctuation">(</span>Color<span class="token punctuation">[</span><span class="token string">'PINK'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Color.PINK</span><span class="token comment" spellcheck="true"># 可访问枚举成员的name,value</span><span class="token keyword">print</span><span class="token punctuation">(</span>Color<span class="token punctuation">[</span><span class="token string">'PINK'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># PINK</span><span class="token keyword">print</span><span class="token punctuation">(</span>Color<span class="token punctuation">[</span><span class="token string">'PINK'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># #FFC0CB</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="重复的枚举成员和值"><a href="#重复的枚举成员和值" class="headerlink" title="重复的枚举成员和值"></a>重复的枚举成员和值</h2><p>两个枚举成员的名称不能相同</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span>  <span class="token class-name">Color</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>    PINK <span class="token operator">=</span> <span class="token string">'#FFC0CB'</span>    PINK <span class="token operator">=</span> <span class="token string">'#DFC8BB'</span>    <span class="token triple-quoted-string string">"""Traceback (most recent call last):...TypeError: Attempted to reuse key: 'PINK'"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两个枚举成员的值可以相同。如果先定义成员A再定义成员B且它们的值相同，则B是A的别名。按值查找A和B的值返回的是A。按名称查找B，返回的也是A：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span>  <span class="token class-name">Color</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>    PINK <span class="token operator">=</span> <span class="token string">'#FFC0CB'</span>    RED <span class="token operator">=</span> <span class="token string">'#FFC0CB'</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>PINK<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Color.PINK</span><span class="token keyword">print</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>RED<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Color.PINK</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>再谈字符串</title>
      <link href="/2021/08/01/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2021/08/01/%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h3 id="再谈字符串"><a href="#再谈字符串" class="headerlink" title="再谈字符串"></a>再谈字符串</h3><p><strong>字符串</strong>，即把<strong>字符按照一定的顺序串起来组成一个有限的序列</strong>。</p><p>Python中，我们使用<code>''</code>或者<code>""</code>包围起来，就可以表示一个字符串。字符串中的字符可以使特殊字符，英文字符，中文字符，希腊字母，Emoji字符等</p><pre class="line-numbers language-python"><code class="language-python">character_name <span class="token operator">=</span> <span class="token string">'DongxiLi'</span>character_name2 <span class="token operator">=</span> <span class="token string">'李东西'</span><span class="token comment" spellcheck="true"># 使用三引号可以对字符串进行折行，而折行的样式就是输出的样式</span>character_name <span class="token operator">=</span> <span class="token triple-quoted-string string">'''DongxiLi'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="转义字符和原始字符串"><a href="#转义字符和原始字符串" class="headerlink" title="转义字符和原始字符串"></a>转义字符和原始字符串</h3><p>可以在字符串中使用<code>\</code>（反斜杠）来表示转义，也就是说<code>\</code>后面的字符不再是它原来的意义，例如：<code>\n</code>不是代表反斜杠和字符<code>n</code>，而是表示换行；<code>\t</code>也不是代表反斜杠和字符<code>t</code>，而是表示制表符。所以如果字符串本身又包含了<code>'</code>、<code>"</code>、<code>\</code>这些特殊的字符，必须要通过<code>\</code>进行转义处理。例如要输出一个带单引号或反斜杠的字符串，需要用如下所示的方法。</p><pre class="line-numbers language-pyth"><code class="language-pyth">s = '\'hello, world'print(s)s2 = '\\hello, world\\'print(s2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Python字符串中可以用<code>r</code>或者<code>R</code>开头，这种字符串被称之为原始字符串，即字符串中的每一个字符都是它本来的含义，不存在转义。例如，在字符串<code>'hello\n'</code>中，<code>\n</code>表示换行；而在<code>r'hello\n'</code>中，<code>\n</code>不再表示换行，就是反斜杠和字符<code>n</code>。大家可以运行下面的代码，看看会输出什么。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 字符串s中的\t是制表符,\n是换行符</span>s <span class="token operator">=</span> <span class="token string">'\time up \now'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 字符串s2中没有转义字符,每个字符都是原始含义</span>s2 <span class="token operator">=</span> r<span class="token string">'\time up \now'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串的运算"><a href="#字符串的运算" class="headerlink" title="字符串的运算"></a>字符串的运算</h3><h4 id="字符串的拼接和重复"><a href="#字符串的拼接和重复" class="headerlink" title="字符串的拼接和重复"></a>字符串的拼接和重复</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 字符串的拼接和重复</span>s <span class="token operator">=</span> <span class="token string">'李'</span> <span class="token operator">+</span> <span class="token string">'东西'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 李东西</span>s2 <span class="token operator">=</span> <span class="token string">'呵呵'</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 呵呵呵呵呵呵</span>s <span class="token operator">+=</span> s2  <span class="token comment" spellcheck="true"># s = s + s2</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 李东西呵呵呵呵呵呵</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><p>字符串在计算机内存中也是以二进制形式存在的，那么字符串的大小比较比的是每个字符对应的编码的大小。例如<code>A</code>的编码是<code>65</code>， 而<code>a</code>的编码是<code>97</code>，所以<code>'A' &lt; 'a'</code>的结果相当于就是<code>65 &lt; 97</code>的结果，很显然是<code>True</code>；而<code>'boy' &lt; 'bad'</code>，因为第一个字符都是<code>'b'</code>比不出大小，所以实际比较的是第二个字符的大小，显然<code>'o' &lt; 'a'</code>的结果是<code>False</code>，所以<code>'boy' &lt; 'bad'</code>的结果也是<code>False</code>。如果不清楚两个字符对应的编码到底是多少，可以使用<code>ord</code>函数来获得，例如<code>ord('A')</code>的值是<code>65</code></p><pre class="line-numbers language-python"><code class="language-python">s1 <span class="token operator">=</span> <span class="token string">'a whole new world'</span>s2 <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">,</span> s1 <span class="token operator">&lt;</span> s2<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># False True</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2 <span class="token operator">==</span> <span class="token string">'hello world'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2 <span class="token operator">==</span> <span class="token string">'Hello world'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2 <span class="token operator">!=</span> <span class="token string">'Hello world'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><p>字符串比较运算符比较的事字符串的内容</p></blockquote><h4 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h4><p><code>is</code>运算符(身份运算符)， 如果用<code>is</code>来比较两个字符串，它比价的是两个变量对应的字符串是否在内存中相同的位置(内存地址)。</p><pre class="line-numbers language-python"><code class="language-python">s1 <span class="token operator">=</span> <span class="token string">'hello world'</span>s2 <span class="token operator">=</span> <span class="token string">'hello world'</span>s3 <span class="token operator">=</span> s2<span class="token comment" spellcheck="true"># 比较字符串的内容</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">,</span> s2 <span class="token operator">==</span> s3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True True</span><span class="token comment" spellcheck="true"># 比较字符串的内存地址</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1 <span class="token keyword">is</span> s2<span class="token punctuation">,</span> s2 <span class="token keyword">is</span> s3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False True</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 140422212438512 140422213227888 140422213227888</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>提示：</p><p>Python中可以用<code>id</code>来查看变量的内存地址</p></blockquote><h4 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h4><p>Python中可以用<code>in</code>和<code>not in</code>判断一个字符串是否存在内外一个字符或者字符串，<code>in</code>和<code>not in</code>运损通常称之为成员运算，会产生布尔值<code>True</code>或者<code>False</code></p><pre class="line-numbers language-python"><code class="language-python">s1 <span class="token operator">=</span> <span class="token string">'helo world'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'wo'</span> <span class="token keyword">in</span> s1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span>s2 <span class="token operator">=</span> <span class="token string">'googbye'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2 <span class="token keyword">in</span> s1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取字符串的长度"><a href="#获取字符串的长度" class="headerlink" title="获取字符串的长度"></a>获取字符串的长度</h4><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'DongxiLi'</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="索引和切片"><a href="#索引和切片" class="headerlink" title="索引和切片"></a>索引和切片</h4><p>通过索引可以从字符串中取出某个字符，运算符是<code>[n]</code> 这里的<code>0 &lt;= n &lt; N</code>，这里的<code>N</code>指的是字符串的长度；当然这里的<code>n</code>也可以<code>-N &lt;= n &lt;0</code>，当<code>n</code>负数是通常称之为负向索引</p><p><strong>字符串是不可变类型</strong>， 所以<strong>不能通过索引修改字符串中的字符</strong></p><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'abc123456'</span>N <span class="token operator">=</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取第一个字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token operator">-</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># a a</span><span class="token comment" spellcheck="true"># 获取最后一个字符</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>N<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 6 6</span><span class="token comment" spellcheck="true"># 获取字符c</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># c c</span><span class="token comment" spellcheck="true"># 获取字符3</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><p>进行索引操作时一定要注意索引的范围，不然会发生索引越界，引发<code>IndexError</code>异常，错误提示信息为：<code>string index out of range</code>（字符串索引超出范围</p></blockquote><p>如果要字符串中取出多个字符，则可以通过切片，运算符是<code>[i:j:k]</code>其中<code>i</code>是开始索引，<code>j</code>是结束索引(取不到j),<code>k</code>是步长，默认步长为1，表示从前向后获取相邻字符的连续切片，所以<code>:k</code>部分可以省略。    </p><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'abc123456'</span><span class="token comment" spellcheck="true"># i=2, j=5, k=1 的正向切片</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># c12</span><span class="token comment" spellcheck="true"># i=-7, j=-4, k=1 的正向切片</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># c12</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># c123456</span><span class="token comment" spellcheck="true"># i=-7, j=9, k=1的正向切片操作</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># c123456</span><span class="token comment" spellcheck="true"># i=2, j=9, k=2的正向切片操作</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># c246</span><span class="token comment" spellcheck="true"># i=-7, j=9, k=2的正向切片操作</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># c246</span><span class="token comment" spellcheck="true"># i=7, j=1, k=-1的负向切片操作</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 54321c</span><span class="token comment" spellcheck="true"># i=-2, j=-8, k=-1的负向切片操作</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 54321c</span><span class="token comment" spellcheck="true"># i=7, j=-10, k=-1的负向切片操作</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 54321cba</span><span class="token comment" spellcheck="true"># i=-1, j=1, k=-1的负向切片操作</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 654321c</span><span class="token comment" spellcheck="true"># i=-1, j=-10, k=-1的负向切片</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 654321cba</span><span class="token comment" spellcheck="true"># i=-1, j=-10, k=-2的负向切片</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 642ca</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="遍历字符串"><a href="#遍历字符串" class="headerlink" title="遍历字符串"></a>遍历字符串</h4><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'DongxiLi'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> ch <span class="token keyword">in</span> name<span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串的方法"><a href="#字符串的方法" class="headerlink" title="字符串的方法"></a>字符串的方法</h3><p>Python中，我们可以通过字符串类型自带的方法对字符串进行操作和处理，对于一个字符串类型的变量，我们可以用<code>变量名.方法名()</code>的方式来调用它的方法。</p><h4 id="大小写相关操作"><a href="#大小写相关操作" class="headerlink" title="大小写相关操作"></a>大小写相关操作</h4><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'dong xi li'</span><span class="token comment" spellcheck="true"># 使用capitalize方法获得字符串首字母大写后的字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Dong xi li</span><span class="token comment" spellcheck="true"># 使用title方法获得字符串每个单词首字母大写后的字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#Dong Xi Li</span><span class="token comment" spellcheck="true"># 使用upper方法获得字符串大写后的字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># DONG XI LI</span>name2 <span class="token operator">=</span> ’DONG XI LI‘<span class="token comment" spellcheck="true"># 使用lower方法获得字符串小写后的字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>lower<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 'dong xi li'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查找操作"><a href="#查找操作" class="headerlink" title="查找操作"></a>查找操作</h4><p>如果想在一个字符串中从前往后查找有没有另外一个字符串，可以使用<code>find</code>或者<code>index</code>方法</p><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'hello, world!'</span><span class="token comment" spellcheck="true"># find方法从字符串中查找另外一个字符串的所在位置</span><span class="token comment" spellcheck="true"># 找到了就放回字符串中另一个字符串字符的索引</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'or'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 8</span><span class="token comment" spellcheck="true"># 找不到返回-1</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'DongxiLi'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># -1</span><span class="token comment" spellcheck="true"># index方法与find方法类似</span><span class="token comment" spellcheck="true"># 找到了返回字符串中另一个字符串首字符的索引</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>inex<span class="token punctuation">(</span><span class="token string">'or'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 找不到引发异常</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'DongxiLi'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ValueError:substring not found</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在使用<code>find</code>和<code>index</code>方法时还可以通过方法的参数来指定查找的范围，即可以指定开始的索引。<code>find</code>和<code>index</code>方法还有逆向查找的版本。分别是<code>rdind</code>和<code>index</code>。</p><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token comment" spellcheck="true"># 从前向后查找o出现的位置(相当于第一出现)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 4</span><span class="token comment" spellcheck="true"># 从索引为5的位置开始查找o出现的位置</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 7</span><span class="token comment" spellcheck="true"># 从后向前查找字符o出现的位置(相当于最后一次出现)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以通过字符串的<code>startswith</code>，<code>endswith</code>来判断字符串是否以某个字符开头或者结尾；也可以用<code>is</code>开头的方法来判断字符串的特征。</p><pre class="line-numbers language-python"><code class="language-python">s1 <span class="token operator">=</span> <span class="token string">'hello, world'</span><span class="token comment" spellcheck="true"># startwith方法检查字符串是否以指定字符串开头，返回bool</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'H'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'he'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span><span class="token comment" spellcheck="true"># endswith方法检查字符串是否以指定字符串结尾，返回bool</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span>s2 <span class="token operator">=</span> <span class="token string">'abc123'</span><span class="token comment" spellcheck="true"># isdigit方法检查字符串是否有数字构成，返回bool</span><span class="token keyword">print</span><span class="token punctuation">(</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span><span class="token comment" spellcheck="true"># isalpha方法检查字符串是否由字母构成，返回bool</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span><span class="token comment" spellcheck="true"># isalnum方法检查字符串是否以数字和字母构成，返回bool</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h4><p>Python中字符串类型可以通过<code>center</code>,<code>ljust</code>,<code>rjust</code>方法做居中，左对齐和右对齐的处理。</p><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'hello, world'</span><span class="token comment" spellcheck="true"># center方法以宽度20将字符串居中并在两侧填充*</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ****hello world*****</span><span class="token comment" spellcheck="true"># rjust方法以宽度为20将字符串右对齐并在左侧填充-  </span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ---------hello world</span><span class="token comment" spellcheck="true"># ljust方法以宽度为20将字符串左对齐并在右侧填充^  </span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'^'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># hello world^^^^^^^^^         </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果需要进一步控制格式化语法中变量值的形式，可以参照下面的表格来进行字符串格式化操作。</p><table><thead><tr><th>变量值</th><th>占位符</th><th>格式化结果</th><th>说明</th></tr></thead><tbody><tr><td><code>3.1415926</code></td><td><code>{:.2f}</code></td><td><code>'3.14'</code></td><td>保留小数点后两位</td></tr><tr><td><code>3.1415926</code></td><td><code>{:+.2f}</code></td><td><code>'+3.14'</code></td><td>带符号保留小数点后两位</td></tr><tr><td><code>-1</code></td><td><code>{:+.2f}</code></td><td><code>'-1.00'</code></td><td>带符号保留小数点后两位</td></tr><tr><td><code>3.1415926</code></td><td><code>{:.0f}</code></td><td><code>'3'</code></td><td>不带小数</td></tr><tr><td><code>123</code></td><td><code>{:0&gt;10d}</code></td><td><code>0000000123</code></td><td>左边补<code>0</code>，补够10位</td></tr><tr><td><code>123</code></td><td><code>{:x&lt;10d}</code></td><td><code>123xxxxxxx</code></td><td>右边补<code>x</code> ，补够10位</td></tr><tr><td><code>123</code></td><td><code>{:&gt;10d}</code></td><td><code>'       123'</code></td><td>左边补空格，补够10位</td></tr><tr><td><code>123</code></td><td><code>{:&lt;10d}</code></td><td><code>'123       '</code></td><td>右边补空格，补够10位</td></tr><tr><td><code>123456789</code></td><td><code>{:,}</code></td><td><code>'123,456,789'</code></td><td>逗号分隔格式</td></tr><tr><td><code>0.123</code></td><td><code>{:.2%}</code></td><td><code>'12.30%'</code></td><td>百分比格式</td></tr><tr><td><code>123456789</code></td><td><code>{:.2e}</code></td><td><code>'1.23e+08'</code></td><td>科学计数法格式</td></tr></tbody></table><h4 id="修剪操作"><a href="#修剪操作" class="headerlink" title="修剪操作"></a>修剪操作</h4><p>字符串的<code>strip</code>方法可以帮助我们将原字符串修剪掉左右两端的空格之后的字符串。这个方法非常有实用价值，通常用来将用户输入中因为不小心键入的头尾空格去掉，<code>strip</code>方法还有<code>lstrip</code>和<code>rstrip</code>两个版本。</p><pre class="line-numbers language-python"><code class="language-python">​```Pythons <span class="token operator">=</span> <span class="token string">'   jackfrued@126.com  \t\r\n'</span><span class="token comment" spellcheck="true"># strip方法获得字符串修剪左右两侧空格之后的字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># jackfrued@126.com</span>​```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>元组</title>
      <link href="/2021/08/01/%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%85%83%E7%BB%84/"/>
      <url>/2021/08/01/%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%85%83%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h3 id="元组的定义和使用"><a href="#元组的定义和使用" class="headerlink" title="元组的定义和使用"></a>元组的定义和使用</h3><p>Python中元组是把多个元素按照一定的顺序构成的序列。元组不同于列表的是，元组是不可变类型。而不可变类型就说明，元组一旦被定义，元组里面的元素就不能被修改。定义元组可以使用<strong>字面量</strong>语法<code>()</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个三元组</span>character_names <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'徐晓'</span>， <span class="token string">'陈芝报'</span><span class="token punctuation">,</span> <span class="token string">'褚禄山'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义一个四元组</span>info <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'徐晓'</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">'北凉'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>列表</title>
      <link href="/2021/07/31/%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%88%97%E8%A1%A8/"/>
      <url>/2021/07/31/%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="列表的定义和使用"><a href="#列表的定义和使用" class="headerlink" title="列表的定义和使用"></a>列表的定义和使用</h3><p>Python中，<strong>列表是由一系列元素按特定顺序构成的数据序列</strong>。列表可以<strong>可以保存多个数据</strong>，并且这些数据可以<strong>重复</strong>，以及合一存储多种数据类型(但是一般不建议这么做)。</p><ol><li>通过字面量<code>[]</code>语法来定义列表，列表中的元素使用英文状态下的逗号(,)进行分隔<pre class="line-numbers language-python"><code class="language-python">nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'徐凤年'</span>， <span class="token string">'姜似'</span>， <span class="token string">'裴南苇'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>通过Python内置的<code>list</code>函数姜其他序列编程列表。准确的来说<code>list</code>并不是一个函数，而是创建对象的构造器<br>```python<br>nums = list(range(1, 10))<br>print(nums)  # [1, 2, 3, 4, 5, 6, 7, 8, 9]</li></ol><p>ch = list(‘hello’)<br>print(ch)  # [‘h’, ‘e’, ‘l’, ‘l’, ‘o’]</p><pre><code>3. 通过列表推导式(列表生成式)生成列表```pythonnums = [i ** 2 for i in range(1, 9)]print(nums)  # [1, 4, 9, 16, 25, 36, 49, 64, 81]</code></pre><blockquote><p>注意：<br> 列表是一种可变得数据类型，也即说明列表可以添加元素，删除元素，更新元素</p></blockquote><h4 id="列表的运算符"><a href="#列表的运算符" class="headerlink" title="列表的运算符"></a>列表的运算符</h4><pre class="line-numbers language-python"><code class="language-python">character_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'李淳罡'</span><span class="token punctuation">,</span> <span class="token string">'剑九黄'</span><span class="token punctuation">,</span> <span class="token string">'贾嘉佳'</span><span class="token punctuation">]</span>character_names2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'吴六鼎'</span><span class="token punctuation">,</span> <span class="token string">'温华'</span><span class="token punctuation">,</span> <span class="token string">'轩辕青锋'</span><span class="token punctuation">,</span> <span class="token string">'鱼幼薇'</span><span class="token punctuation">,</span> <span class="token string">'王初冬'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 列表的拼接</span>character_names3 <span class="token operator">=</span> character_names <span class="token operator">+</span> character_names2<span class="token keyword">print</span><span class="token punctuation">(</span>character_names3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['李淳罡', '剑九黄', '贾嘉佳', '吴六鼎', '温华', '轩辕青锋', '鱼幼薇', '王初冬']</span>    character_names<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>character_names2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>character_names<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['李淳罡', '剑九黄', '贾嘉佳', '吴六鼎', '温华', '轩辕青锋', '鱼幼薇', '王初冬']</span>    <span class="token comment" spellcheck="true"># 列表的重复</span>names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'李东西'</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['李东西','李东西', '李东西']</span>    <span class="token comment" spellcheck="true"># 列表的成员运算</span><span class="token comment" spellcheck="true"># character_names3 = # ['李淳罡', '剑九黄', '贾嘉佳', '吴六鼎', '温华', '轩辕青锋', '鱼幼薇', '王初冬']</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'徐凤年'</span> <span class="token keyword">in</span> character_names3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'徐凤年'</span> <span class="token operator">not</span> <span class="token keyword">in</span> character_names3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span>    <span class="token comment" spellcheck="true"># 获取列表的长度(元素个数)</span>size <span class="token operator">=</span> len<span class="token punctuation">(</span>character_names3<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 8</span>    <span class="token comment" spellcheck="true"># 列表的索引</span><span class="token keyword">print</span><span class="token punctuation">(</span>character_names3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> character_names3<span class="token punctuation">[</span><span class="token operator">-</span>size<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 李淳罡 李淳罡</span><span class="token keyword">print</span><span class="token punctuation">(</span>character_names3<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 王初冬</span><span class="token keyword">print</span><span class="token punctuation">(</span>character_names3<span class="token punctuation">[</span>size<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> character_names3<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 王初冬 王初冬</span>    <span class="token comment" spellcheck="true"># 列表的索引</span><span class="token keyword">print</span><span class="token punctuation">(</span>character_names3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['剑九黄', '贾嘉佳', '吴六鼎', '温华', '轩辕青锋']</span><span class="token keyword">print</span><span class="token punctuation">(</span>character_names3<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['剑九黄', '贾嘉佳', '吴六鼎', '温华', '轩辕青锋']</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>character_names3<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['王初冬', '鱼幼薇', '轩辕青锋', '温华', '吴六鼎', '贾嘉佳', '剑九黄', '李淳罡']</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>character_names3<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['李淳罡', '贾嘉佳', '温华', '鱼幼薇']</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>character_names3<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['王初冬', '轩辕青锋', '吴六鼎', '剑九黄']</span>    <span class="token comment" spellcheck="true"># 列表的比较运算</span>items1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>items2 <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 两个列表比较相等性比的是对应索引位置上的元素是否相等</span><span class="token keyword">print</span><span class="token punctuation">(</span>items1 <span class="token operator">==</span> items2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span>items3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 两个列表比较大小比的是对应索引位置上的元素的大小</span><span class="token keyword">print</span><span class="token punctuation">(</span>items1 <span class="token operator">&lt;=</span> items3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：<br> 由于列表是可变类型，所以通过索引操作既可以获取列表中的元素，也可以更新列表中的元素。对列表做索引操作一样要注意索引越界的问题，对于有<code>N</code>个元素的列表，正向索引的范围是<code>0</code>到<code>N-1</code>，负向索引的范围是<code>-1</code>到<code>-N</code>，如果超出这个范围，将引发<code>IndexError</code>异常，错误信息为：<code>list index out of range</code>。</p></blockquote><h4 id="列表元素的遍历"><a href="#列表元素的遍历" class="headerlink" title="列表元素的遍历"></a>列表元素的遍历</h4><ul><li>通过’for‘循环遍历<br>```python<br>character_names = [‘李淳罡’, ‘剑九黄’, ‘贾嘉佳’, ‘吴六鼎’, ‘温华’, ‘轩辕青锋’, ‘鱼幼薇’, ‘王初冬’]</li></ul><p>for name in character_names:<br>    print(name)</p><p>for index in range(len(character_names)):<br>print(character_names[index])</p><pre><code>### 列表的方法#### 添加元素和删除元素```pythoncharacter_names = ['姜似', '鱼幼薇', '南宫仆射']   # 使用append方法在列表末尾添加元素character_names.append('红薯')print(character_names)  # ['姜似', '鱼幼薇', '南宫仆射', '红薯']   # 使用insetr方法在列表指定索引位置插入元素character_names.insert(1, '洛阳')print(character_names)  # ['姜似', '洛阳', '鱼幼薇', '南宫仆射', '红薯']   # 删除元素character_names.remove('红薯')print(character_names)  # ['姜似', '洛阳', '鱼幼薇', '南宫仆射']   # 删除指定索引位置的元素# 默认删除列表最后一个元素# pop方法会返回删除的元素character_names.pop(2)  print(character_names)  # ['姜似', '洛阳', '南宫仆射']   # 删除列表末尾元素character_names.pop()   # 清空列表中的元素character_names.clear()print(character_names)  # []</code></pre><blockquote><p>注意：<br> 在使用<code>remove</code>方法删除元素时，如果要删除的元素并不在列表中，会引<code>ValueError</code>异常，错误消息是：<code>list.remove(x): x not in list</code>。在使用<code>pop</code>方法删除元素时，如果索引的值超出了范围，会引发<code>IndexError</code>异常，错误消息是：<code>pop index out of range</code>。</p></blockquote><pre class="line-numbers language-python"><code class="language-python">character_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'姜似'</span><span class="token punctuation">,</span> <span class="token string">'鱼幼薇'</span><span class="token punctuation">,</span> <span class="token string">'南宫仆射'</span><span class="token punctuation">]</span><span class="token keyword">del</span> character_names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>character_names<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['姜似', '南宫仆射']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>从列表中删除元素其实还有一种方式，就是使用Python中的<code>del</code>关键字后面跟要删除的元素，这种做法跟使用<code>pop</code>方法指定索引删除元素没有实质性的区别，但后者会返回删除的元素，前者在性能上略优（<code>del</code>对应字节码指令是<code>DELETE_SUBSCR</code>，而<code>pop</code>对应的字节码指令是<code>CALL_METHOD</code>和<code>POP_TOP</code>）。</p></blockquote><h4 id="元素排序和反转列表的sort操作可以实现列表元素的排序，而reversre操作可以实现元素的反转"><a href="#元素排序和反转列表的sort操作可以实现列表元素的排序，而reversre操作可以实现元素的反转" class="headerlink" title="元素排序和反转列表的sort操作可以实现列表元素的排序，而reversre操作可以实现元素的反转"></a>元素排序和反转列表的<code>sort</code>操作可以实现列表元素的排序，而<code>reversre</code>操作可以实现元素的反转</h4><pre class="line-numbers language-python"><code class="language-python">character_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'姜似'</span><span class="token punctuation">,</span> <span class="token string">'鱼幼薇'</span><span class="token punctuation">,</span> <span class="token string">'南宫仆射'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 排序,sort方法没有返回值，是在原数组上面操作</span>character_names<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>character<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['南宫仆射', '姜似', '鱼幼薇']</span><span class="token comment" spellcheck="true"># 反转</span>character_names<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>character_names<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['鱼幼薇', '姜似', '南宫仆射'] </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="嵌套的列表"><a href="#嵌套的列表" class="headerlink" title="嵌套的列表"></a>嵌套的列表</h3><p>如果列表中的元素又是列表，那么可以说这是嵌套的列表。嵌套的列表可以用来表示数学上的矩阵，表格。例如：我们想保存5个学生3门课程的成绩，可以定义一个保存5个元素的列表保存5个学生的信息，而每个列表元素又是3个元素构成的列表，分别代表3门课程的成绩。但是，一定要注意下面的代码是有问题的</p><pre class="line-numbers language-python"><code class="language-python">scores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token keyword">print</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>看上去我们好像创建了一个<code>5 * 3</code>的嵌套列表，但实际上当我们录入第一个学生的第一门成绩后，你就会发现问题来了，我们看看下面代码的输出。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 嵌套的列表需要多次索引操作才能获取元素</span>scores<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">95</span><span class="token keyword">print</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [[95, 0, 0], [95, 0, 0], [95, 0, 0], [95, 0, 0], [95, 0, 0]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们不去过多的解释为什么会出现这样的问题，如果想深入研究这个问题，可以通过<a href="http://www.pythontutor.com/visualize.html">Python Tutor</a>网站的可视化代码执行功能，看看创建列表时计算机内存中发生了怎样的变化，下面的图就是在这个网站上生成的。建议大家不去纠结这个问题，现阶段只需要记住不能用<code>[[0] * 3] * 5]</code>这种方式来创建嵌套列表就行了。那么创建嵌套列表的正确做法是什么呢，下面的代码会给你答案。</p><pre class="line-numbers language-python"><code class="language-python">scores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span>scores<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">95</span><span class="token keyword">print</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [[95, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python三大结构</title>
      <link href="/2021/07/22/Python%E8%8F%9C%E9%B8%9F%E5%BF%85%E7%BB%8F%E4%B9%8B%E8%B7%AF(%E4%B8%89)%20/"/>
      <url>/2021/07/22/Python%E8%8F%9C%E9%B8%9F%E5%BF%85%E7%BB%8F%E4%B9%8B%E8%B7%AF(%E4%B8%89)%20/</url>
      
        <content type="html"><![CDATA[<h3 id="Python三大结构"><a href="#Python三大结构" class="headerlink" title="Python三大结构"></a>Python三大结构</h3><ul><li>顺序：语句从上到下的执行</li><li>分支：根据不同的情况，走对应的分支，执行不同的代码</li><li>循环：重复运行某一段代码块，直到满足某一个条件才会结束循环，或者是遍历完所有的元素也会跳出循环</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python内置数据类型</title>
      <link href="/2021/07/21/Python%E8%8F%9C%E9%B8%9F%E5%BF%85%E7%BB%8F%E4%B9%8B%E8%B7%AF(%E4%BA%8C)/"/>
      <url>/2021/07/21/Python%E8%8F%9C%E9%B8%9F%E5%BF%85%E7%BB%8F%E4%B9%8B%E8%B7%AF(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Python内置并且常见的数据类型"><a href="#1-Python内置并且常见的数据类型" class="headerlink" title="1. Python内置并且常见的数据类型:"></a>1. Python<strong>内置</strong>并且常见的<strong>数据类型</strong>:</h3><ul><li><p>整型(int)：</p><ul><li>Python中不仅仅有我们生活中常见<strong>自然数</strong>，它和任何一门编程语言一样可以处理<strong>任意大小</strong>的整数</li><li>二进制：</li><li>八进制</li><li>十进制</li><li>十六进制</li></ul></li><li><p>浮点型(float)： 浮点型通俗来说就是我们熟知的小数；这里包括了一切负数，一切整数</p></li><li><p>字符串型(str)：字符串是用<strong>单引号(‘hello’)<strong>或者</strong>双引号（”hello”）</strong>引起来的任意文本，通常字符串里面的内容表示就是表面的那么简单，你看到是什么样就是什么样，当然也有特例存在，那就是转义字符</p>  <img src="files(二)\1.png" align="left" style="zoom:80%;"><p>  <strong>注意</strong>：python中说的空字符串并非“    ”里面是空格，而是””，也即是在引号里面什么都没有称之为空字符串</p></li><li><p>布尔型(bool)：布尔值<strong>只有</strong>True，False两种值</p></li><li><p>自定义类型：用户根据自己的需求定义数数据类型</p></li></ul><h3 id="2-变量"><a href="#2-变量" class="headerlink" title="2. 变量"></a>2. 变量</h3><ol><li><p>定义：一般我们说的变量是用来方便<strong>存储数据的载体</strong>，而之所以称其为变量是因为<strong>变量的值可以被读取和修改</strong>。</p></li><li><p>对于变量我们一般会为其取一个优雅而漂亮的名字，在为变量命名的时候我们往往会严格遵守一些规则:</p><ul><li><p>变量名由<strong>字母</strong>(Unicode字符)， <strong>数字</strong>和<strong>下划线</strong>构成。切记，数字不能作为变量名的开头(如果不想造成不必要的麻烦，我在这建议都用英文字母来为变量命名)</p>  <img src="files(二)\2.png" align="left" style="zoom:80%;"></li><li><p><strong>大小写敏感</strong>，即大写变量和小写变量属于不同变量</p><img src="\files(二)\3.png" aligin="left" style="zoom:80%;"></li><li><p>避免与Python语言的关键字<strong>（有特殊含义的单词）和</strong>保留字<strong>（如函数、模块等的名字）</strong>发生重名的冲突。</p><p>  建议:</p><ul><li>变量名通常使用小写英文字母，多个单词用下划线进行连接</li><li>下划线开头的变量通常是受保护的</li><li>私有变量用两个下划线开头(如没有特殊情况请不要以下划线开头)</li><li>在命名是最后做到<strong>见名知意</strong></li></ul>  <img src="\files(二)\4.png" align="left" style="zoom:80%;">  </li><li><p><strong>tips</strong>:  </p><ol><li>在Python中如果循环变量用不到，则可以用 **_ **表示</li></ol>  <img src="D:\千锋培训\知乎文章\files(二)\5.png" align="left" style="zoom:80%;">  <ol start="2"><li>在Python中，给一个变量赋值并<strong>不需要申明数据的类型</strong>，Python会自动识别所给的数据类型 <img src="D:\千锋培训\知乎文章\files(二)\6.png" glign="left" style="zoom:80%;"></li></ol></li></ul></li></ol>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
